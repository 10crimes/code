NOTE:

It is a relevant issue at this point, whether we fork into one of the following:
  - Achieve proper Java support (requires expansion).
  - Present a nice and easy "functional Java" (requires making more friendliness).
In fact, the project could be taken in either direction.
Can we hope to support an N-dimensional project?
Or can we at least hope to preserve some common code?
It should be documented in CVS when either of the forks starts.
LOL, maybe we could make it a boolean option somewhere!

We shall probably add various nicities to do with context.  Eg. which methods are viable given their arguments and the items on the desktop; which icons fit the selected method?



BUGS:

Array ObjectIcons do not work.
Maybe we should opt to make Vector's / Arrays transparantly equivalent to the user.
Yeah!

Methods do not display which Object they belong to (should probably group / remain grouped near it).
Well, desktop variables do not exist yet either.

Only the last DropTarget created seem to notice mouseEntered and Exits.  All should!
Ah no.  The problem is that InnerFrames which are not focused, do not pass mouse events to their children.
This is also why we have trouble when we bring the moving icons to the front.
Ah no it isn't.  But now that first is fixed with dodgy hack, only second needs fixing.

The Boolean argument checkbox component is not yet drag-droppable like the others.

When icons are dropped into arguments, their variable name should be recorded (with the ParameterDropTarget?), so that when the method is called, it can be seen which of the desktop's variables were used to make the call.  (Eg. for code-generation.)



TODO:

Split up old VisualJava from new VisualJava.

Different icon for each class type (can of course default to parent if no icon specified for that class)!

We really want to be able to include (load or preferable pre-load) external jars.

Before further progress, let us not forget that certain statics may need to be accessed, eg. from abstract classes.
We have still left some bits of Java hidden from us.

On the other hand, the current state of the software is more appropriate for a simplified "functional Java", so maybe further expansion will just complicate the project.  (In "functional Java", Java nasties could be hidden behind more appropriate functional wrappers.)

Would be good to remember commonly-used methods of classes,
and even share them with other users!


DONE:

Menu's are now nicely split and ordered alphabetically.
However in the method listings, they should be arranged by the method name field (not the return type).
I will now solve this by putting return type at the end!

When a MethodFrame's method is invoked, it's TextFields sometimes resize.
But the MethodFrame itself doesn't.
When components grow they somtimes hide others.

Need to be able to drop objects onto Arguments.
What sort of component should the Object Arguments be?

Support for setters and getters (eg. get()/accessor properties can be displayed automatically)

