NOTE:

It is a relevant issue at this point, whether we fork into one of the following:
  - Achieve proper Java support (requires expansion).
  - Present a nice and easy "functional Java" (requires making more friendliness).
In fact, the project could be taken in either direction.
Can we hope to support an N-dimensional project?
Or can we at least hope to preserve some common code?
It should be documented in CVS when either of the forks starts.



BUGS:

Array ObjectIcons do not work.
Maybe we should opt to make Vector's / Arrays transparantly equivalent to the user.
Yeah!



TODO:

Methods do not display which Object they belong to (should probably group / remain grouped near it).
Well, desktop variables do not exist yet either.

Need to be able to drop objects onto Arguments.
What sort of component should the Object Arguments be?
We really want to be able to include (load or preferable pre-load) external jars.

Support for setters and getters (eg. get()/accessor properties can be displayed automatically)

Different icon for each class type (can of course default to parent if no icon specified for that class)!

Before further progress, let us not forget that certain statics may need to be accessed, eg. from abstract classes.
We have still left some bits of Java hidden from us.

On the other hand, the current state of the software is more appropriate for a simplified "functional Java", so maybe further expansion will just complicate the project.  (In "functional Java", Java nasties could be hidden behind more appropriate functional wrappers.)


DONE:

Menu's are now nicely split and ordered alphabetically.
However in the method listings, they should be arranged by the method name field (not the return type).
I will now solve this by putting return type at the end!

When a MethodFrame's method is invoked, it's TextFields sometimes resize.
But the MethodFrame itself doesn't.
When components grow they somtimes hide others.

