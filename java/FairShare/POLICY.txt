


By "global" I mean "shared+distributed".



--- Tags

A tag can have a description which explains in detail exactly what makes it
differ from other similarly named tags.  The global policy should be that this
description data lives in key tagdesc:

In fact some tags even have rules associated with them:
e.g. If tag:rachels_favourite_cooking_recipies then tag:cooking_recipie



The "public" tag could be the globally "agreed" merge of all the private tags.
Continually estimated and updated according to new info and checks.
Can we trust the servers with a good reputation to give accurate tags?
No for tags we go for total democracy - each "ip/user" has an equal vote.



If you have a huge debt to peer X, what incentive is there to give
back to him, since you will never dent the debt?




DONT_SHOW_ME
and
DONT_SHOW_SYS



In terms of space it is far more efficient to store all the things together:
  hash   rating   default_filename

But if some of them won't be there, we can save space by storing them separately.
Although it seems like a lot of work.
Indexed tables cannot be guaranteed globally, so only local clients and
ultrapeers can use them.

Oh but if we index everything (files,tags,...) by sha1, then we do have a
global index (of things that cannot update?  or are we only sha-ing the keys?
Most keys will be shorter than the SHA sum!  :P 
Yeah SHA sum needs at least 32 bits to store it :f
We could have local hash of SHA to int (16-bit number).
Or direct link to the damn object :P
Hey wait that's true if we do have a 40-char hash String, does Java really
cost 40 chars to hold another copy?  Maybe not!






"Maintainers"
B sees that A is doing a good job.
He votes for A's stuff, and by rates the new stuff as better.
A goes offline.
But B has been making copies, and he becomes the new maintainer.  His older
copies are already rated up, so he moves in smoothly, alongside some others.






What if, you like a particular film, altho u don't have a copy of it.  But u
want to tell the network that this film is one of your favourites.
This is a rating on something vague - a word or tag.
Maybe do it through a user stage - he does a lookup for the film, finds a copy, doesn't downloaded it, but rates it anyway (via hash) as good.



Not all things which have tags are files.
e.g. some searches might produce results which are URLs.
If there is a hash, it refers to the contents of that URL.
(Assuming the URL points to a file that does not change.)
So a hash lookup might give back the URL to a file with that hash, as well as
peers which have the file with that hash. 




// Peer-to-peer protocol:

When two peers connect, is one a server and one a client?  Or do we start TWO I/O streams, for req/res in both directions?

SEARCH <sender> <text>\n

FINDPEERS <sender> <hash>\n

The <sender> is an IP/port where people should send results.

Do we also want to give each request an ID?  The ID need only be unique on the
sender's machine.  It can tell the sender which query the response is for!
Otherwise the response should contain the query data.  Or enough data so that
the querier can see for himself where the result should go.  


