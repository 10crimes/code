Main = CSrc

CSrc = CSrcBit CSrc
     | CSrcBit

#     | Class "};" CSrc
#     | CSrcBit "\n" CSrc
#     | Whitespace CSrc
#     | CSrcBit CSrc
#     | CSrcBit
#     | "\n"
#     | <iffytypestuff> CSrc

CSrcBit = Whitespace
        | Comment
        | Include
        | Method
        | VariableDecl
        | Class

# Include = "#include" <stuff/"\n">
Include = "#" <stuff/"\n"> "\n"
h: ""

VariableDecl = OptWhitespace OptVarMods VarType " " VarName OptVarBeing ";"
h: OptVarMods " " VarType " " VarName OptVarBeing ";\n"
c: "// Variable " VarType " " VarName " declared in .h file\n"

OptVarMods = OptVarMod OptWhitespace OptVarMods
           | OptVarMod OptWhitespace
           | ""

OptVarMod = "public"
          | "private"
          | "static"

VarType = <vartype/" ;(){}">

# h: <vartype>
# c: <vartype>

VarName = <varname/" ;(){}">
h: <varname>
c: <varname>

OptVarBeing = OptWhitespace "=" OptWhitespace <varbeing/";">
            | ""

# VarStuff = <vartype/"\n;{}() ">
#          | <varstuff/"\n;{}() "> " " <vartype/"\n;{}() ">

# VarBeing = <varname/"\n;(){} =">
#          | <varname/"\n;(){} ="> Whitespace "=" <varinit/"\n;">

#               <vartype/"\n ;{}()"> " " <varname/"=">
#             | <varstuff/"\n;{}()"> " " <vartype/"\n ;{}()"> " " <varname/"=">
#             | <vartype/"\n ;{}()"> " " <varname/"="> "=" <varinit/";">
#             | <varstuff/"\n;{}()"> " " <vartype/"\n ;{}()"> " " <varname/"="> "=" <varinit/";">

Comment = "/*" EndCom
        | "//" <stuff/"\n"> "\n"
h: "//" <stuff> "\n"

# h: "/* " <stuff> EndCom "*/\n"

# Hack for /* */ since we might have /* blah foo*bar */

EndCom = <stuff/"*"> "*/"
       | <stuff/"*"> "*" EndCom
h: ""

Class = "class " <name/"\n ;{}()"> " " <moremods/"\n;{}()"> "{" ClassInside OptWhitespace "};"
      | ClassMods "class " <name/"\n ;{}()"> " " <moremods/"\n;{}()"> "{" ClassInside OptWhitespace "};"
h: ClassMods " class " <name> ";\n" ClassInside
c: "// Start of class " <name> "\n" ClassInside

ClassMods = ClassMod ClassMods
          | ClassMod

ClassMod = Whitespace
         | "public"
         | "private"

ClassInside = OptWhitespace "public:" ClassInside
            | OptWhitespace "private:" ClassInside
            | OptWhitespace Variables OptWhitespace Methods
            | OptWhitespace Methods

Variables = Comment OptWhitespace Variables
          | VariableDecl OptWhitespace Variables
          | VariableDecl

Methods = OptWhitespace Comment Methods
        | OptWhitespace Method Methods
        | OptWhitespace Method

# Method: Second option is a method declaration

Method = MDecl OptWhitespace "{" Code "}"
       | MDecl OptWhitespace ";"
h: MDecl ";\n"
c: MDecl " {" Code "}\n"

# hreplacement: MDecl ";"
# creplacement: MDecl<stuff> Class<name>::MDecl<name> "(" MDecl<args> ") {" Code "}"
#             | MDecl "{" Code "}"

OptArgs = Args
        | OptWhitespace

Args = DoubleArg
     | Arg

DoubleArg = Arg "," Args
h: Arg "," Args
c: Arg "," Args

Arg = OptWhitespace ArgA OptWhitespace

ArgA = <argtype/" {}();\n,"> Whitespace ArgName
     | <argtype/" {}();\n,">
h: <argtype> " " ArgName
c: <argtype> " " ArgName

ArgName = "(" <argname/"{}();\n, "> ")" OptWhitespace "(" OptArgs ")"
        | <argname/"{}();\n, ">
h: <argname> OptArgs
c: <argname> OptArgs

# Second case is constructor (no type)

MDecl = OptVarMods VarType " " VarName OptWhitespace "(" OptArgs ")"
      | VarName OptWhitespace "(" OptArgs ")"
h: OptVarMods VarType " " VarName "(" OptArgs ")"
c: OptVarMods VarType " unknownclass::" VarName "(" OptArgs ")"

Code = <out/"{}"> "{" Code "}" Code
     | <other/"{}">
c: <out> "{" <in> Code "}" Code <other>

OptWhitespace = Whitespace
              | ""

Whitespace = WhitespaceBit Whitespace
           | WhitespaceBit

WhitespaceBit = "\n"
              | " "
              | Comment


