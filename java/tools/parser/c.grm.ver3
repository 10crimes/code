Main = CSrc

CSrc = CSrcBit CSrc
     | CSrcBit

#     | Class "};" CSrc
#     | CSrcBit "\n" CSrc
#     | WS CSrc
#     | CSrcBit CSrc
#     | CSrcBit
#     | "\n"
#     | <iffytypestuff> CSrc

CSrcBit = WS
        | Comment
        | Include
        | Method
        | VariableDecl
        | Class
        | ClassDecl

# Include = "#include" <stuff/"\n">
# can be define as wel
Include = "#" <stuff/"\n"> "\n"

# c: ""

ClassDecl = ClassOptTemplate "class" OptWS <name/"{};"> ";"
c: "// Class declaration of existence: " <name> "\n"
h: ClassOptTemplate " class " <name> ";"

Class = OptWS ClassOptTemplate ClassMods "class" WS <name/"\n ;{}()"> WS <moremods/"\n;{}()"> "{" ClassInside OptWS "};"
      | OptWS ClassMods "class " <name/"\n ;{}()"> " " <moremods/"\n;{}()"> "{" ClassInside OptWS "};"
h: ClassOptTemplate ClassMods " class " <name> <moremods> "{\n" ClassInside "};\n"
c: "// Start of class " <name> "\n" ClassInside

ClassMods = ClassMod WS ClassMods
          | ClassMod WS
          | ""

ClassMod = "public"
         | "private"

ClassOptTemplate = OptTemplate

OptTemplate = OptWS "template" OptWS "<" TemplateSuperInside ">" OptWS
            | ""

# h: OptTemplate " " OptVarMods " " VarType " " VarName OptVarBeing ";\n"
# c: "// Variable " OptTemplate " " VarType " " VarName " declared in .h file\n"

OptTemplateType = TemplateType
                | ""

TemplateSuperInside = OptWS "class" WS TemplateInside

TemplateType = OptWS <temptype/" (){}<>,"> "<" TemplateTypeInner OptWS ">"

TemplateTypeInner = TemplateType
                  | TemplateInside

TemplateInside = <inside/"<>(){}">

# Took comma out of above to deal with eg. "template <class A,class B>"

# Second case is constructor (no type)
MDecl = OptTemplate OptVarMods OptWS VarType WS OptPtr OptLater MethName OptWS "(" OptArgs ")"
      | OptTemplate OptPtr OptLater MethName OptWS "(" OptArgs ")"
h: OptTemplate OptVarMods VarType " " OptPtr OptLater MethName "(" OptArgs ")"
c: Class^ClassOptTemplate OptTemplate OptVarMods VarType " " OptPtr Class^<name> ` Match m=match.getUp("Class").getDown("ClassOptTemplate").getDown("TemplateSuperInside").getDown("TemplateInside"); return "<"+m.string+">"; ` ` return ( match.getUp("Class")==null ? "" : "::" ); ` OptLater MethName "(" OptArgs ")"

# c: Class^OptTemplate OptTemplate OptVarMods VarType " " OptPtr Class^<name> ` Match m=match.getUp("Class").getDown("ClassOptTemplate").getDown("TemplateSuperInside").getDown("TemplateInside"); return "<"+m.string+">"; ` ` return ( match.getUp("Class")==null ? "/* no class */" : "::" ); ` OptLater MethName "(" OptArgs ")"
# c: Class^OptTemplate OptTemplate OptVarMods VarType " " OptPtr Class^<name> ` Match m=match.getUp("Class").getDown("TemplateSuperInside").getDown("TemplateInside"); return "<"+m.string+">"; ` "::" OptLater MethName "(" OptArgs ")"

OptPtr = OptWS "*" OptWS
			 | OptWS

# h: ` if ( ! match.getDown("OptLater").string.toString().equals("") ) { unusedmatches.clear(); return "/* Skipping >"+match.getDown("OptLater").string+"< */\n"; } return "/* =) */"; ` OptTemplate OptVarMods VarType " " MethName "(" OptArgs ")"

OptLater = MethName "::"
				 | ""

OptVarMods = OptVarMod OptWS OptVarMods
           | OptVarMod OptWS
           | ""

# fillin is one of my #defs, abstract may be Java only, not C
OptVarMod = "public"
          | "private"
          | "static"
          | "fillin"
          | "fillup"
          | "virtual"
          | "abstract"
					| "extern"
          | "unsigned"
          | "signed"
          | "const"
					| "static"
c: ` String val=match.string.toString(); if ( val.equals("virtual") || val.equals("static") /* && match.getUp("Class")==null */ ) return ""; else return ""+match.string; `

# The above should really be split up for methods, variables etc.

# h: <vartype>
# c: <vartype>

# Method names can contain, eg. operator=
MethName = "operator" <op/" ()">
				 | <varname/" =:;(){}">

OptVarBeing = OptWS "=" OptWS <varbeing/";">
            | ""

# VarStuff = <vartype/"\n;{}() ">
#          | <varstuff/"\n;{}() "> " " <vartype/"\n;{}() ">

# VarBeing = <varname/"\n;(){} =">
#          | <varname/"\n;(){} ="> WS "=" <varinit/"\n;">

#               <vartype/"\n ;{}()"> " " <varname/"=">
#             | <varstuff/"\n;{}()"> " " <vartype/"\n ;{}()"> " " <varname/"=">
#             | <vartype/"\n ;{}()"> " " <varname/"="> "=" <varinit/";">
#             | <varstuff/"\n;{}()"> " " <vartype/"\n ;{}()"> " " <varname/"="> "=" <varinit/";">

Comment = "/*" EndCom
        | "//" <stuff/"\n"> "\n"
h: "//" <stuff> "\n"

# h: "/* " <stuff> EndCom "*/\n"

# Hack for /* */ since we might have /* blah foo*bar */

EndCom = <stuff/"*"> "*/"
       | <stuff/"*"> "*" EndCom
h: ""

ClassInside = OptPublicity Comment ClassInside
            | OptPublicity Method ClassInside
						| OptPublicity Include ClassInside
            | OptPublicity VariableDecl ClassInside
						| OptPublicity Class ClassInside
						| OptWS

# Note: Methods given priority because VariableDecl tries to catch operator== !

# ClassInside = OptPublicity Variables OptPublicity Methods
#             | OptPublicity Methods

# Variables = Comment OptWS Variables
#           | VariableDecl OptWS Variables
#           | VariableDecl

# Methods = OptWS Comment Methods
#         | OptWS Include Methods
#         | OptWS Method Methods
#         | OptWS Method

OptPublicity = OptWS PublicColon OptWS
             | OptWS PrivateColon OptWS
             | OptWS

PublicColon = "public:"
c: ""
h: "public:"

# c: "public:"

PrivateColon = "private:"
c: ""
h: "private:"

# c:"private:"

# Method: Second option is a method declaration

Method = MethodWithCode
			 | MethodWithoutCode
h: ` return ( match.getDown("OptLater").string.toString().equals("") ? "" : "/* Skipping later :: " ); ` MethodWithCode MethodWithoutCode ` return ( match.getDown("OptLater").string.toString().equals("") ? "" : "*/\n" ); `

MethodWithCode = MDecl OptWS "{" Code "}"
h: MDecl "; // Method\n"

# c: MDecl " {" Code "}\n"

MethodWithoutCode = MDecl OptWS ";"
h: MDecl "; // Method\n"
c: "/* Skipping declared method " MDecl " */\n"

# hreplacement: MDecl ";"
# creplacement: MDecl<stuff> Class<name>::MDecl<name> "(" MDecl<args> ") {" Code "}"
#             | MDecl "{" Code "}"

OptArgs = Args
        | OptWS

Args = DoubleArg
     | Arg

DoubleArg = Arg "," Args
h: Arg "," Args
c: Arg "," Args

Arg = OptWS ArgA OptWS

ArgA = ArgType WS ArgName
     | ArgType
		 | "..."

# h: <argtype> " " ArgName
# c: <argtype> " " ArgName

# ArgType = VarType OptTemplateType

ArgType = VarType

VariableDecl = OptVarMods VarType WS VarNames OptVarBeing ";"
c: "// Variable " VarType VarNames OptVarBeing " declared in .h file"
h: OptVarMods VarType WS VarNames OptVarBeing "; // Variable declared"

# Surely should be: VariableDecl = OptTemplateType OptWS OptVarMods VarType " " VarName OptVarBeing ";"

VarNames = VarName OptWS "," OptWS VarNames
         | VarName OptWS

VarType = OptArgMods OptWS TemplateType
        | OptArgMods OptWS <vartype/" <>\n;(){},">
        | ""

OptArgMods = OptVarMods | ""

# need to avoid = or it will be read!
VarName = ArgName

ArgName = "(" <argname/" ;=(){},<>\n"> ")" OptWS "(" OptArgs ")"
				| <argname/" ;=(){},<>\n"> OptWS "(" OptArgs ")"
        | <argname/" ;=(){},<>\n">

# h: <argname> OptArgs
# c: <argname> OptArgs

Code = <out/"{}!qt!/"> RestCode
     | <other/"{}">
c: <out> RestCode <other>

RestCode = String Code
				 | Comment Code
				 | "/" Code
         | InnerCode Code

# c: String Comment Slash InnerCode Code

String = "!qt!" <str/"!qt!"> "!qt!" Code

InnerCode = "{" Code "}"

OptWS = WS
      | ""

WS = "\n" OptWS
   | " " OptWS
   | "\t" OptWS
   | Comment OptWS


