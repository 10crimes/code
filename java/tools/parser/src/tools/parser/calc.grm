Main=Expr _

## Common:

Bit = _ Number _
    | _ BracedExpr _

BracedExpr = "(" Expr ")"
build: "new GroupedExpr(" $2 ")"

Number = NegativeNumber | PositiveNumber | PlainNumber

NegativeNumber = "-" JustNumber
build: "new Number(-" $2 ")"

PositiveNumber = "+" JustNumber | JustNumber
build: "new Number(" JustNumber ")"

PlainNumber = JustNumber

JustNumber = <numstr~"0123456789.">

_ = (" "|"\n")*
build: ""

# We just need to do now is define Expr.



# So it turns out, after reigning in the backtrack algorithm, whilst we can
# parse some advanced languages fine, parsing a simple infix calculator is not
# so trivial!

# How would we like to solve it?  Can we express the algorithmic approach
# required in our grammar file?

# One simple way to avoid the stack overflow would be to say "we will not look
# for another Add if we are inside the stack of a match against Add and we
# haven't matched anything yet!".  This might still allow 1 + 2 + 3 + 4 on the
# RHS just not the LHS.

# This may also be an opportunity to face up to the inefficiency problem of
# repeatedly matching Expr against the first token, when testing for rules
# which contain it (Add, Subtract, ...).
#
# However avoiding that repetition will separate some tokens we may want to
# keep together.  (See attempt 2 below.)  Whilst it may be possible to find
# related elements in the tree, it's not friendly.

# Discoveries: It is dangerous to use recursive rules which do not consume any
# chars from the stream!  This behaviour could be detected at runtime, with a
# little overhead, or possibly detected at grammar building time with some
# logical analysis.



## First attempt: Simple intuitive approach
## Causes a StackOverflow by recursively trying to match Add without consuming anything.
##
## However this is a correct description of the syntax.  The problem is our
## search algorithm.
##
## A breadth-first search could find a solution before Add stack overflows, but
## that does not fit with how we've been using the grammar for other languages.
#
# Expr = Add
#      | Subtract
#      | Multiply
#      | Divide
#      | Bit
#
# Add = Expr "+" Expr
# build: "new Addition(" $1 "," $3 ")"
#
# Subtract = Expr "-" Expr
# build: "new Subtraction(" $1 "," $3 ")"
#
# Multiply = Expr "*" Expr
# build: "new Multiplication(" $1 "," $3 ")"
#
# Divide = Expr "/" Expr
# build: "new Division(" $1 "," $3 ")"



## Second attempt: Lets make sure we consume something!
## The problem is, matching the operator separately from its operands will make
## it harder to do meaningful actions.
#
# Expr = Bit ( Operator Expr )*
#
# Operator = AddOp | SubOp | MultOp | DivOp
#
# AddOp = "+"
# SubOp = "-"
# MultOp = "*"
# DivOp = "/"



## Third attempt: Force each operator to consume something.
##
## Note that this still brings back the inefficiency issue, an issue which
## becomes more problematic the larger the LHS is.
##
## By the time "(1+2*3) - 4" is matched, we will have already had to parse the
## "(1+2*3)" three times previously, when testing for * / and +.
##
## A simple cache/memo may successfully address this, although its neccessary
## minimum size will depend on the file at hand.  (Should we cache failures as
## well as successful matches?  Presumably we should throw them away according
## to cost as much as to age.)

## BUG TODO: 1 + 5*3 + 4 will group 3+4 into an Expr - oh no precedence!

## If we consume Bit on the RHS of Multiply and Divide, this should grab what
## is needed.  But then we would need to build an Add(Add( structure, which is
## blocked because we dropped Expr from Add's LHS.

## Our options for building that expression are:
##
##   Add( Add(1,Mult(5,3)), 4 )
##
##   Add( 1, Add(Mult(5,3),4) )
##
## Either way, we need to build an Add before (outside) the Mult.
##
## So we could allow Add on its LHS to look for the high-order precendence Mult.
## But what if that Mult needs to consume an Add?  :f

## This problem of needing to consume tokens before deciding what to do with
## them appears in other parsers.  A common solution is to use lookahead.
# 
# Expr = Multiply
     # | Divide
     # | Add
     # | Subtract
     # | Bit
# 
# Add = Bit "+" Expr
# build: "new Addition(" $1 "," $3 ")"
# 
# Subtract = Bit "-" Expr
# build: "new Subtraction(" $1 "," $3 ")"
# 
# Multiply = Bit "*" Expr
# build: "new Multiplication(" $1 "," $3 ")"
# 
# Divide = Bit "/" Expr
# build: "new Division(" $1 "," $3 ")"



## Fourth attempt: Try to consume bit first, expression second?
## This seems to work on valid expressions.  Invalid expressions will drop down
## and recursively explore Expr with consuming anything, until a stack
## overflow.  This condition could be detected and aborted by the parser.
## And if done, we could return to the earlier grammar definitions.
## Although cycles through Expr are separated by intermediary rules, the key
## thing to notice is re-evaluation of an Atom type before anything is consumed.
## We may want to retain such Vectors in case the rule backtracks, but we
## should also take note of their memory constraints, in case we never clear
## them!  Perhaps a marker should be used to indicate where they are needed, or
## where they may be cleared.
## We can't *just* fail when a cycle is detected, in case it is actually one of
## the needed cycles.  (E.g. (7*4 + 3) * 9)

# Expr = Bit "*" Expr
#      | Bit "/" Expr
#      | Bit "+" Expr
#      | Bit "-" Expr
#      | Bit
#      | Expr "*" Expr
#      | Expr "/" Expr
#      | Expr "+" Expr
#      | Expr "-" Expr
# 
# Multiply = Bit "*" Expr | Expr "*" Expr
# build: "new Multiplication(" $1 "," $3 ")"
# 
# Divide = Bit "/" Expr
# build: "new Division(" $1 "," $3 ")"
# 
# Add = Bit "+" Expr
# build: "new Addition(" $1 "," $3 ")"
# 
# Subtract = Bit "-" Expr
# build: "new Subtraction(" $1 "," $3 ")"



# ## Fifth attempt - Hierarchical
# 
# Expr = _ HighOrderThing _ (LowOrderOpGroup)*
# 
# LowOrderOpGroup = "+" _ HighOrderThing _
                # | "-" _ HighOrderThing _
# 
# HighOrderThing = NotExpr _ (HighOrderOpGroup)*
# 
# HighOrderOpGroup = "*" _ NotExpr _
                 # | "/" _ NotExpr _
# new Operator
# 
# NotExpr = "(" _ Expr _ ")" _ | Bit _



## Sixth attempt - Hierarchical reshaped

Expr = LowOrderGroup

LowOrderGroup = _ HighOrderThing _ (LowOrderOpGroup)*

LowOrderOpGroup = "+" _ HighOrderThing _
                | "-" _ HighOrderThing _
build: "new LLOperator(" $1 ", " HighOrderThing ")"

HighOrderThing = HighOrderOperation
               | NotExpr _

HighOrderOperation = NotExpr _ (HighLvlOp _ NotExpr)*
build: $3 NotExpr ", " $3 "), "
# Dang.  We want out output the HLOs first, then the first NoExpr, then the other NotExprs
# Perhaps we could switch target: $3:buildHLOps $1 $3:buildNEs
# Currently it gets the operators in the right order, yay, but not the NotExprs!

HighLvlOp = ("*"|"/")
build: "new HLOperator(!qt!" $1 "!qt!, "

HighOrderOpGroup = "*" _ NotExpr _
                 | "/" _ NotExpr _

NotExpr = "(" _ Expr _ ")" _ | Bit _



