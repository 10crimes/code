# DLang - A dumb language
#
# Export targets:
#
# dintj - runtime structures suitable for interpreting by Java dlang.interpreter.*

# TODO:
#   Array dereference (aka List shortcuts)
#   Member dereference (fields and methods of objects).  Similar for statics...
#   .. namespaces
#   Constructor definition and invocation
#   Templating (generics)
#   Anonymous implementations?  Or first order functions...
#   Shortcuts for hashmaps
#   Loops

# @OPTION rewrite_meaningful_indentation "{" "}"

Main = DLangFile

DLangFile = DLangHeader DLangFileSome

DLangHeader = DLangModuleBlock DLangImports

DLangModuleBlock = Comment DLangModuleBlock
                 | Space DLangModuleBlock
                 | DLangModule
                 | ""

DLangModule = "package" Space <module/"\n;"> EOL
            | "module" Space <module/"\n;"> EOL

# DLangImports = DLangImport [ DLangImports ]

DLangImports = DLangImport DLangImports
             | DLangImport
             | WS

DLangImport = DLangImportProper
            | Comment
            | Space

DLangImportProper = "import" Space <import/"\n"> "\n"

DLangFileSome = DLangFileBit DLangFileSome
              | DLangFileBit

# Should it be 0 or more?

DLangFileBit = Space DLangFileBit
             | Comment | ClassDefinition | FunctionDefinition | Statement

Comment = "#" <comment/"\n"> "\n"
        | "//" <comment/"\n"> "\n"

# DLangFileSome = 1 or more DLangFileBits
# TODO: Parametrised classes (templates)
ClassDefinition = "class" Space <className/" \n"> ClassMods NL ClassBody

ClassMods = Space "extends" Space ClassRef
          | Space "implements" Space ClassRef
          | OptHorizSpace

ClassBody = ""

# IndentedDLangBlock

# TODO
IndentedDLangBlock = DLangFileSome

FunctionDefinition = <fnname/" ("> "(" ArgumentSignatureList ")" WS "=" WS FunctionBody
dintj: "new Function(!qt!" <fnname> "!qt!," ArgumentSignatureList "," FunctionBody ")"

FunctionBody = NiceCode | MutableCode

## NiceCode swallowed the var from an assignment statement
## Should NiceCode demand that it ends neatly with an EOL?
# FunctionBody = MutableCode

NiceCode = Expression Space "where" Space NiceNEDefs EOL
         | Expression EOL

NiceNEDefs = NamedExpression '\n' NiceNEDefs
           | NamedExpression

MutableCode = WS Statement MutableCode
            | WS Statement WS

ArgumentSignatureList = ArgumentSignature MoreArgs
     | ArgumentSignature
     | WS

# ArgumentSignature = TypedArg | UntypedArg
ArgumentSignature = UntypedArg

UntypedArg = WS VarName WS

TypedArg = WS Type Space VarName WS

MoreArgs = "," ArgumentSignatureList

# Identifier = <varname/"<>\n!qt!. :^+-*()/">
Identifier = <varname~"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$@0-9">

VarName = Identifier

ClassName = Identifier

VarReference = VarName

# Could also be called a PrimitiveLiteral
ConstReference = Number | String

Statement = Assignment | Comment | FunctionDefinition | FunctionCall | Loop

Assignment = NormalAssignment
           | SpecialAssignment

NormalAssignment = VarOrMemberReference OptHorizSpace "=" Expression EOL

SpecialAssignment = VarOrMemberReference OptHorizSpace SpecialAssignmentOperator Expression EOL

SpecialAssignmentOperator = "+=" | "-=" | "*=" | "/="

# ConstReference must come first because ATM VarOrMemberReference swallows numbers!

ExpressionTerminal = ConstReference | VarOrMemberReference

Expression = ExpressionBit OptHorizSpace

# We have a problem with Algebra
# If I let Algebra contain Expressions, then it calls its repeatedly!

ExpressionBit = HorizSpace ExpressionBit
              | TerminalAlgebraicOperation
              | Algebra
              | ExpressionAtom

ExpressionAtom = HorizSpace ExpressionAtom
               | FunctionCall
               | BracketedExpression
               | ExpressionTerminal

# TODO: There is no support here for calling the results of expressions (or their members) :F

FunctionCall = ConstructorCall | RealFunctionCall

RealFunctionCall = VarOrMemberReference "(" ArgumentParameterList ")"

ConstructorCall = "new" Space RealFunctionCall

MemberName = VarName

VarOrMemberReference = VarReference "." MemberName
                     | VarReference

#                      | VarName

ArgumentParameterList = Expression "," ArgumentParameterList
                      | Expression
                      | ""

BracketedExpression = "(" WS ExpressionBit WS ")"

## Can lock us in a cyclic loop ExpressionBit -> Algebra -> ExpressionBit !
# Algebra = ExpressionBit Operator ExpressionBit

Algebra = ExpressionAtom OptHorizSpace Operator OptHorizSpace Expression

TerminalAlgebraicOperation = ExpressionAtom OptHorizSpace Operator OptHorizSpace Expression

Operator = OperatorSymbol
dintj: "new Operator(" OperatorSymbol ")"

OperatorSymbol = BooleanOperator | AlgebraicOperator | OtherOperator

AlgebraicOperator = "*" | "/" | "+" | "-" | "^" | "<<" | ">>" | "&" | "|"

BooleanOperator = "==" | "!=" | ">" | "<" | ">=" | "<=" | "&&" | "||"

OtherOperator = "<" <varname/" \n\t,."> ">"


VarDeclaration = VarDeclarationAndAssignment
               | VarDeclarationWithoutAssignment

VarDeclarationWithoutAssignment = "var" Space VarName

#                                 | Type Space VarName
#                                 | "var" Space VarName WS ":" WS Type
#                                 | VarName WS ":" WS Type

Type = TypeWithoutTemplate | TypeWithTemplate

TypeWithoutTemplate = Identifier

TypeWithTemplate = TypeWithoutTemplate WS Template

Template = "<" TemplateBits ">"

TemplateBits = WS TemplateBit WS "," WS TemplateBits
             | WS TemplateBit

VarDeclarationAndAssignment = VarDeclarationWithoutAssignment WS "=" WS Expression

Number = Float | Int

Float = Digits "." Digits

Int = Digits

Digits = Digit Digits
       | Digit

# Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

Digit = <number~"0123456789">

String = "!qt!" <string/"!qt!"> "!qt!"

Loop = ForLoop | WhileLoop

ForLoop = "for" Space VarName WS "=" WS LoopRange

## TODO: Gah - Expressions don't parse nicely here!  (They swallow the "to" or what?)
# LoopRange = Expression Space "to" Space Expression

LoopRange = ConstReference Space "to" Space Expression OptStep

OptStep = WS "step" Space Expression
        | ""

WhileLoop = "while" Space Condition

Condition = Expression

# We hope to handle significant indentation by pre-parsing the lines and
# rewriting with "{" and "}"s which the grammar can easily detect.  This may
# cause issues on multi-line statements which should not have "{" and "}"s!



# WS    = Optional WhiteSpace
# Space = Required WhiteSpace

NL = "\n"

WS = Whitespace | ""

Space = Whitespace

# Whitespace = WhitespaceBit Whitespace
           # | WhitespaceBit
# 
# WhitespaceBit = "\n"
              # | " "
              # | "\t"
              # | "\r"

Whitespace = <whitespace~" \t\n\r">

# Expressions will eat into the next line if allowed to swallow "\n"s
# They don't know when to stop!
# So we only allow them to swallow HorizSpace

# HorizSpace = " " | "\t"
HorizSpace = <horizspace~" \t">

OptHorizSpace = HorizSpace | ""

# EOL = ";" | "\n"

EOL = "\n"

