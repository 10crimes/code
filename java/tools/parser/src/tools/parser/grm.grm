# This grammar defines the file format for a grammar.
# It can be used to parse .grm files.
#
# Export targets ("replacements"/output types - really need to standardise this term!):
#
#   java - output the grammar as a Java RuleSet builder class for Parser.java
#
#   hugs - output the grammar in Haskell, for import by hwi.ath.cx's parser.hs
#
#   pojo (experimental and fugly) - create a set of bean-like classes to hold grammar atoms in Java
#

# SIGNIFICANT CHANGES:
#
# 2012-03-16 Exclude Vars now *fail* if 0 chars are matched.  Rules which
#            previously found 0-length matches acceptable should be updated to
#            accept them explicitly.
#
# 2012-03-15 Introduced Include Vars (VarAccept).
#
# 2012-??-?? Allowed easier definition of repeat and optional elements with + * [ ... ] and ( ... )
#            See OneOrMore ZeroOrMore OptionalElement and GroupElement

# TODO:
#
#   The Var type is not very powerful.  An anonymous regexp match might be
#   preferable.  e.g. /[$@_a-zA-Z][$@_a-zA-Z0-9]*/
#
#   On the other hand, the simplicity of our Vars may be a feature.
#
# Provide special marker _ or . in replacements which signify whatever
# was matched.  Would allow:
#   A = B | C
#   out: "blah: " _
# instead of:
#   A = B | C
#   out: "blah: " B C
# which is sucky.
# We could also provide $1, $2, $3 like Coffescript's, in which case $0 or $_
# might be a preferable marker for "all".
#
# CONSIDER:
#
#   Done? Allow Comments without blank lines (inbetween other Atoms / almost anywhere)
#   TODO? Allow Comments everywhere!  (Inbetween macros, at the end of rule lines, ...)
#
# CONSIDER: A special grammar rule type which can be given custom decision code
# *inside* the grammar, e.g. $(...) where ... contains some text-matching code
# (an implementation of the Java parser's Type.match() interface).
#
# TODO: Allow importing of other grammars.  So that, e.g. the Expression
# grammar could be imported by many other grammars.  (It might also be nice if
# we could extend the Expression grammar to e.g. CExpression and
# JavaScriptExpression, so that we can handle minor differences, presumably by
# overwriting existing atoms.)
# Importing and extending would differ in that importing will place the grammar
# rules into a namespace (so we might refer to JavaExpression.Expression),
# whereas extending would bring the rules into the local namespace, so they may
# be overridden.

# CONSIDER: MagicTokenOfDoom could be more powerful than
# MagicTokenOfEfficiency, in that the former would commit to the current line
# not just for the current atom but for the whole parse.  So if the line does
# not match after a MagicTokenOfDoom has been passed, we can display an error
# "expected <NextType> but got <remaining_string>".
#
# Possible magic tokens:
#   Taken: * + ( ) [ ] $ = # @
#   Available: ! ^ % & ~ _ - /
# ^ is light on the eye (except in Lucida), so may be suitable for the most common MagicTokenOfEfficiency.
# But - _ and ~ are also quite light, and & is friendly and suggestive of continuation
# ! and ^ are suitable for the DoNotMatch condition.
# The association of ! with warnings makes it a good candidate for MagicTokenOfDoom.
# We can also consider different meanings for &, && and &&&.
#   !   = not
#   !!  = MagicTokenOfEfficiency
#   !!! = MagicTokenOfDoom

# TODO: Do we want to demand spaces separate the elements of atom rules?  If
# so, we should check that this is enforced by the grammar (it should be
# tightened up), or risk people creating grammars without spaces!

# Efficiency in parsers.  One great inefficiency in our existing system is that
# often the same matches will be attempted on the same text many times.
#
# For example when matching Defn = DefnOr | DefnAnd | DefnBit against a single
# item, three matches before DefnBit will be made, the first two failing after
# the match because there are no extra arguments for DefnOr or DefnAnd.
#
# Obviously memoing can solve this, which we got for free when we were in
# Haskell.  We could set up our own cache to catch common/likely repeats or all
# repeats.  (E.g. it would not be too hard to detect possible repeat atoms in a
# single ruleset, and decide to cache just them, but harder if the repeats are
# in sub-atoms, though they could be caught by caching every match!)
# Failed matches could also be cached.  Some failures are fast, some not.
#
# Alternatively we should structure our grammars in an ugly post-"fix-it"
# style, e.g.
#
#   Defn = DefnBit OptDefnPostAndOr
#
# where OptDefnPostAndOr if matched would have to manage the existing
# translation of DefnBit similarly to how * and [] do now.
#
# OptDefnPostAndOr = DefnPostOr | DefnPostAnd | ""
# DefnPostOr = "|" Defn
# DefnPostAnd = Defn

Main = GrammarDefn

# java: "package grammars;\n\n" GrammarDefn

GrammarDefn = Grm
java: "package tools.parser;\n\nimport java.lang.String;\nimport java.util.Arrays;\nimport java.util.Vector;\n\nimport tools.parser.*;\nimport tools.parser.extensions.*;\n\npublic class grmGrm extends GrammarHelper {\n  public static Grammar setupgrammar() {\n    Grammar grammar = new Grammar();\n    RuleSet ruleset;\n    Vector<Type> rule;\n\n" Grm "    return grammar;\n  }\n}\n"
hugs: "module Grammar where\n\ndata Type = Atom String | Var String | Str String\n          | VarExcl String String\n  deriving (Eq)\n\ndata Match = No | Yes Type String [Match] String\n  deriving (Eq)\n\ntype RuleSet = [[Type]]\n\ntype Rule = ( Type , RuleSet , [Replacement] )\n\ntype Replacement = ( String , [Type])\n\n\nrules = [ " Grm " ]\n"
javadecl: "package tools.parser;\n\nimport java.lang.String;\nimport java.util.Arrays;\nimport java.util.Vector;\nimport org.neuralyte.literal.LiteralMap;\n\nimport tools.parser.*;\nimport tools.parser.extensions.*;\n\npublic class grmGrm extends GrammarHelper {\n  public static Grammar setupgrammar() {\n    Grammar grammar = new Grammar( new LiteralMap()" Grm "\n    );\n    return grammar;\n  }\n}\n"

Grm = GrmHeaderBit* GrmBit*

GrmHeaderBit = GrmAt | Whitespace | Comment

GrmAt = GrmOption | GrmImport | GrmExtend | GrmOtherAt

GrmOption = "@OPTION" HorizSpace <optname/" \t\n\r"> HorizSpace OptOptionArgs NL
java: "    grammar.setOption_" <optname> "(" OptOptionArgs ");\n"
## Had trouble referring to grouped atom when OptOptionArgs was inline.
# java: "    grammar.setOption_" <optname> "(" OptionArgs ");\n"
## Alternative, less hard-coded into grammar object.
# java: "    grammar.setOption(!qt!" <optname> "!qt!, { " OptionArgs " } );\n"

OptOptionArgs = ( OptionArgs | HorizSpace | "" )

OptionArgs = MultipleOptionArgs
           | OptionArg

MultipleOptionArgs = OptionArg HorizSpace OptionArgs
java: OptionArg ", " OptionArgs

OptionArg = <arg/" \t\n\r">

GrmImport = "@IMPORT" HorizSpace <namespace/" \t\n\r"> HorizSpace "!qt!" <filename/"!qt!\n"> "!qt!" NL
java: "    grammar.importNamespace(!qt!" <namespace> "!qt!,!qt!" <filename> "!qt!);\n"

GrmExtend = "@EXTEND" HorizSpace "!qt!" <filename/"!qt!\n"> "!qt!" NL

GrmOtherAt = "@" <option_name/" \n"> OptHorizSpace <rest/"\n"> NL
## For prototyping, for now, we allow grammar to insert any Java it likes.
java: "    " <rest>

# TODO: We can try adding ! after Whitespace.  If we have matched some Whitespace then it can't be a comment or an AtomDef, so recursion back through here can quit easily.
# No dude it won't ever test Comment or AtomDef if Whitespace matched, it returns on a whole match.  Therefore ! is only useful if it comes before the end of the line.

GrmBit = Whitespace
       | Comment
       | AtomDef

Comment = "#" <comment/"\n"> "\n"
        | "#\n"
java: "    //" <comment> "\n"
pojo: "    //" <comment> "\n"
javadecl: "    //" <comment> "\n"

OptComment = Comment | ""

# hugs: "-- " <comment> "\n"

AtomName = PackagedAtomName
         | PlainAtomName

## WARNING: Although I want to use "." to refer to modular rules, it is already used for RelDown!
PackagedAtomName = PackageName "." PlainAtomName

PlainAtomName = Identifier

PackageName = Identifier

# Identifier = <identifier/"^.<>\n!qt! =">
# Identifier = <identifier/"^<>\n\t\r !qt!+*()![]{}">
Identifier = <identifier~"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_">

# Note that two AtomDefs without an empty line between them will not parse!

AtomDef = AtomName " = " RuleSet OptReplacements NL
java: "    ruleset=new RuleSet(!qt!" AtomName "!qt!);\n      grammar.addRuleset(ruleset);\n      rule=new Vector<Type>();\n" RuleSet "      ruleset.add(rule);\n" OptReplacements "\n"
hugs: "  ( Atom !qt!" AtomName "!qt!,[\n    [ " RuleSet " ]\n    ] , [\n" OptReplacements "\n  ] ) ,\n"
pojo: "interface " AtomName " {\n\n}\n  class AnImplementation implements " AtomName " {\n" RuleSet "  }\n\n"
# BUG: We cannot make a second reference to AtomName
javadecl: "    .with(!qt!" $1 "!qt!, new RuleSet(!qt!" AtomName "!qt!, " RuleSet OptReplacements "\n    ))\n"

# Replacements are the lines defining export targets: java, hugs, pojo

OptReplacements = YesReplacements | ""

YesReplacements = "\n" Replacements
java: "    // Replacements\n" Replacements
javadecl: ",\n        /* Replacements */\n        new LiteralMap()\n" Replacements

Replacements = ManyReplacements
             | Comment Replacements
             | Replacement

ManyReplacements = Replacement "\n" Replacements
hugs: Replacement ",\n" Replacements

# Note that use of + and * make it harder to place things *inbetween* the
# elements during output (list join), so the above hugs output cannot currently
# be easily reproduced with + or * as in the new rule below!
# Really?  Doesn't the "\n" just get output again literally?

# Replacements = ( Replacement "\n" )+
# Replacements = Replacement ( "\n" Replacement )+ | ""

Replacement = <target/"<>\n!qt! :"> ": " ReplacementDefn
java: "    rule=new Vector<Type>();\n" ReplacementDefn "    ruleset.replacements.put(!qt!" <target> "!qt!,rule);\n"
hugs: "      ( !qt!" <target> "!qt! , [ " ReplacementDefn " ] ) "
javadecl: "        .with(!qt!" <target> "!qt!, Arrays.asList(" ReplacementDefn "))\n"

# The only difference between a RuleSet and a Defn is how we output it.
RuleSet = Defn
javadecl: "Arrays.asList(\n        " Defn "\n      )"

Defn = DefnOr

## We had to split DefnAnd and DefnOr into chains, so we can output separated by commas.
## TODO: A convenience way to do this to any RepeatElement e.g. (A B)+ is desirable!  At the moment we don't even have any way to refer to a matched list.  Perhaps $* iff the whole rule is one list...?  :f  Perhaps ReplacementArgs $1 $2 could refer to items in the rule not in the match?  Mmm there's really no difference.  :P  So we *can* refer to a list with $n?  So our goal is ... $3.join(", ") or join($3,", ") ?  Somehow I prefer the former; we can throw a "method join not found" error rather than "wrong args for join call".
## Now DefnAnd and DefnOr can both return a single DefnBit, it is not a special case.  (DefnOr can return a single DefnAnd.)
#     | DefnAnd
#     | DefnBit

# DefnOr = DefnBit OWS "|" OWS Defn
# java: DefnBit "      ruleset.add(rule);\n      rule=new Vector<Type>();\n" Defn
# hugs: DefnBit "] ,\n      [ " Defn
# pojo: DefnBit "  }\n  class AnotherImplementation {\n" Defn

DefnOr = DefnAnd DefnOrMaybeMore
javadecl: "Arrays.asList( new Type[]{ " DefnAnd " } )" DefnOrMaybeMore
# Java requires us to be specific about the array types here.

DefnOrMaybeMore = DefnOrMore | ""

DefnOrMore = OWS "|" OWS DefnOr
java: "      ruleset.add(rule);\n      rule=new Vector<Type>();\n" DefnOr
hugs: "] ,\n      [ " DefnOr
pojo: "  }\n  class AnotherImplementation {\n" DefnOr
javadecl: ",\n      " DefnOr

# DefnAnd = DefnBit " "+ Defn
# java: DefnBit Defn
# hugs: DefnBit ", " Defn
# javadecl: ", " DefnAnd
DefnAnd = DefnBit MaybeMore
# javadecl: "Arrays.asList( new Type[]{ " DefnBit MaybeMore " } )"
# Java requires us to be specific about the array types here.

MaybeMore = MoreAnd | ""

MoreAnd = " "+ DefnAnd
Java: DefnAnd
hugs: ", " DefnAnd
javadecl: ", " DefnAnd

# ReplacementElement is only used for output/replacement lines, not the rule definition.
# However at the moment we have included it in DefnBit.
# Perhaps we should create DefnBit and OutDefnBit, the latter containing those
# few extra rules which can only be used for outputs.
# Yes we should.

# Efficient
# DefnBit = BasicElement OptRepeatMarker

# Inefficient but atomic output
DefnBit = RepeatedElement
        | BasicElement

# Would-be best-of-both but not yet supported
# DefnBit = BasicElement OptRepeatMarker

BasicElement = VarAccept
             | VarDeny
             | Text
             | GroupElement
             | MagicSymbol
             | AtomRef
             | Regexp
             | OptionalElement

# ReplacementDefn = (OptSpc ReplacementElement OptSpc)*
ReplacementDefn = OptSpc ReplacementElement OptSpc ReplacementElementMaybeMore

ReplacementElementMaybeMore = OptSpc ReplacementElementMore | ""

ReplacementElementMore = ReplacementDefn
javadecl: ", " ReplacementDefn

ReplacementElement = ArgReplacement
                   | RelativeElement
                   | ActiveReplacement
                   | VarRef
                   | Text
                   | AtomRef

# CONSIDER: Could we put = BasicElement RepeatMarker | ... at the top?
# No, again that's inf recursive.  But we could try:
# BasicElement = BasicElement2 RepeatMarker | BasicElement2

# If the magic token is reached, none of later options in a DefnBit will be attempted.
# In other words, ! commits us to the current line, or failure.
# Prolog has something similar called "cut", but that prevents backtracking to
# the left of it, whilst allowing re-attempts on elements to its right.

# Prolog's cut affects search strategy (excluding some parts of the tree), but
# my current concern is in producing parse errors as opposed to parse failures.
# The difference sounds like we need to "commit" to a rule, say "if we get here
# then we must not fail".

MagicSymbol = MagicTokenOfDoom | "%" | "$" | MagicTokenOfCommitment
# Don't put "#" here - it may eat through comments!

MagicTokenOfDoom = "!"

# Token "." or ";" could mean "definite".  If reached, it indicates everything
# before it has been parsed correctly, and there should be no alternative to
# what has been parsed.  If the parser then decides to reject this match, i.e.
# fall back and try something else earlier, the symbol can cause an exit with
# an error.  This would be difficult to use correctly on low-level elements,
# but should be possible on the top layer.

# This can make things more efficient, by allowing us to exclude searches that
# we know are invalid.
# But should it be a full commit?  I.e.:
#   1) If rest of arguments fail, fall back out and try next in parent.
#   2) If rest of arguments fail, report error and stop parsing!

# Alternatively, "=!" could mean "=" but if a match is found, it should never
# be un-done!  It is simpler but knows only itself, not the context in which it
# was included.

# I can envisage another token which might be useful.  Let's call it % for now.
# It can be used to mark a force-fail match, e.g. in the following
#   cat = % Dog
#       | BlackCat | WhiteCat | GreyCat | OtherCat
# % Dog means drop out immediately with failure if we match a Dog.  It can be
# used a an heuristic in some situations, where we expect a Dog is much more
# likely, so generally more efficient to check that than to check all the cats
# first.

# Perhaps ! should be renamed . so % can be renamed ! (since it basically means "not").

# OK I'm calling our parse-error hinter MagicTokenOfCommitment

MagicTokenOfCommitment = ";"

GroupElement = "(" OWS RuleSet OWS ")"
java: "        rule.add( new GroupedDefn((RuleSet) new Runner(){ Object run(){\n          RuleSet ruleset = new RuleSet(!qt!Anonymous!qt!);\n        Vector<Type> rule = new Vector<Type>();\n" Defn "        ruleset.add(rule);\n          return ruleset;\n        } }.run() ) );\n"
javadecl: "new GroupedDefn((RuleSet) new Runner(){ Object run(){\n          return new RuleSet(!qt!Anonymous!qt!, " RuleSet ");\n        } }.run() )"

RepeatedElement = BasicElement RepeatMarker
java: BasicElement "        rule.set(rule.size()-1, new RepeatedRule((Type)rule.lastElement(),!qt!" RepeatMarker "!qt!));\n"
javadecl: "new RepeatedRule(" BasicElement ",!qt!" RepeatMarker "!qt!)"

OptionalElement = "[" OWS Defn OWS "]"
java: Defn "        rule.set(rule.size()-1, new RepeatedRule((Type)rule.lastElement(),0,1));\n"
# java: "        rule.add(new RepeatedRule(" Defn ",0,1));\n"
javadecl: "new RepeatedRule(" Defn ",0,1))"

RepeatMarker = ZeroOrMore | OneOrMore

OptRepeatMarker = RepeatMarkerOld | ""

RepeatMarkerOld = RepeatMarker2
java: "        rule.set(rule.size()-1, new RepeatedRule((Type)rule.lastElement(),!qt!" RepeatMarker2 "!qt!));\n"

RepeatMarker2 = ZeroOrMore | OneOrMore

ZeroOrMore = "*"
java: "*"
# javaB: 0,-1

OneOrMore = "+"
java: "+"
# javaB: 1,-1

## I am not sure whether to include ZeroOrOne in the grammar, since
## OptionalElement already performs this function.
## E.g. [X] achieves what X? would.
# ZeroOrOne = "?"
# java: "?"
# javaB: 0,1

# javaB: unused example of passing min and max rather than symbols

# I think Var is a VarReference - cannot be used for parsing (no terminal
# condition!) but is used in replacements.

VarRef = "<" <varname/"<>\n!qt!/ ~"> ">"
java: "        rule.add(new Var(!qt!" <varname> "!qt!));\n"
hugs: "Var !qt!" <varname> "!qt!"
pojo: "    String " <varname> ";\n"
javadecl: "new Var(!qt!" <varname> "!qt!)"

VarDeny = "<" <varname/"<>\n!qt!/ ~"> "/!qt!" <denied/"!qt!"> "!qt!>"
java: "        rule.add(new Var(!qt!" <varname> "!qt!,!qt!" <denied> "!qt!));\n"
hugs: "VarExcl !qt!" <varname> "!qt! !qt!" <denied> "!qt!"
pojo: "    String " <varname> ";\n"
javadecl: "new Var(!qt!" <varname> "!qt!,!qt!" <denied> "!qt!)"

VarAccept = "<" <varname/"<>\n!qt!/ ~"> "~!qt!" <accepted/"!qt!"> "!qt!>"
java: "        rule.add(new Var(!qt!" <varname> "!qt!,null,!qt!" <accepted> "!qt!));\n"
hugs: "VarIncl !qt!" <varname> "!qt! !qt!" <denied> "!qt!"
pojo: "    String " <varname> ";\n"
javadecl: "new Var(!qt!" <varname> "!qt!,null,!qt!" <accepted> "!qt!)"

AtomRef = AtomName
java: "        rule.add(new Atom(!qt!" AtomName "!qt!));\n"
hugs: "Atom !qt!" AtomName "!qt!"
pojo: "    " AtomName " arg1;\n"
javadecl: "new Atom(!qt!" AtomName "!qt!)"

# pojo: "  /* Possible " <atomtype> " */\n"

# CONSIDER: To avoid this stupid !qt! marker, we could ensure \" is interpreted
# by the Text reader.
#
# We could also offer TextApos, which would be a '...' string instead of "..."
#
# Note that TextApos would need a different reader setup (if we adopt the same
# as JS and sh, that "s can exist inside a '...' but we then must escape \')
#
# Introduction of '...' seems unneccessary, and could be saved for something
# special!  But replacement of !qt! with \" seems desirable.

Text = "!qt!" <text/"!qt!"> "!qt!"
     | "!qt!!qt!"
java: "        rule.add(new Text(!qt!" <text> "!qt!));\n"
hugs: "Str !qt!" <text> "!qt!"
pojo: "    /* Matched: !qt!" <text> "!qt! */\n"
javadecl: "new Text(!qt!" <text> "!qt!)"



NL = "\r\n" | "\n"

# HorizSpace = " " | "\t"
HorizSpace = <horizspace~" \t">

OptHorizSpace = HorizSpace | ""

OptSpc = SpcBit OptSpc
       | ""

SpcBit = " " | "\t"

WhitespaceBit = "\n" | " " | "\t" | "\r"

# Whitespace = WhitespaceBit Whitespace
#            | WhitespaceBit

# Whitespace = WhitespaceBit+
Whitespace = <whitespace~" \n\t\r">

# Optional whitespace:

# OWS = Whitespace
#     | ""

OWS = WhitespaceBit*



# == Experimental Stuff ==

# This is used in c.grm.  It allows for more complex output, but calling the
# code inside `...`s with the match Object available as a local field.

ActiveReplacement = "`" <java/"`"> "`"
java: "      rule.add( new ActiveReplacement() { public String replace(OutputContext ctx) { " <java> " } } );\n"
javadecl: "new ActiveReplacement() { public String replace(OutputContext ctx) { " <java> " } }"

# RelativeElement is a way to access variables in parent/child types.
# ^SearchUp->SearchDown.DirectDown

RelativeElement = RelUp
                | RelDown

RelUp = Ref "^" ReplacementElement
java: "        { Vector realrule=rule; rule=new Vector<Type>(); " BasicElement " realrule.add(new RelElement('^'," Ref ",(Type)rule.get(0))); rule=realrule; }\n"
javadecl: "{ return new RelElement('^'," Ref "," ReplacementElement "); }"

RelDown = Ref "." ReplacementElement
java: "        { Vector realrule=rule; rule=new Vector<Type>(); " BasicElement " realrule.add(new RelElement('.'," Ref ",(Type)rule.get(0))); rule=realrule; }\n"
javadecl: "{ return new RelElement('.'," Ref "," ReplacementElement "); }"

Ref = <ref/" !qt!\n.^">
java: "!qt!" <ref> "!qt!"
javadecl: "!qt!" <ref> "!qt!"

ArgReplacement = "$" <num~"0123456789_">
java: "        rule.add( new ArgReplacement(" <num> ") );\n"
javadecl: "new ArgReplacement(" <num> ")"



# Untested...

# TODO: Gah presumably we need to escape any "s in the output of RegexpBody
Regexp = "/" RegexpBody "/"
java: "new Regexp(!qt!" RegexpBody "!qt!)"
javadecl: "new Regexp(!qt!" RegexpBody "!qt!)"

RegexpBody = RegexpBit RegexpBody
           | ""

RegexpBit = "\\" AnyOneChar RegexpBit
          | "[" RegexpCharBlock "]" RegexpBit
          | <regexpbit/"\\/[\n"> RegexpBit
          | ""

RegexpCharBlock = "\\" AnyOneChar RegexpCharBlock
                | <regexpcharblock/"]\n"> RegexpCharBlock
                | ""


DummyTestRule = ( DummyTestContents )

