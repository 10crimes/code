# This grammar defines the file format for a grammar.
# It can be used to parse .grm files.
#
# Export targets:
#
#   java - output the grammar as a Java RuleSet builder class for Parser.java
#
#   hugs - output the grammar in Haskell, for import by hwi.ath.cx's parser.hs
#
#   pojo (experimental and fugly) - create a set of bean-like classes to hold grammar atoms in Java
#

# TODO:
#
#   Allow easier definition of repeat and optional elements with + * and [ ... ]
#   We could also create more advanced rules with e.g. ( ... ) | ...
#
#   The Var type is not very powerful.  An anonymous regexp match might be
#   preferable.  e.g. /[$@_a-zA-Z][$@_a-zA-Z0-9]*/
#
#
# CONSIDER:
#
#   Allow Comments without blank lines (inbetween other Atoms / almost anywhere)

# SIGNIFICANT CHANGES:
#
#    2012-03-16 Exclude Vars now *fail* if 0 chars are matched.  Rules which
#    previously found 0-length matches acceptable should be updated to accept
#    them explicitly.
#
#    2012-03-15 Introduced Include Vars (VarAccept).
#

Main = GrammarDefn

# java: "package grammars;\n\n" GrammarDefn

GrammarDefn = Grm
java: "package tools.parser;\n\nimport java.lang.String;\nimport java.util.Vector;\n\nimport tools.parser.*;\n\npublic class grmGrm {\n  public static void setupgrammar() {\n    Vector rulesets=Grammar.rulesets;\n    RuleSet ruleset;\n    Vector<Type> rule;\n\n" Grm "  }\n}\n"
hugs: "module Grammar where\n\ndata Type = Atom String | Var String | Str String\n          | VarExcl String String\n  deriving (Eq)\n\ndata Match = No | Yes Type String [Match] String\n  deriving (Eq)\n\ntype RuleSet = [[Type]]\n\ntype Rule = ( Type , RuleSet , [Replacement] )\n\ntype Replacement = ( String , [Type])\n\n\nrules = [ " Grm " ]\n"

Grm = GrmBit Grm
    | GrmBit

GrmBit = Whitespace
       | Comment
       | AtomDef

Comment = "#" <comment/"\n"> "\n"
        | "#\n"
java: "    //" <comment> "\n"
pojo: "    //" <comment> "\n"

OptComment = Comment | ""

# hugs: "-- " <comment> "\n"

NL = "\n"

OptSpc = SpcBit OptSpc
       | ""

SpcBit = " " | "\t"

# Note that two AtomDefs without an empty line between them will not parse!

AtomDef = <atomname/"^.<>\n!qt! ="> " = " Defn OptReplacements NL
java: "    ruleset=new RuleSet(!qt!" <atomname> "!qt!);\n      rulesets.add(ruleset);\n      rule=new Vector<Type>();\n" Defn "      ruleset.add(rule);\n" OptReplacements "\n"
hugs: "  ( Atom !qt!" <atomname> "!qt!,[\n    [ " Defn " ]\n    ] , [\n" OptReplacements "\n  ] ) ,\n"
pojo: "interface " <atomname> " {\n\n}\n  class AnImplmentation {\n" Defn "  }\n\n"

# Replacements are the lines defining export targets: java, hugs, pojo

OptReplacements = "\n" Replacements
                | ""
java: "    // Replacements\n" Replacements

Replacements = ManyReplacements
             | Replacement

# Replacements = Replacement+

ManyReplacements = Replacement "\n" Replacements
hugs: Replacement ",\n" Replacements

Replacement = <target/"<>\n!qt! :"> ": " Defn
java: "    rule=new Vector<Type>();\n" Defn "    ruleset.replacements.put(!qt!" <target> "!qt!,rule);\n"
hugs: "      ( !qt!" <target> "!qt! , [ " Defn " ] ) "

Defn = DefnOr
     | DefnAnd
     | DefnBit

DefnBit = RelativeElement
        | BasicElement OptRepeatMarker

BasicElement = Variable
             | ActiveReplacement
             | Text
             | AtomRef
             | Regexp
             | GroupedDefnBits
             | OptionalElement
             | RepeatElement
             | MagicTokenOfDoom

# This might be called "exclusion" in Prolog.  *yawn*
# If the magic token is reached, none of later options in a DefnBit will be attempted.
# In other words, ! commits us to the current line, or failure.

MagicTokenOfDoom = "!"

# This can make things more efficient, by allowing us to exclude searches that
# we know are invalid.
# But should it be a full commit?  I.e.:
#   1) If rest of arguments fail, fall back out and try next in parent.
#   2) If rest of arguments fail, report error and stop parsing!

GroupedDefnBits = "(" OWS DefnBit OWS ")"
java: "        rule.add( new GroupedDefn((Vector<Type>) new Runner(){ Object run(){\n      Vector<Type> rule = new Vector<Type>();\n" DefnBit "        return rule;\n        } }.run() ) );\n"

OptionalElement = "[" OWS DefnBit OWS "]"

OptRepeatMarker = OptRepeatMarker2 | ""

OptRepeatMarker2 = OptRepeatMarker3
java: "        rule.set(rule.size()-1, new RepeatedRule((Type)rule.lastElement(),!qt!" OptRepeatMarker3 "!qt!));\n"

OptRepeatMarker3 = ZeroOrMore | OneOrMore

ZeroOrMore = "*"
java: "*"

OneOrMore = "+"
java: "+"

# Too recursive I suspect:
#RepeatElement = DefnBit "*"
RepeatElement = "not likely govna"
# Since RepeatElement was hard to define, I made repeats a part of
# OptionalElement.  Perhaps the sensible way to Parse 

DefnOr = DefnBit Whitespace "|" Whitespace Defn
java: DefnBit "      ruleset.add(rule);\n      rule=new Vector<Type>();\n" Defn
hugs: DefnBit "] ,\n      [ " Defn
pojo: DefnBit "  }\n  class AnotherImplementation {\n" Defn

DefnAnd = DefnBit " " Defn
java: DefnBit Defn
hugs: DefnBit ", " Defn

Variable = Var
         | VarDeny
         | VarAccept

Var = "<" <varname/"<>\n!qt!/ "> ">"
java: "        rule.add(new Var(!qt!" <varname> "!qt!));\n"
hugs: "Var !qt!" <varname> "!qt!"
pojo: "    String " <varname> ";\n"

VarDeny = "<" <varname/"<>\n!qt!/ ~"> "/!qt!" <denied/"!qt!"> "!qt!>"
java: "        rule.add(new Var(!qt!" <varname> "!qt!,!qt!" <denied> "!qt!));\n"
hugs: "VarExcl !qt!" <varname> "!qt! !qt!" <denied> "!qt!"
pojo: "    String " <varname> ";\n"

VarAccept = "<" <varname/"<>\n!qt!/ ~"> "~!qt!" <accepted/"!qt!"> "!qt!>"
java: "        rule.add(new Var(!qt!" <varname> "!qt!,null,!qt!" <accepted> "!qt!));\n"
hugs: "VarIncl !qt!" <varname> "!qt! !qt!" <denied> "!qt!"
pojo: "    String " <varname> ";\n"

AtomRef = <atomtype/"^.<>\n!qt! +*">
java: "        rule.add(new Atom(!qt!" <atomtype> "!qt!));\n"
hugs: "Atom !qt!" <atomtype> "!qt!"
pojo: "    " <atomtype> " arg1;\n"

# pojo: "  /* Possible " <atomtype> " */\n"

Text = "!qt!" <text/"!qt!"> "!qt!"
     | "!qt!!qt!"
java: "        rule.add(new Text(!qt!" <text> "!qt!));\n"
hugs: "Str !qt!" <text> "!qt!"
pojo: "    /* Matched: !qt!" <text> "!qt! */\n"

WhitespaceBit = "\n" | " " | "\t" | "\r"

# Whitespace = WhitespaceBit Whitespace
#            | WhitespaceBit

Whitespace = WhitespaceBit+

# Optional whitespace:

# OWS = Whitespace
#     | ""

OWS = WhitespaceBit*



# == Experimental Stuff ==

# This is used in c.grm.  It allows for more complex output, but calling the
# code inside `...`s with the match Object available as a local field.

ActiveReplacement = "`" <java/"`"> "`"
java: "      rule.add( new ActiveReplacement() { public String replace() { " <java> " } } );\n"

# I think RelativeElement might be a dodgy way to access variables in parent/child types.
# ^SearchUp->SearchDown.DirectDown

RelativeElement = RelUp
                | RelDown

RelUp = Ref "^" BasicElement
java: "        { Vector realrule=rule; rule=new Vector<Type>(); " BasicElement " realrule.add(new RelElement('^'," Ref ",(Type)rule.get(0))); rule=realrule; }\n"

RelDown = Ref "." BasicElement
java: "        { Vector realrule=rule; rule=new Vector<Type>(); " BasicElement " realrule.add(new RelElement('.'," Ref ",(Type)rule.get(0))); rule=realrule; }\n"

Ref = <ref/" !qt!\n.^">
java: "!qt!" <ref> "!qt!"



# Untested...

# TODO: Gah presumably we need to escape any "s in the output of RegexpBody
Regexp = "/" RegexpBody "/"
java: "new Regexp(!qt!" RegexpBody "!qt!)"

RegexpBody = RegexpBit RegexpBody
           | ""

RegexpBit = "\\" AnyOneChar RegexpBit
          | "[" RegexpCharBlock "]" RegexpBit
          | <regexpbit/"\\/[\n"> RegexpBit
          | ""

RegexpCharBlock = "\\" AnyOneChar RegexpCharBlock
                | <regexpcharblock/"]\n"> RegexpCharBlock
                | ""


