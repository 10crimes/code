# DATA_DIR="$HOME/eventarr/data"
# DATA_DIR="/home/utquery/eventarr/data"
DATA_DIR="`dirname "$0"`"/data

CATEGORY="ut"

# echo "Vars:"
# echolines "$@"

##

# [ "$USERNAME" ] || USERNAME="$USER"
[ "$USERNAME" ] || USERNAME="$NICK"
# [ "$USERNAME" ] || USERNAME="Anonymous"

## Timezone is for *input*:
# [ "$INPUT_TIMEZONE" ] || INPUT_TIMEZONE="CEST"
## TZ if for *output*:
# [ "$TZ" ] || export TZ=CEST
# [ "$TZ" ] || export TZ=CEST
[ "$OUTPUT_TIMEZONE" ] || export OUTPUT_TIMEZONE=CET

EVENTS_DIR="$DATA_DIR/$CATEGORY"

ME=`realpath "$0"`

## IRC:

output_confirm () {
	echo "$COLGREEN""$*""$COLRESET"
}

output_help () {
	echo "$COLBROWN""$*""$COLRESET"
}

output_error () {
	echo "$COLRED$COLBOLD""$*""$COLRESET"
}

##

errorexit () {
	echo "Cannot process: $*"
	exit 1
}

geteventdir () {
	[ "$EVENTNUM" ] || errorexit "no event number"
	EVENTDIR="$EVENTS_DIR/$EVENTNUM"
	[ "$1" = -check ] && [ ! -d "$EVENTDIR" ] && errorexit "event number $EVENTNUM does not exist"
}

getdatedir () {
	[ "$DATENUM" ] || errorexit "no date number"
	DATEDIR="$EVENTDIR/$DATENUM"
	[ "$1" = -check ] && [ ! -d "$DATEDIR" ] && errorexit "date number $DATENUM does not exist"
}

lastnumin () {
	find "$1" -maxdepth 1 -type d -printf "%f\n" | drop 1 | sort -n | tail -1
}

getstoragedate () {
	# TZ=GMT date -d "2005/09/04 03:02:00 CET"
	# UNIVERSALDATE=`TZ=GMT date -d "$INPUTDATE $INPUT_TIMEZONE" +"%s"`
	# UNIVERSALDATE=`date -d "$INPUTDATE $INPUT_TIMEZONE"`
	UNIVERSALDATE=`date -d "$INPUTDATE"`
}

getnicedatefromstoragedate () {
	STORAGEDATE="$1"
	# DATESTRING="1 January 1970 GMT + $SECONDS seconds"
	## Old backwards-compatbility; no longer needed.
	# if echo "$STORAGEDATE" | grep "^[[:digit:]]*$" >/dev/null
	# then DATESTRING="1 January 1970 + $STORAGEDATE seconds"
	# else DATESTRING="$STORAGEDATE"
	# fi
	DATESTRING="$STORAGEDATE"
	DATEDIFFSECS=`datediff -secs -eng now "$DATESTRING"`
	if [ "$DATEDIFFSECS" -lt 0 ]
	then
		# NICEDATE="Took place on "`TZ="$OUTPUT_TIMEZONE" date -d "$DATESTRING" +"%a %e %b %H:%M %Z"`
		NICEDATE="Was on "`TZ="$OUTPUT_TIMEZONE" date -d "$DATESTRING" +"%a %e %b %H:%M %Z"`
	# elif [ "$DATEDIFFSECS" -lt 86400 ] ## 24 hours
	elif [ "$DATEDIFFSECS" -lt 57600 ] ## 16 hours
	# elif [ "$DATEDIFFSECS" -lt 14400 ] ## 4 hours
	then
		# NICEDATE="In "`datediff -eng now "$DATESTRING"`"!"
		TIMEUNTIL=`
			datediff -eng now "$DATESTRING" |
			sed 's+\([^ ]*\) *minutes and .* seconds+\1 minutes+' | ## remove seconds
			sed 's+\([^ ]*\) *hours, \([^ ]*\) minutes+\1 hours, and \2 minutes+' ## add and
		`
		TIMETODAY=`TZ="$OUTPUT_TIMEZONE" date -d "$DATESTRING" +"%H:%M %Z"`
		NICEDATE="In $TIMEUNTIL! ($TIMETODAY)"
	else
		# NICEDATE="On "`date -d "$DATESTRING"`
		# NICEDATE="On "`date -d "$DATESTRING" +"%a %b %e %H:%M:%S %Z %Y"`
		NICEDATE="On "`TZ="$OUTPUT_TIMEZONE" date -d "$DATESTRING" +"%a %e %b %H:%M %Z"`
	fi
}

COMMAND="$1"
shift

case "$COMMAND" in

	newevent)
		NAME="$1"
		# LASTEVENT=`find "$EVENTS_DIR" -maxdepth 1 -type d | afterfirst "$EVENTS_DIR/" | tail -1`
		LASTEVENT=`lastnumin "$EVENTS_DIR"`
		EVENTNUM="$((LASTEVENT+1))"
		geteventdir
		mkdir -p "$EVENTDIR"
		printf "%s" "$NAME" > "$EVENTDIR"/name.txt
		echo "$USERNAME" > "$EVENTDIR"/user.txt
		output_confirm "Created new event number $EVENTNUM"
	;;

	adddate)
		EVENTNUM="$1"
		INPUTDATE="$2"
		[ "$3" ] && INPUT_TIMEZONE="$3"
		geteventdir -check
		LASTDATE=`lastnumin "$EVENTDIR"`
		DATENUM="$((LASTDATE+1))"
		getdatedir
		if getstoragedate 2>/dev/null
		# echo "$?"
		# if [ "$UNIVERSALDATE" ]
		then
			mkdir -p "$DATEDIR"
			echo "$USERNAME" > "$DATEDIR"/user.txt
			echo "$UNIVERSALDATE" > "$DATEDIR"/date.txt
			# echo "Added new date number $DATENUM"
			output_help "If the date is wrong, remove it with: !deltime $EVENTNUM $DATENUM"
		else
			output_error "Sorry, I couldn't parse date \"$INPUTDATE\"."
		fi
	;;

	listevents)
		cd "$EVENTS_DIR"
		for EVENTNUM in *
		do "$ME" showevent "$EVENTNUM"
		done
	;;

	showevent)
		EVENTNUM="$1"
		geteventdir -check
		NAME=`cat "$EVENTDIR"/name.txt`
		USERNAME=`cat "$EVENTDIR"/user.txt`
		# echo "$EVENTNUM) $NAME [$USERNAME]"
		if [ -e "$EVENTDIR"/finalised.date ]
		then
			DATEDIR="$EVENTDIR"/finalised.date
			STORAGEDATE=`cat "$DATEDIR"/date.txt`
			getnicedatefromstoragedate "$STORAGEDATE"
			# echo "=[$EVENTNUM]= $COLGREEN$COLBOLD$NAME $COLBLUE>> $NICEDATE$COLRESET <<"
			# echo "=[$EVENTNUM]= $COLGREEN$COLBOLD$NAME $COLBLUE>> $NICEDATE <<$COLRESET"
			echo "=[$EVENTNUM]= $COLGREEN$NAME $COLBLUE>> $NICEDATE <<$COLRESET"
		else
			echo "~($EVENTNUM)~ $COLORANGE$NAME $COLBLUE~~ time undecided ~~$COLRESET"
			# echo "~($EVENTNUM)~ $COLYELLOW$NAME $COLRED~~ time undecided ~~$COLRESET"
			# "$ME" listdates "$EVENTNUM" | sed 's+^+  +'
		fi
	;;

	listdates)
		EVENTNUM="$1"
		geteventdir -check
		if [ ! -e "$EVENTDIR"/finalised.date ]
		then
			# find "$EVENTDIR/" -type d -maxdepth 1 -printf "%f\n" |
			DATES=` find "$EVENTDIR"/* -type d -maxdepth 1 -printf "%f\n" `
			if [ ! "$DATES" ]
			then
				echo "  No date/time yet suggested for this event."
			else
				echo "  Suggested times for this event:"
				for DATENUM in $DATES
				do
					# jshinfo "DATENUM=$DATENUM"
					# SECONDS=`echo "$DATENUM" | sed 's+/$++'`
					"$ME" listdate "$EVENTNUM" "$DATENUM"
				done
			fi
		else
			echo "  Date+time for this event will be:"
			"$ME" listdate "$EVENTNUM" "finalised.date"
		fi
	;;

	listdate)
		EVENTNUM="$1"
		DATENUM="$2"
		geteventdir -check
		getdatedir -check
		STORAGEDATE=`cat "$DATEDIR"/date.txt`
		USERNAME=`cat "$DATEDIR"/user.txt`
		# NICEDATE=`getnicedatefromstoragedate "$STORAGEDATE"`
		getnicedatefromstoragedate "$STORAGEDATE"
		# echo "$DATENUM) $NICEDATE [$USERNAME]"
		echo "    >($DATENUM)< $COLBLUE$NICEDATE$COLRESET"
		# echo "    >($DATENUM)< $COLBLUE$NICEDATE $COLGREY($COLRED$USERNAME$COLGREY)$COLRESET"
		# echo "    >($DATENUM)< $COLBLUE$NICEDATE $COLGREY($USERNAME)$COLRESET"
		# echo "  $EVENTNUM-$DATENUM) $NICEDATE"
		SUBSCRIPTION_FILE="$DATEDIR"/subscribed.txt
		if [ -f "$SUBSCRIPTION_FILE" ]
		then
			SUBSCRIBED_NUM=`cat "$SUBSCRIPTION_FILE" | wc -l `
			SUBSCRIBED_LIST=`
				cat "$SUBSCRIPTION_FILE" |
				# sed 's+$+, +' | tr -d '\n' | sed 's+, $++'
				sed "s+^+$COLRED+ ; s+$+$COLGREY, +" | tr -d '\n' | sed 's+, $++'
			`
			# echo "       popularity=$SUBSCRIBED_NUM: $COLGREY[ $SUBSCRIBED_LIST$COLGREY ]$COLRESET"
			# echo "       $COLGREY""Popularity = $SUBSCRIBED_NUM : $COLGREY[ $SUBSCRIBED_LIST$COLGREY ]$COLRESET"
			# echo "       $COLGREY""popularity=$COLYELLOW$SUBSCRIBED_NUM$COLGREY: [ $SUBSCRIBED_LIST$COLGREY ]$COLRESET"
			echo "       $COLGREY""Popularity = $SUBSCRIBED_NUM : $SUBSCRIBED_LIST$COLRESET"
		fi
	;;

	deldate)
		EVENTNUM="$1"
		DATENUM="$2"
		geteventdir -check
		getdatedir -check
		## Disabled user checking for now.
		# ORIGINALUSERNAME=`cat "$DATEDIR"/user.txt`
		# if [ ! "$ORIGINALUSERNAME" = "$USERNAME" ]
		# then
			# errorexit "Only $ORIGINALUSERNAME can delete this date."
		# else
			del "$DATEDIR" || rm -rf "$DATEDIR" ## del was causing trouble cos owners of dirs differ
			# echo "$COLBROWN""I have deleted that date.""$COLRESET"
			output_confirm "I have deleted that date.""$COLRESET"
		# fi
	;;

	subscribe)
		EVENTNUM="$1"
		DATENUM="$2"
		geteventdir -check
		getdatedir -check
		SUBSCRIPTION_FILE="$DATEDIR"/subscribed.txt
		REGEXP=`toregexp "$USERNAME"`
		(
			if [ -f "$SUBSCRIPTION_FILE" ]
			then cat "$SUBSCRIPTION_FILE" | grep -v "$REGEXP"
			fi
			echo "$USERNAME"
		) | dog "$SUBSCRIPTION_FILE"
	;;

	finalise)
		EVENTNUM="$1"
		DATENUM="$2"
		geteventdir -check
		getdatedir -check
		ORIGINALUSERNAME=`cat "$EVENTDIR/user.txt"`
		if [ ! "$ORIGINALUSERNAME" = "$USERNAME" ]
		then
			errorexit "Only $ORIGINALUSERNAME can finalise this event."
		else
			ln -s "$DATEDIR" "$EVENTDIR"/finalised.date
		fi
	;;

	*)
		error "I don't recognise: $COMMAND ($*)"
		exit 1
	;;

esac
