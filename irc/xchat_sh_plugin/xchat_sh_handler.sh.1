export COMMAND_SCRIPTS_DIR="/home/joey/.xchat2/plugin/xchat_sh_scripts"

## TODO: Logs to /tmp

log () {
	# printf "%s\n" "`geekdate -fine` $*" >> /tmp/xchat_sh_handler.log
	printf "%s\n" "`geekdate -fine` $SERVER/$CHANNEL ($NICK) $*" >> /tmp/xchat_sh_handler.log
}

# log "Shell received: $*"
# for ARG
# do log "ARG: $ARG"
# done

COMMAND="$1"
shift

# if [ ! "$COMMAND" = wut ]
# then
	# echo "Sorry I'm playing UT so my scripts are disabled."
	# exit 0
# fi

break_long_lines_but_retain_color () {

	## It seems something cannot handle strings > 250 chars, so...
	# sed "s+\(.\{0,245\}[^ ]\)\(  *\|$\)+\1$NL+g" |
	# sed "s+\(.\{0,245\}[^ ]\)\(  *\)+\1$NL +g" |
	## Moved elsewhere, because it breaks /notices!  That's bad because then they turn into /say!  :S
	# sed "s+\(.\{0,245\}[^ ]\)\(  *\|$\)+\0$NL +g" | grep -v "^ $" |
	# sed "s+^\(/notice [^ ]* \|\)\(.\{0,245\}[^ ]\)\(  *\|$\)+\0$NL\1 +g" | grep -v "^\(notice [^ ]*\|\) $" |
	# sed "s+^\(/notice [^ ]* \|\)\(.\{0,245\}[^ ]\)\(  *\|$\)+\0 ...$NL\1 ... +g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+^\(/notice [^ ]* \|\)\(\(\(\([[:digit:],]\{1,5\}\)\|\).\)\{0,245\}[^ ]\)\(  *\|$\)+\0...$NL\1 >\5<... +g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+^\(/notice [^ ]* \|\)\(\(.\(\([[:digit:],]\{1,5\}\)*\)\)\{0,245\}\)  *+\0...$NL\1 >\5<... +g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+^\(/notice [^ ]* \|\)\(\(.\(\([[:digit:],]\{1,5\}\)*\)\)\{0,245\}\)+\0$NL\1 \5+g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+^\(/notice [^ ]* \|\)\(\(.\(\([[:digit:],]\{1,5\}\)*\)\)\{0,80\}\)  *+\0$NL\1 \5+g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+\(^/notice [^ ]* \|\)\([^]\(\([[:digit:],]\{1,5\}\)*\)\)\{0,40\}  *+\0$NL\1 \4+g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+\(^/notice [^ ]* \|\)\([^]\(\([[:digit:],]\{5\}\)*\)\)\{0,245\}  *+\0$NL\1 \4+g" | grep -v "^\(notice [^ ]*\|\) ... $" |
	# sed "s+\(^/notice [^ ]* \|\)\([^]\(\([[:digit:],]\{5\}\)*\)\)\{0,245\}\(  *\|$\)+\0$NL\1 \4+g" | grep -v "^\(/notice [^ ]* *\([[:digit:],]\{5\}\|\)\) *$" |
	# sed "s+\(^/notice [^ ]* \|\)\([^]\(\([[:digit:],]\{5\}\)*\)\)\{0,245\}\(  *\|$\)+\0$NL\1 \4+g" | grep -v "^\(/notice [^ ]* *\|\)\([[:digit:],]\{5\}\| \)*$" |
	## I think the problem is, it would rather gather the external 40 by stealing .s from the \{1,5\}, than fill the \{1,5\} :s
	## To fix it I assume all my colour codes are exactly 5 in length (BUG TODO NOT TRUE!).
	## OK fixed notices.  NO TODO BUG: only works on first split!!  Could get round this by 1) inserting a special char where a newline is needed; 2) have another sed(?) which splits the stream into newlines at those chars, and adds /notice to them all if needed.  Or maybe that suffers the same problem!!  :S
	## OK catching the last colour, and re-writing it.  :)
	## We have to match the \|$ otherwise it always tries to do a last break on the last space, even if the line is short.
	## But doing the \|$ generates a final *empty* line, so we have to add the grep to remove it.
	# sed "s+\(^/notice [^ ]* \|\)\(\(\([[:digit:],]\{5\}\)*\)[^]\)\{0,245\}\(  *\|$\)+\0$NL\1 \4+g" | grep -v "^\(/notice [^ ]* *\|\)\([[:digit:],]\{5\}\| \)*$" |
	# sed "s+\(\(\([[:digit:],]\{5\}\)*\)[^]\)\{0,245\}\(  *\|$\)+\0$NL \3+g" | grep -v "^\([[:digit:],]\{5\}\| \)*$"
	## For some unknown reason, it was splitting my not-playing !wut response at *every* space!  So...
	sed "s+\(\(\([[:digit:],]\{5\}\)*\)[^]\)\{100,220\}\(  *\|$\)+\0$NL \3+g" | grep -v "^\([[:digit:],]\{5\}\| \)*$"
	## Small bug: each block of colour codes is treated as exactly 1 character; it should probably be 0.
	## BUG: now empty lines (or lines containing just one " ") are stripped, even if they were intended.  :|

}

split_long_lines_retaining_notice () {

	while IFS="" read LINE
	do
		if printf "%s" "$LINE" | grep -i "^/notice" >/dev/null
		then
			NOTICE=`printf "%s" "$LINE" | sed 's+^\([^ ]* *[^ ]* *\).*+\1+'`
			TOBREAK=`printf "%s" "$LINE" | sed 's+^[^ ]* *[^ ]* *++'`
		else
			NOTICE=""
			TOBREAK="$LINE"
		fi
		printf "%s" "$TOBREAK" |
		break_long_lines_but_retain_color |
		while IFS="" read BROKENLINE
		do printf "%s\n" "$NOTICE$BROKENLINE"
		done
	done

}

when_to_abort () {

	CHANNEL=`echo "$CHANNEL" | tolowercase`

	## My filters: testing only responds to whereis, and only testing responds to whereis
	# if startswith "$LASTCMD" xchat-test && [ ! "$COMMAND" = "whereis" ]
	# then exit 0
	# fi
	# if [ "$COMMAND" = "whereis" ] && ! startswith "$LASTCMD" xchat-test
	# then exit 0
	# fi
	## New filter: testing never runs any scripts:
	# if startswith "$LASTCMD" xchat-test || contains "$LASTCMD" ".xchat2.testing"
	# then exit 0
	# fi

	## Avoid collision with W|S's t3h_bot:
	# if [ "$CHANNEL" = "#{W|S}" ]
	if [ "$CHANNEL" = "#}w|s{" ]
	then exit 0
	fi

	if [ "$CHANNEL" = "#ut" ]
	then exit 0
	fi

}

when_to_abort

## Dodgy hack to strip IRC colour-codes off the front of the nick:
# NICK=`echo "$NICK" | striptermchars`
if echo "$NICK" | grep "^" >/dev/null
then NICK=`echo "$NICK" | colrm 1 3`
fi

SCRIPT="$COMMAND_SCRIPTS_DIR/$COMMAND"

NL="\\
"

if [ -f "$SCRIPT" ] && [ -x "$SCRIPT" ]
then
	log "Calling: sh \"$SCRIPT\" \"$*\""


	## Decided this was nicer for the scripts:
	cd "$COMMAND_SCRIPTS_DIR/"

	export NICK
	export CHANNEL

	## nice added for my own convenience ;p
	# nice -n 15 sh "$SCRIPT" $* |
	# nice -n 15 sh "$SCRIPT" "$@" |
	nice -n 17 sh "$SCRIPT" $* |
	# sed "s+'+_+g" |
	# sed "s+^................................................................................+\0$NL+g" |
	# tr -d "'" | ## don't know why this was on
	# tee /tmp/xchat_sh_handler.mid | ## For debugging
	head -100 | ## Dirty hack to reduce danger of accidental flooding!

	split_long_lines_retaining_notice |

	## Unless a / irc command is provided, we just respond with /say:
	## But this is now handled by parent perl plugin.
	# sed 's+^[^/]+/say \0+'

	## If we are in certain channels, then respond with /notice instead of /say.
	## Note this doesn't work if the script returns a /command, only if it returns text to say (or notice).
	if [ "$CHANNEL" = "#ut" ] # || [ "$CHANNEL" = "#test" ] # || [ "$CHANNEL" = "#whereisbot" ]
	then sed "s+^[^/]+/notice $NICK \0+"
	## Doesn't work: "Cannot send to channel"
	# else sed "s+^[^/]+/notice $CHANNEL \0+" ## note CHANNEL actualy == $respond_to i.e. it might be a nick
	else cat
	fi # | tee -a /tmp/xchat_sh_handler.later ## For debugging

else
	log "Ignoring: $COMMAND"
	:
	# echo "No such command: $COMMAND"
fi
