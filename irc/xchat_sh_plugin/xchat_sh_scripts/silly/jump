#!/bin/bash

double_escape_slashes () {
	sed 's+\\+\\\\\\\\+g'
}

# if [ "$NICK" = altgamer ]
# then exit 0
# fi

EXTRA=""
[ "$1" ] && EXTRA=" $*"

VERB="`filename "$0"`"

R="`expr $RANDOM % 100`"


# if [ "$CHANNEL" = "#ctf.pug" ] && ( [ "$HASVOICE" ] || [ "$HASOP" ] ) && [ "$1" ] &&
   # ( [ "$VERB" = kick ] || [ "$VERB" = ban ] ) &&
   # ! echo "$CALLER $NICK" | grep -i "\<\(Rival\|RF\|APug\|[Aa][Bb][Oo0][Tt]\|UT\|utb0t\)\>" >/dev/null
# then
# 
	# ## Good security.  Each person can only get this far every 30 minutes.
	# RESTRICT_EXTRA="$AUTH" . restrict_repetitive_calls "30 minutes"
	# ## Unfortunately this gives a warning message and exits this script, so not even a /me kicks is performed.  Nevermind he's obviously spamming anyway.
# 
	# (
		# target="$1"
		# # echo "/kickban $target By popular demand" ## Currently the Java does nothing with this command
		# # echo "/kick $target By popular demand"
		# echo "/kick $target Requested"
		# if [ "$HASOP" ] || [ "$R" -lt 20 ]
		# then
			# echo "/msg |Flame| DEVOICE #ctf.pug $target"
		# fi
	# ) | double_escape_slashes
	# exit 0
# fi

## In pug channels, the !kick and !ban actions have a small chance of actually doing something!
## NOTE: The sleeps here are ok in new framework, but not good under XChat.
## TODO TBH: It should track which auths call !kick the most, and make them the ones most likely for it to work on. :)
## TODO: If we kick ourself, we might want to kick the other guy too.  Or come back later and get him.
TARGET="$*"
# R="`seq 0 99 | chooserandomline`" 
# jshinfo "[kick] R=$R"
if ( [ "$VERB" = kick ] || [ "$VERB" = ban ] ) &&
   [ "$*" ] && echo "$CHANNEL" | grep "pug" >/dev/null &&
   ## Never kick the really important IRC entities, the bots:
   ! echo "$CALLER $NICK" | grep -i "\<\(Rival\|RF\|APug\|[Aa][Bb][Oo0][Tt]\)\>" >/dev/null &&
   ## Target is not pugged up.  (z-Name or az-Name)
   ! (echo "$TARGET" | grep "^[A-Za-z]\(-\|[A-Za-z]-\)" >/dev/null) &&
   # ! echo "$NICK" | grep -i "deep" >/dev/null &&
   ## Probability 1 in 4
   [ "$R" -lt 25 ]
then

	if [ "$AUTH" = "Deepah" ] && [ "$R" -lt 4 ]
	then
		echo "/kick $NICK not liking germans"
		exit 0
	fi

	function doop () {
		LINE="$1" ; shift
		echo "[silly/$VERB] `date +'%Y-%m-%d-%H:%M:%S'` -- <$NICK> .$VERB $LINE -- Doing: $*" >> ~/.utb0t_silly.log
		echo "[silly/$VERB] `date +'%Y-%m-%d-%H:%M:%S'` -- <$NICK> .$VERB $LINE -- Doing: $*" >&2
		echo "$*"
	}

	## PRIVILEGED is as much curse as blessing - helps u kick but also get kicked!
	# Found it early and did a lot: vader\|nin\|
	# OLDPRIVILEGED="\<\(kgb\|max\|mox\|golyat\|marco\|addy\|MF\|abeo\|piglet\|majinx\|zbe\|liquidfire\)\>"
	PRIVILEGED="\<\(kgb\|wiza\|vader\|UT\|utb0t\|utbot\)\>"

	## Good security.  Each person can only get this far every 5 minutes.
	RESTRICT_EXTRA="$NICK" . restrict_repetitive_calls "5 minutes"
	## Unfortunately this gives a warning message and exits this script, so not even a /me kicks is performed.  Nevermind he's obviously spamming anyway.

	## If ban and both are privileged, 1 in 8 kick both.
	if [ "$R" -lt 12 ] &&
	   [ "$VERB" = ban ] &&
	   echo "$TARGET" | grep "$PRIVILEGED" >/dev/null &&
	   echo "$NICK" | grep "$PRIVILEGED" >/dev/null
	then
		# doop "$*" "/kickban $TARGET"
		doop "$*" "/kick $TARGET"
		## 1 in 3 kick caller!
		if [ "$R" -lt 9 ]
		then
			# doop "$*" "/kickban $NICK"
			doop "$*" "/kick $NICK"
		fi
		exit 0
	fi

	## 1 in 8 if one is privileged, or 1 in 10 otherwise.
	if [ $R -lt 13 ]
	then
		if echo "$NICK $TARGET" | grep "$PRIVILEGED" >/dev/null || [ $R -lt 10 ]
		then
			doop "$*" "/kick $TARGET"
			sleep 15
			if [ $R -lt 7 ] ## 50%/70% of these will also kick caller!
			then doop "$*" "/kick $NICK"
			fi
			exit 0
		fi
	fi

	## If we didn't kick or ban anyone, we go on to emote the kick/ban like
	## a normal silly script.

fi


NEEDE="`echo "$VERB" | grep "[sh]$"`"
if [ "$NEEDE" ]
then NEEDE=e
fi

echo "/me $VERB$NEEDE"s"$EXTRA!"

