PUGBOTDIR="$HOME/.pugbot" ; mkdir -p "$PUGBOTDIR"

# DONE: !vote and !randcapt, but no !setcapt

# ## DONE: instead of this, make commands !startpugging and !endpugging (or !enablepugbot and !disablepugbot)
# if [ "$CHANNEL" != "#noobpug" ] || [ "$NETWORK" = quakenet.org ]
# then exit 0
# fi

## DO_MAP_POOL became [ -f "$MAP_POOL_FILE" ]
MAX_POOL_SIZE=20

PUG_CHANNELS_FILE="$PUGBOTDIR"/pug_channels@"$NETWORK".list
CHANNELREGEXP=`toregexp "$CHANNEL"`

[ -f "$PUG_CHANNELS_FILE" ] || touch "$PUG_CHANNELS_FILE" ## to avoid an error if the file does not yet exist

## Do we allow this command to be run?

## Had a bug of spamming when not enabled (when ppl queried other pugbots in a public channel)
# if [ "$ALLOW_FROM_ANY_CHANNEL" ] || cat "$PUG_CHANNELS_FILE" | grep -i "^$CHANNELREGEXP$" >/dev/null
# then :
# else exit 0
# fi

cat "$PUG_CHANNELS_FILE" | grep -i "^$CHANNELREGEXP$" >/dev/null || exit 0

## OK we do not exit.

IRC_BGCOL=01
. irccols.shlib

TOPIC_HEADER="Welcome to noobpug, where even the b0t is a n00b!"

# UPDATE_TOPIC=true
UPDATE_TOPIC=

PLAYER_LIST_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".player_list
LAST_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".last
RED_TEAM_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".red_team
BLUE_TEAM_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".blue_team
MAP_POOL_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".map_pool
CURRENT_MAP_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".current_map
SUB_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".sub
NUMBER_OF_PLAYERS_NEEDED_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".total_players
LAST_RESET_FILE="$PUGBOTDIR"/pug@"$NETWORK"."$CHANNEL".last_reset

if [ -f "$NUMBER_OF_PLAYERS_NEEDED_FILE" ]
then NUMBER_OF_PLAYERS_NEEDED="`cat "$NUMBER_OF_PLAYERS_NEEDED_FILE"`"
fi
[ "$NUMBER_OF_PLAYERS_NEEDED" ] || NUMBER_OF_PLAYERS_NEEDED=10

## double_escape_slashes used to be a function, but then it didn't work :o
alias double_escape_slashes=" sed 's+\\\\+\\\\\\\\\\\\\\\\+g' "
# alias double_escape_slashes=" sed 's+\\\\+\\\\\\\\+g' "

get_new_map () {
	MAP1=`cat "$MAP_POOL_FILE" | grep -v "^#" | beforelast " (" | trimempty | randomorder | randomorder | randomorder | head -n 1`
	MAP2=`cat "$MAP_POOL_FILE" | grep -v "^#" | beforelast " (" | trimempty | randomorder | randomorder | randomorder | head -n 1`
	NEW_MAP="$MAP1 + $MAP2"
	[ "$MAP1" = "$MAP2" ] && NEW_MAP="$MAP1"
}

reset () {
	if [ -f "$MAP_POOL_FILE" ]
	then
		## Update the CURRENT_MAP_FILE randomly from the pool, but only if the last reset was > 1 minute ago:
		get_num_players
		touch -d "$((NUMBER_OF_PLAYERS+1)) minute ago" "$LAST_RESET_FILE"
		if newer "$LAST_RESET_FILE" "$CURRENT_MAP_FILE"
		then
			get_new_map
			echo "$NEW_MAP" > "$CURRENT_MAP_FILE" &&
			# echo "New pug is: $COLYELLOW$NEW_MAP$COLRESET *You have 1 minute to join!*"
			echo "New pug is: $COLYELLOW$NEW_MAP$COLRESET *Maps will change in 1 minute!*" | double_escape_slashes
		else
			NOW=`date "+%s"`
			THEN=`date -r "$CURRENT_MAP_FILE" "+%s"`
			DIFF=$((THEN+60*NUMBER_OF_PLAYERS+5-NOW)) ## used to be 60 min instead of 5 ## used to be 60 min instead of 5
			# [ "$NICK" ] && echo "/notice $NICK You may not reset the pug for $DIFF seconds." | double_escape_slashes
			echo "You may not reset the pug for $DIFF seconds."
			return
		fi
	fi
	printf "" > "$PLAYER_LIST_FILE"
	rm -f "$RED_TEAM_FILE" "$BLUE_TEAM_FILE"
	update_topic
	# [ -f "$PLAYER_LIST_FILE" ] && echo "Pug has been reset." || echo "/notice $NICK Error: Failed to reset pug." | double_escape_slashes
	[ -f "$PLAYER_LIST_FILE" ] && echo "Pug has been reset." || echo "Error: Failed to reset pug."
}

get_num_players () {
	NUMBER_OF_PLAYERS=`cat "$PLAYER_LIST_FILE" | wc -l`
}

## Note atm this is a pretty list of the players, for user.  For a nice list to use in code, use the listfile.  :P
list_players () {
	get_num_players
	## if pug is empty and we are in recycling mode, reset the map (and the pug) if over timelimit
	[ "$NUMBER_OF_PLAYERS" = 0 ] && [ -f "$MAP_POOL_FILE" ] && NICK="" reset
	[ -f "$MAP_POOL_FILE" ] && [ -f "$CURRENT_MAP_FILE" ] && SHOW_CURRENT_MAP="{$COLYELLOW`cat "$CURRENT_MAP_FILE"`$COLRESET} "
	## DONE: was not displaying \s in a players nick, making it rather hard to pick them :>
	echo "[$CHANNEL] $SHOW_CURRENT_MAP$COLRED$COLBOLD($COLBOLD$COLGREEN$NUMBER_OF_PLAYERS/$NUMBER_OF_PLAYERS_NEEDED$COLRED$COLBOLD)$COLBOLD $COLBLUE$COLBOLD[ $COLGREY` cat "$PLAYER_LIST_FILE" | tr '\n' ' ' | double_escape_slashes | sed 's+ $++' ` $COLBLUE]$COLNORM"
}

show_last () {
	if [ -f "$LAST_FILE" ]
	then
		cat "$LAST_FILE" | tr '\n' ' '
		TIME_AGO=`datediff -file "$LAST_FILE"`
		echo "$COLNORM""- $COLGREEN$TIME_AGO ago$COLNORM" | double_escape_slashes
	fi
}

list_team () {
	# if [ "$1" = RED ]
	# then echo -n "$COLRED$COLBOLD""RED: " ; cat "$RED_TEAM_FILE"
	# elif [ "$1" = BLUE ]
	# then echo -n "$COLBLUE$COLBOLD""BLUE: " ; cat "$BLUE_TEAM_FILE"
	# fi |
	# tr '\n' ',' | sed 's+,$++'
	# echo
	TEAM="$1"
	TEAM_FILE=`eval echo '$'"$TEAM"_TEAM_FILE`
	TEAMCOL=`eval echo '$COL'"$TEAM"`
	echo "$COLGREY$COLBOLD""[$TEAMCOL$TEAM$COLGREY] "` cat "$TEAM_FILE" | tr '\n' ' ' | sed 's+ $++' `"$COLBOLD"
}

update_topic () {
	if [ "$UPDATE_TOPIC" ]
	then
		PLAYER_LIST=`list_players`
		echo "/topic $TOPIC_HEADER $PLAYER_LIST" | double_escape_slashes
	fi
}

players_still_needed () {
	get_num_players
	[ "$NUMBER_OF_PLAYERS" -lt "$NUMBER_OF_PLAYERS_NEEDED" ] && [ ! -f "$RED_TEAM_FILE" ] && [ ! -f "$BLUE_TEAM_FILE" ]
}

join () {
	addplayer "$NICK"
}

addplayer () {
	# NICK_TO_ADD="$1"
	for NICK_TO_ADD
	do
		if in_pickup_list "$NICK_TO_ADD"
		then echo "$NICK_TO_ADD is already in the pug!" | double_escape_slashes
		else
			if players_still_needed
			then
				(
					cat "$PLAYER_LIST_FILE"
					echo "$NICK_TO_ADD"
				) |
				# removeduplicatelines | ## No longer needed since we check beforehand
				dog "$PLAYER_LIST_FILE"
				echo "$NICK_TO_ADD has joined the pug." | double_escape_slashes
				get_num_players
				if [ "$NUMBER_OF_PLAYERS" = "$NUMBER_OF_PLAYERS_NEEDED" ]
				# then echo "The pug is full!  Choose two captains, and use !pick (take it in turns please 1-2-2-2-1)."
				then
					echo "The pug has started!  Type !captain to be a captain."
				fi
			else echo "Sorry the pug is full, please wait until teams are picked, and the pug will reset."
			fi
		fi
	done
	update_topic
}

leave () {
	get_num_players
	if [ "$NUMBER_OF_PLAYERS" = "$NUMBER_OF_PLAYERS_NEEDED" ] || [ -f "$RED_TEAM_FILE" ] || [ -f "$BLUE_TEAM_FILE" ]
	then echo "You cannot leave the pug now that it has started."
	else removeplayer "$NICK"
	fi
}

needsub () {
	FROM="$NICK"
	[ "$1" ] && FROM="$*"
	echo "$FROM" > "$SUB_FILE"
	echo "[$CHANNEL] Sub needed for $FROM!  Type !sub if you can." | double_escape_slashes
}

sub () {
	if [ -f "$SUB_FILE" ]
	then
		echo "[$CHANNEL] $NICK is subbing `cat "$SUB_FILE"`" | double_escape_slashes
		rm -f "$SUB_FILE"
	fi
}

removeplayer () {
	if [ "$1" = -quiet ]
	then QUIET=true ; shift
	fi
	# NICK_TO_REMOVE="$1"
	for NICK_TO_REMOVE
	do
		if in_pickup_list "$NICK_TO_REMOVE"
		then
			NICK_TO_REMOVE_REGEXP=`toregexp "$NICK_TO_REMOVE"`
			cat "$PLAYER_LIST_FILE" |
			grep -i -v "^$NICK_TO_REMOVE_REGEXP$" |
			dog "$PLAYER_LIST_FILE"
			if [ "$QUIET" ]
			then :
			else echo "$NICK_TO_REMOVE has been removed from the pug." | double_escape_slashes
			fi
		else
			echo "$NICK_TO_REMOVE is not in the pug.  :P" | double_escape_slashes
		fi
	done
	update_topic
}

add_player_to_team () {
	PLAYER="$1"
	TEAM="$2"
	# echo "$PLAYER has been picked by $NICK."
	removeplayer -quiet "$PLAYER"
	TEAM_FILE=`eval echo '$'"$TEAM"_TEAM_FILE`
	echo "$PLAYER" >> "$TEAM_FILE"
}

pick () {
	get_team_to_pick_next
	who_is_captain_of "$TEAM"
	if [ "$NICK" = "$CAPTAIN" ]
	then
		PLAYER="$1"
		if in_pickup_list "$1"
		then
			add_player_to_team "$PLAYER" "$TEAM"
			list_team "$TEAM" | double_escape_slashes
			please_pick
		else
			echo "$PLAYER cannot be picked!" | double_escape_slashes
		fi
	else
		echo "It is $CAPTAIN's turn to pick." | double_escape_slashes
	fi
}

in_pickup_list () {
	REGEXP=`toregexp "$1"`
	grep -i "^$REGEXP$" "$PLAYER_LIST_FILE" >/dev/null
}

get_team_to_pick_next () {
	if [ ! -f "$RED_TEAM_FILE" ] || [ ! -f "$BLUE_TEAM_FILE" ]
	then
		echo "Nobody can pick until there are two captains."
		TEAM="NOT_YET"
		exit
	else
		get_num_players ## left to pick
		case "$NUMBER_OF_PLAYERS" in
			8|5|4)
				TEAM="RED"
			;;
			7|6|3|2)
				TEAM="BLUE"
			;;
			1)
				TEAM="AUTO_RED"
			;;
			*)
				TEAM="ERROR"
			;;
		esac
	fi
}

who_is_captain_of () {
	TEAM="$1"
	if [ "$TEAM" = RED ] || [ "$TEAM" = BLUE ]
	then
		CAPTAIN=`eval head -n 1 '$'"$TEAM"_TEAM_FILE`
	fi
}

please_pick () {
	# 8 players => red picks
	# 7/6 players => blue picks
	# 5/4 players => red picks
	# 3/2 players => blue picks
	# 1 players => automatic
	get_team_to_pick_next
	if [ "$TEAM" = AUTO_RED ]
	then
		add_player_to_team "`cat "$PLAYER_LIST_FILE"`" RED
		echo "Pickup is complete.  Decide on a game and TS server, and go play.  Have fun!"
		if [ -f "$MAP_POOL_FILE" ] && [ "`cat "$CURRENT_MAP_FILE"`" = "RANDOM + RANDOM" ]
		then get_new_map ; echo "Random maps have been chosen: $COLYELLOW$NEW_MAP" | double_escape_slashes
		fi
		list_team RED | double_escape_slashes
		list_team BLUE | double_escape_slashes
		(
			[ -f "$CURRENT_MAP_FILE" ] && cat "$CURRENT_MAP_FILE"
			list_team RED
			list_team BLUE
		) > "$LAST_FILE"
		NICK="" reset
	else
		who_is_captain_of "$TEAM"
		# list_team RED
		# list_team BLUE
		# list_players
		echo "$CAPTAIN, please !pick a player." | double_escape_slashes
	fi
}

captain () {
	## TODO: doesn't appear to check if #players is (was) enough yet :P
	get_num_players
	if [ ! -f "$RED_TEAM_FILE" ] && in_pickup_list "$NICK" && [ "$NUMBER_OF_PLAYERS" = "$NUMBER_OF_PLAYERS_NEEDED" ]
	then
		removeplayer -quiet "$NICK"
		echo "$NICK" > "$RED_TEAM_FILE"
		echo "$COLRESET$NICK is captain of the $COLRED$COLBOLD""RED""$COLRESET team." | double_escape_slashes
		# echo "/op $NICK"
	elif [ -f "$RED_TEAM_FILE" ] && [ ! -f "$BLUE_TEAM_FILE" ] && in_pickup_list "$NICK"
	then
		removeplayer -quiet "$NICK"
		echo "$NICK" > "$BLUE_TEAM_FILE"
		echo "$COLRESET$NICK is captain of the $COLBLUE$COLBOLD""BLUE""$COLRESET team." | double_escape_slashes
		# echo "/op $NICK" ## was opping paeutalik in #ut994funpug !
		please_pick
		list_players ## Since we no longer list at every iteration, we should at least do a list at the start of the pickup.
		if [ "$CHANNEL" = "#crazypug" ]
		then
			MAPS="`cat "$CURRENT_MAP_FILE" | sed 's/\(^\| \)+/\1/g'`"
			if [ "$MAPS" ]
			then
				sh ./pugbot/setserver -zppug $MAPS || echo "/notice nogginBasher Failed to set server."
				## Trying -zppug for the moment instead of -pug, hoping it makes weapon switch faster?
				# && echo "!kx"
			fi
		fi
	else
		echo "You can't be a captain!"
	fi
}

help () {
	echo "Type !add to join the pug, or !leave to leave."
	# echo "The bot is kinda nooby, so please try not to confuse him!  If you change your nick, please !leave and !join."
	echo "If you change your nick, please !leave and !join (or in emergencies use !removeplayer)."
	# echo "Have fun, report any problems to an admin."
	# echo "Rules: No pros, whiners or flamers.  Be friendly, spread the love!"
	# echo "Piston-camping, telefragging, boosting and spawn-raping are encouraged."
	# echo "Captains can pick the map and game mode, but should try to ensure it's something all players will enjoy."
	if [ -f "$MAP_POOL_FILE" ]
	then
		echo "The pool of maps can be seen by typing !maps.  Type !addmap <map_name> to propose your own."
	fi
}

promote () {
	. restrict_repetitive_calls "5 minutes"
	get_num_players
	SPACES_LEFT=$((NUMBER_OF_PLAYERS_NEEDED-NUMBER_OF_PLAYERS))
	echo "/mode $CHANNEL -N"
	echo "/notice $CHANNEL $SPACES_LEFT spots left in $CHANNEL, type !add to join"
	echo "/mode $CHANNEL +N"
}

propose () { ## AKA addmap
	if [ -f "$MAP_POOL_FILE" ]
	then
		# ## depends on size of pool:
		# RESTRICT_EXTRA=".$NICK" . restrict_repetitive_calls "1 hour"
		if [ ! "$NICK" = utb0t ]
		then RESTRICT_EXTRA=".$NICK" . restrict_repetitive_calls "5 minutes"
		fi
		# RESTRICT_EXTRA=".$NICK" . restrict_repetitive_calls "1 minute"
		IP_AND_OR_SERVER="$*"
		if [ "$IP_AND_OR_SERVER" ]
		then
			echo "$IP_AND_OR_SERVER ($NICK)" >> "$MAP_POOL_FILE"
			echo "$NICK's proposal for $IP_AND_OR_SERVER has entered the map pool" | double_escape_slashes
		else
			# echo "/notice $NICK To add your map to the pool: !addmap <map_name>"
			echo "To add your map to the pool: !addmap <map_name>"
		fi
	else
		# echo "/notice $NICK This channel has no map pool."
		echo "This channel has no map pool."
	fi
}

pool () {
	if [ -f "$MAP_POOL_FILE" ]
	then
		SHOW_MAPS=`
			cat "$MAP_POOL_FILE" |
			grep -v "^#" |
			# takecols 1 |
			beforelast " (" |
			sort |
			sed 's+$+, +' | tr -d "\n" | sed 's+, $++'
		`
		echo "/notice $NICK Map pool is: $SHOW_MAPS" | double_escape_slashes
		## TODO CONSIDER: is it better for longer map pools to echo | notice ?
	else
		# echo "/notice $NICK This channel has no map pool." | double_escape_slashes
		echo "This channel has no map pool." | double_escape_slashes
	fi
}

setlimit () {
	get_num_players
	if [ ! "$NUMBER_OF_PLAYERS" = 0 ]
	# then echo "/notice $NICK You can only change the settings of an empty pug." | double_escape_slashes
	then echo "You can only change the settings of an empty pug." | double_escape_slashes
	else
		if echo "$1" | grep "^\([468]\|10\)$" >/dev/null
		then
			echo "$1" > "$NUMBER_OF_PLAYERS_NEEDED_FILE"
			echo "Pug set to $1 players."
		else
			# echo "/notice $NICK I only support pugs of size 4,6,8 or 10." | double_escape_slashes
			echo "I only support pugs of size 4,6,8 or 10."
		fi
	fi
}

enablemappool () {
	get_num_players
	if [ ! "$NUMBER_OF_PLAYERS" = 0 ]
	# then echo "/notice $NICK You can only change the settings of an empty pug." | double_escape_slashes
	then echo "You can only change the settings of an empty pug."
	else
		[ -f "$MAP_POOL_FILE".disabled ] && mv -f "$MAP_POOL_FILE".disabled "$MAP_POOL_FILE"
		touch "$MAP_POOL_FILE" && MAPCOUNT=`cat "$MAP_POOL_FILE" | grep -v "^#" | wc -l`
		[ "$MAPCOUNT" -gt 1 ] && WITHMAPS=" with $MAPCOUNT maps" || WITHMAPS=
		echo "Map pool is enabled in $CHANNEL$WITHMAPS.  You may: !addmap <map_or_ip>"
	fi
}

disablemappool () {
	get_num_players
	if [ ! "$NUMBER_OF_PLAYERS" = 0 ]
	# then echo "/notice $NICK You can only change the settings of an empty pug." | double_escape_slashes
	then echo "You can only change the settings of an empty pug." | double_escape_slashes
	else mv -f "$MAP_POOL_FILE" "$MAP_POOL_FILE".disabled && echo "Map pool disabled in $CHANNEL."
	fi
}

setrandom () {
	get_num_players
	if [ ! "$NUMBER_OF_PLAYERS" = 0 ]
	# then echo "/notice $NICK You can only change the settings of an empty pug." | double_escape_slashes
	then echo "You can only change the settings of an empty pug." | double_escape_slashes
	else echo "RANDOM + RANDOM" > "$CURRENT_MAP_FILE" ; list_players
	# else echo "RANDOM + RANDOM" > "$CURRENT_MAP_FILE" ; NICK="" reset
	fi
}

setmaps () {
	get_num_players
	if [ ! "$NUMBER_OF_PLAYERS" = 0 ]
	then echo "You can only change the settings of an empty pug." ; return
	fi
	if [ -f "$MAP_POOL_FILE" ]
	then
		echo "$*" > "$CURRENT_MAP_FILE"
		echo "Pug is currently: $*"
	else
		echo "You need to !enablemappool first"
	fi
}

if [ ! -f "$PLAYER_LIST_FILE" ]
then reset
fi

vote () {
	if in_pickup_list "$NICK"
	then
		## TODO (but can survive): check waiting_for_captains
		RESTRICT_EXTRA="$NICK" . restrict_repetitive_calls "30 seconds"
		if [ "`seq 1 5 | chooserandomline`" = "1" ]
		then NICK="$1" captain
		else echo "/notice $NICK You failed to make $NICK a captain, better luck next time."
		fi
	fi
}

randcapt () {
	if in_pickup_list "$NICK"
	then
		## TODO (but can survive): check waiting_for_captains
		NICK=` cat "$PLAYER_LIST_FILE" | chooserandomline ` captain
	fi
}

