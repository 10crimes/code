## OMG noob: You should have used -raw to use a custom field-delimeter, to make parsing the output easier.
##           or even -xml or "template mode" (see http://www.qstat.org/faq.html )

## TODO: Add CACHED_LAST_SEEN_POPULATED for each server - would be useful info for empty servers :P

## Sometimes responds DOWN insted of <no response> and we don't show the cached :P

[ -d "$HOME/myroots/qstat" ] && . includepath "$HOME/myroots/qstat"

[ "$COMMAND_SCRIPTS_DIR" ] || COMMAND_SCRIPTS_DIR=.

. irccols.shlib

IRCNICK="$NICK"

if [ "$*" = "" ]
then
	# echo "To query UT99 servers: !utp [-scores|-s] [-rules|-r|-muts|-m|-i [property]] [-justserver|-noplayers] <ip_and_port>s..."
	echo "To query UT99 servers: !utp [-p|-ping] [-s|-scores] [-r|-rules] [-m|-muts] <ip_and_port>s..."
	## Not really public: [-justserver|-noplayers] 
	echo "  NOTE: to query a hostname, use !utp unreal://<hostname>[:<port>]"
	exit 0
fi

if [ "$1" = -ping ] || [ "$1" = -p ]
then SHOWPINGS=true ; shift
fi

if [ "$1" = -scores ] || [ "$1" = -s ]
then SHOWSCORES=true ; shift
fi

SEARCH=
if [ "$1" = -rules ] || [ "$1" = -r ] || [ "$1" = -i ]
then SHOWRULES=true ; shift
fi

if [ "$1" = -muts ] || [ "$1" = -m ]
then SHOWRULES=true ; shift ; SEARCH="Mutators"
fi

if [ "$1" = -i ]
then SHOWRULES=true ; shift ; SEARCH="$1" ; shift
fi

if [ "$1" = -justserver ]
then JUSTSERVER=true ; shift
fi

if [ "$1" = -noplayers ]
then NOPLAYERS=true ; shift
fi

[ "$JUSTSERVER" ] && NOPLAYERS=true

NL="\\
"

for URL in $*
do

NL="\\
"

	(

	IP=""

	## Check that it is an IP (with optional :port at the end) or an unreal:// URL
	if
		echo "$URL" | grep '^unreal://' >/dev/null ||
		echo "$URL" | grep "^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\(:[0-9]*\|\)$" >/dev/null
	then

		IP=`echo "$URL" | sed 's+^unreal://++ ; s+/$++'`

		if [ "$SHOWRULES" ]
		then

			echo -n "$COLROYAL$COLBOLD$URL$COLBOLD "

			## Seems we need occasionally need to take longer than 18 seconds for XOL!
			QSTAT_OUTPUT=`
				qstat -default uns -retry 6 -interval 4 -timeout 24 -R "$IP" 2>&1 | drop 2
			`

			echo "$QSTAT_OUTPUT" |

			# sed "s+\([A-Za-z0-9_]*\)=+$NL$COLRED\1$COLYELLOW=$COLPINK+" |
			sed "s+^[^A-Za-z0-9]*++" | ## stripping some crap?
			tee /tmp/utp.debug1 |

			# tr -d '\n' |
			# sed 's+[ ]\<[A-Za-z0_-9]*\>=[^ ]*
			sed 's+,\([^ ]\)+\n\1+g' |
			# tr ',' '\n' |
			if [ "$SEARCH" ]
			then
				# tr "," "\n" | grep -i "$SEARCH"
				# sed "s+.*\($SEARCH\)+\1+" |
				verbosely grep -i "$SEARCH" ||
				echo "$COLRESET""Nothing found for \"$SEARCH\""
			else cat
			fi |
			sort |

			## These two must come before changing the mutators
			## Actually they appear to do very little - remove them?
			sed "s+\([^ ,=]*\)=+\1=+g" |
			sed 's+,\([^ ]\)+, \1+g' |
			## Colour mutators in orange:
			sed "s+^mutators=+mutators=$COLORANGE+" |

			tee /tmp/out.1 |

			tr '\n' ' ' |

			# sed "s+mutators=\([^=]*\)\([A-Za-z][A-Za-z]*\)=+$NL""mutators=\1$NL\2=+" |
			# sed "s+[0-9][0-9]*+$COLGREEN\0$COLYELLOW+g" |
			# sed "s+\([^ ,]*\)=+$NL$COLNORM\1$COLYELLOW$COLBOLD=$COLBLUE+g" |
			# # tr -d '\n' | sed "s+mutators+$NL""mutators+" |

			# sed "s+\([^ ,=]*\)=+$COLBLUE\1$COLYELLOW=$COLAQUA+g" | ## colours are broken here somehow

			## Numbers:
			# sed "s+[0-9][0-9]*+$COLGREEN\0$COLAQUA+g" | ## Must do this one before others!
			# sed "s+=\([0-9][0-9.]*\)+=$COLGREEN\1$COLAQUA+g" | ## Must do this one before others!

			## Booleans:
			sed "s+\(\<true\>\)+$COLGREEN\0+ig" |
			sed "s+\(\<false\>\)+$COLRED\0+ig" |

			# sed "s+,+$COLGREY\0$COLBLUE+g" |
			# sed "s+\([^ ]*\)=+$COLBLUE\1$COLORANGE=$COLAQUA+g" |
			sed "s+\([^ ]*\)=+$COLRESET\1=$COLAQUA+g" |

			# sed 's/, /+/g' |
			# sed "s+[ ]*mutators\([^=]*=[^=]*\)\([A-Za-z][A-Za-z]*\)=+$NL$COLPINK""Mutators\1$NL$COLBLUE\2=+" |
			# sed 's/+/, /g' |

			# pipeboth |

			# tr , '\n' |

			# sed "s+,[ 	]*$+$COLRESET,$COLRESET+" | ## Color ending commas

			# sed "s+\(^\| ]\)\([0-9A-Za-z .]*\)\(=\|\)\([A-Za-z .]*\)\([0-9.]*[^,]*.*\)+$COLRED\2$COLYELLOW\3$COLPINK\4$COLGREEN\5$COLGREY +g" |
			# tr '\n' ' ' |

			## All the clever stuff i tried to do with the mutator list broke, so now I just do:
			sed "s+\<[Mm]utators\>+$COLMAGENTA""\0+g" |

			# verbosely sed "s$COLYELLOW,$COLPINK\$" ## Remove the last one!
			sed "s+$COLRESET,$COLRESET[^,]*$++" ## Remove the last one!

			echo "$COLRESET"

		else

			mkdir -p /tmp/jsh-joey/utpcache
			CACHE_FILE=/tmp/jsh-joey/utpcache/"$IP".last
			CACHED_COPY=` cat "$CACHE_FILE" `

			QSTAT_OUTPUT=` qstat -default uns -retry 6 -interval 4 -timeout 24 -P "$IP" 2>&1 | dos2unix | drop 1 `

			# echo ">$QSTAT_OUTPUT<" >&2

			# if echo "$QSTAT_OUTPUT" | head -n 1 | grep "\(no response\|^$\|^DOWN$\)" >/dev/null
			if echo "$QSTAT_OUTPUT" | head -n 1 | grep "\( no response$\|^$\|^DOWN *$\)$" >/dev/null
			then
				## Query failed
				### TODO: wait, then retry
				## Ask utquery's scanner data:
				if echo "$IP" | grep ":" > /dev/null
				then IPP="$IP"
				else IPP="$IP:7777"
				fi
				UTQUERY_FILE=/home/utquery/utquery/data/"$IPP".info
				if [ -f "$UTQUERY_FILE" ]
				then
					# ls -l "$UTQUERY_FILE" >&2
					SERVER_STATUS=`cat "$UTQUERY_FILE"`
					WHEN=`datediff -file "$UTQUERY_FILE"`" ago"
					# if echo "$SERVER_STATUS" | head -n 1 | grep "^DOWN$" >/dev/null || echo "$SERVER_STATUS" | head -n 1 | grep "^no response$" >/dev/null
					if echo "$SERVER_STATUS" | head -n 1 | grep "^ *\(no response\|\|DOWN\) *$" >/dev/null
					then echo "unreal://$IPP/ = $SERVER_STATUS" | sed 's+\<DOWN\>+did not respond+g'
					else echo "Last queried $WHEN: unreal://$IPP/ $SERVER_STATUS"
					fi
				else
					if [ "x$CACHED_COPY" = x ]
					then echo "no record for $IP >$QSTAT_OUTPUT<"
					# else echo "Last: $CACHED_COPY"
					else
						CACHED_TIME=`datediff -file "$CACHE_FILE"`
						echo "$COLGREEN""Last seen $CACHED_TIME ago: $CACHED_COPY"
					fi
					## TODO: can we re-use a memo made from an earlier successful call?  will the old memo be broken by now?  we could grab a copy of it at the start...
				fi
				exit 5
			fi
			# qstat -default uns -timeout 10 -P "$IP" |

			PRETTY_SERVER_STATUS=`

				echo "$QSTAT_OUTPUT" |
				# tee -a /tmp/qstats.out |
				striptermchars | ## This is for servers like Explosive with crazy chars in their title, which IRC refuses to accept.
				# drop 1 |
				# sed 's+^[[:digit:].:][^ 	]*[ 	]*++' |
				tr -s ' ' |
				(

					[ "$JUSTSERVER" ] || KEEPINFO="\\2 " ## KEEPINFO is #players+ + ping

					read IPR REST
					# echo -n "$COLBLUE""unreal://$IPR $COLGREY""$REST "
					# echo -n "unreal://$IPR$COLNORM ""$REST " |
					echo -n "$COLROYAL$COLBOLD""unreal://$IPR$COLBOLD$COLNORM ""$REST " | ## i would have used COLRESET but that sets colour to White not Default :P
					# sed "s+[^ ]* *[^/]*/[^/]*/ *[[:digit:]]* *[^ ]* +\0$COLYELLOW+"
					sed "s+\([^ ]*\) *\([^/]*/[^/]*/ *[[:digit:]]* *[^ ]*\) +\1 $KEEPINFO$COLYELLOW+" |

					## Colour any team-related PubliciseScore info in the title with approriate team colour:
					# # sed "s+(\([0-9]*\)v\([0-9]*\))+($COLRED\1$COLYELLOW""v$COLBLUE\2$COLYELLOW)+" |
					# # sed "s+\[\([0-9]*\)-\([0-9]*\)\]+[$COLRED\1$COLYELLOW-$COLBLUE\2$COLYELLOW]+" |
					# sed "s+(\([0-9]*\)v\([0-9]*\))+$COLRED$COLBOLD($COLBOLD$COLYELLOW\1v\2$COLBLUE$COLBOLD)$COLBOLD$COLYELLOW+" |
					# sed "s+\[\([0-9]*\)-\([0-9]*\)\]+$COLRED$COLBOLD[$COLBOLD$COLYELLOW\1-\2$COLBLUE$COLBOLD]$COLBOLD$COLYELLOW+" |
					# # sed "s+(\([0-9]*\)v\([0-9]*\))+$COLRED$COLBOLD(\1$COLBOLD$COLYELLOW""v""$COLBLUE$COLBOLD\2)$COLBOLD$COLYELLOW+" |
					# # sed "s+\[\([0-9]*\)-\([0-9]*\)\]+$COLRED$COLBOLD[\1$COLBOLD$COLYELLOW""-""$COLBLUE$COLBOLD\2]$COLBOLD$COLYELLOW+" |

					cat

					# cat > /dev/null
					sort -n -r -k 1 | ## highest frags first :)
					# tee /tmp/utp.mid |
					# takecols 5 |
					while read SCORE dummy TEAM PING NICK
					do

						TEAMCOL="$COLNORM"
						[ "$TEAM" = "team#0" ] && TEAMCOL="$COLRED"
						[ "$TEAM" = "team#1" ] && TEAMCOL="$COLROYAL"
						[ "$TEAM" = "team#2" ] && TEAMCOL="$COLGREEN"
						[ "$TEAM" = "team#3" ] && TEAMCOL="$COLYELLOW"

						if [ "$SHOWPINGS" ] && [ ! "$TEAMCOL" = "$COLNORM" ]
						then echo -n "($PING)"
						fi

						echo -n "$TEAMCOL""$NICK"

						if [ "$SHOWSCORES" ] && [ ! "$TEAMCOL" = "$COLNORM" ]
						then
							echo -n "$COLNORM($SCORE)"
						fi

						echo -n "$COLNORM, "

					done |
					# takecols 3 5 | sed "s+team#0[ 	]*+$COLRED+ ; s+team#1[ 	]*+$COLBLUE+ ; s+team#[^ 	]*[ 	]*+$COLGREY+" |
					# # sed "s+^+$COLRED+" |
					# sed "s+$+$COLGREY, +" |
					# tr '\n' ' ' |
					tr -s ' ' |
					sed 's+, $++' |
					# sed "s+^+[ + ; s+\$+ ]+"
					sed "s+^+$COLGREY[ + ; s+\$+ $COLGREY]+" |
					# sed "s+^+ -\\\\- + ; s+\$+ -/-+"
					# sed "s+^+ \\\\\\\\- + ; s+\$+ -//+"
					# sed "s+^+ \\\\\\\\--( + ; s+\$+ )--//+"
					# sed "s+^+ ~\\\\~ + ; s+\$+ ~/~+"
					# sed "s+^+ \\\\\\\\ + ; s+\$+ //+"
					if [ "$NOPLAYERS" ]
					then cat > /dev/null
					else cat
					fi

					if [ "$REPCHAN" ]
					then
						SCORE_AND_TIMELEFT=$(bash ./ut_servers/scorefromlivechan "$REPCHAN")
						[ "$SCORE_AND_TIMELEFT" ] && echo -n " $COLGREEN$SCORE_AND_TIMELEFT"
						# echo -n " $COLRESET""[$REPCHAN]"
					fi

					## Why did I have COLRESET off?!
					echo "$COLRESET"
					# echo

				) |
				## No it_s best not to break up the line here, they might be grepped outside of here.
				# sed "s+\(.\{0,245\}[^ ]\)\(  *\|$\)+\0$NL +g" | grep -v "^ $"
				cat

			`

			echo "$PRETTY_SERVER_STATUS"

			## Update cache with good reading:
			echo "$PRETTY_SERVER_STATUS" > "$CACHE_FILE"

		fi

	elif [ -x "$COMMAND_SCRIPTS_DIR/ut_servers/$URL" ]
	# elif verbosely mytest [ -x "$COMMAND_SCRIPTS_DIR/ut_servers/$URL" ]
	then

		export SHOWSCORES
		export SHOWPINGS
		export SHOWRULES
		export JUSTSERVER
		export NOPLAYERS
		export SEARCH
		"$COMMAND_SCRIPTS_DIR/ut_servers/$URL" ## no options passed, but vars exported

	elif [ "$SHOWRULES" ]
	then SEARCH="$URL"
	else echo "/notice $IRCNICK utp: ignoring non-IP \"$URL\""
	fi

	) &

	sleep 1

done |
## For some reason if I /say a line more than 80 chars long, none of the following lines are displayed.
# sed "s+^.............................................................................+\0...$NL...+g" |
# tee /tmp/out_overall.txt
cat
