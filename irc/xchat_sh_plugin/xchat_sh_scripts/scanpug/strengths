## TODO BUG: on the new machine, the auto !strengths at the start of a pug reads and repeats the wrong line!
#
## TODO BUG: with APug, the "pickable list" differs in format from the just-filled list.
##           we pick up the just-filled list, but we need to pick up the 8/10 list without the captains.
##           i don't think we ever really need to find the just-filled list, although it would show pugcounts for all 10 players.
##           except for some reason 10 players is too much and runs out of chars O_o
## lol run mid-edit: <UT> $ Avgpicks :: ++g | [tr -d ?] lover 4) [r-LovelyPmP ?] # tail [-n 1 | afterfirst (10/10) . | # sed s+^. + +g ; s+ .$++g ; s+<[0-9][0-9]*) ?]  ` []  sed [s+^. + +g ; s+ .$++g | tr -d ?] 10) r-goly [3.8] 8) r-Stas 

## Just for testing:
# if [ "$AUTH" = nogginBasher ]
# then CHANNEL="#ctf.pug"
# fi

if [ ! "$CHANNEL" = "#ut.pug" ] && [ ! "$CHANNEL" = "#noobpug" ] && [ ! "$CHANNEL" = "#pug.up" ] && [ ! "$CHANNEL" = "#ut994funpug" ] && [ ! "$CHANNEL" = "#pug" ] && [ ! "$CHANNEL" = "#ctf.pug" ] && [ ! "$CHANNEL" = "#tehpugz" ]
then exit
fi

IRC_BGCOL=01
. irc.shlib
. irccols.shlib

# sleep 3 ## Give Rival time to show his list.

if [ ! "$BACKCHECK" ]
then BACKCHECK="500"
fi

## Get last two filled teams lines:
## No, now we are going for the line Rival prints after "please .pick from the .list", which is the same as mid-picking !list, but different from pre-pickup !list
LASTLIST=`

# cat "/home/joey/.xchat2.utb0t/logs/$NETWORK-$CHANNEL.log" |
# grep "<Rival>" |
# grep nwCTF |
# grep "/10 " |
# grep -v " 0/10 " | ## TODO: for testing, pug is currently empty
# grep -v " Specs: " | ## server query also matches regexp, remove it!

tail -n "$BACKCHECK" "/home/joey/.xchat2.utb0t/logs/$NETWORK-$CHANNEL.log" |
grep "<\(Rival\|RF\)>[ 	]*" |
grep -A1 "please .pick from the .list" |
# afterfirst "<\(Rival\|RF\)>[ 	]*" | ## afterfirst regexps cannot contain \(...\) brackets
# sed "s+.*<\(Rival\|RF\)>[ 	]*++" |
afterlast "<\(Rival\|RF\)>[ 	]*" |
tail -n 1 |
afterfirst "/10 " |
# sed 's+? .)+ +g'
sed 's+^. + +g ; s+ .$++' |
sed -u 's+[^-A-Za-z0-9_|^\`{}()\r, .]++g'   ## Strip nasty chars found on spud.  TODO: []
`
jshinfo "LASTLIST=$LASTLIST"

#### For APug:
## TODO: get the 8/10 pickables without the captains.
## <APug> # Captains type .here to prevent yourself from getting kicked # r-ostis gets to pick first. #
## <APug> # Available Players:  Puglist (10/10) # 1) r-abid-abeo 2) r-bong 3) R-Vader`lover 4) r-Lovely` 5) r-vaderBasher 7) r-Amazigh`PmP 8) r-Stas 10) r-goly #
# LASTLIST=`
	# FIELD="[^ ][^ ]*" ; WS="  *"
	# tail -n "$BACKCHECK" "$LOGDIR/$NETWORK-$CHANNEL.log" |
	# grep "<\(APug\|ABot\)>.*(10/10)" |
	# ## Actually we really want the line with 10 entries, in case picking already started
	# grep "(10/10) . $FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD$WS$FIELD ." |
	# tail -n 1 |
	# afterfirst "(10/10) . " |
	# # sed 's+^. + +g ; s+ .$++g ; s+\<[0-9][0-9]*) ++g' | tr -d ' '
	# sed 's+^. + +g ; s+ .$++g ' | tr -d ' '
# `
LASTLIST_ABOT=`
tail -n "$BACKCHECK" "$LOGDIR/$NETWORK-$CHANNEL.log" |
grep "<\(APug\|[Aa][Bb][Oo0][Tt]\)>" |
# grep -A1 "Teams have been set" | ## Duh that's too late, shows all players!
grep "Available Players: " |
tail -n 1 |
afterfirst "Puglist[^ ]*" | sed 's+(10/10)++' | sed 's+\(^ *\. *\| *\. *\)++g' |
strings |
tail -n 2 |
afterfirst ": " |
beforelast " \. *"
`
jshinfo "LASTLIST_ABOT=$LASTLIST_ABOT"
[ "$LASTLIST_ABOT" ] && LASTLIST="$LASTLIST_ABOT"

if [ ! "$LASTLIST" ]
then
	jshinfo "No recent list found for !strengths."
	exit 0
fi

jshinfo "!strengths is trying to run (in $CHANNEL for $NICK) ..."

## OK we've decided to show the list, but let's not show it more than once!
NICK="nB^" . restrict_repetitive_calls "2 minutes"

jshinfo "LASTLIST=$LASTLIST"

NEWLIST=""
for WORD in $LASTLIST
do
	# if echo "$WORD" | grep "\\-" >/dev/null
	if ! echo "$WORD" | grep "[0-9]*)" >/dev/null
	then
		NEWLIST="$NEWLIST""$COLGREY$WORD"
		AUTH=`bash scanpug/slowgetauth "$WORD"`
		# COUNT=`cat ~/.scanpug/*.picks | grep " $AUTH " | wc -l`
		# if [ "$COUNT" -gt 0 ]
		# then
			# SUM=`cat ~/.scanpug/*.picks | grep " $AUTH " | takecols 1 | awksum`
			# STRENGTH=$((10*SUM/COUNT))
			# STRENGTH=`echo "$STRENGTH" | sed 's+^.+\0.+'`
			# NEWLIST="$NEWLIST""$COLAQUA[$COLGREEN$STRENGTH$COLAQUA]"
			# echo "$WORD $STRENGTH"
		# else
			# NEWLIST="$NEWLIST""$COLYELLOW""[?]"
			# echo "$WORD ?"
		# fi
		if [ "$AUTH" = "DUNNO_AUTH" ]
		then STRENGTH="?.?"
		else
			if [ "$COUNTPUGS" ]
			then STRENGTH=`cat ~/.scanpug/*.picks | grep " $AUTH " | wc -l`
			else STRENGTH=`bash ./scanpug/getstrength "$AUTH"`
			fi
		fi
		[ "$PREFIX" ] || PREFIX="#"
		NEWLIST="$NEWLIST""$COLGREY$COLBOLD$PREFIX$COLBOLD"
		if [ "$STRENGTH" = "?.?" ]
		then echo "$WORD ? $PREFIX"
		else echo "$WORD $STRENGTH $PREFIX"
		fi
	else
		# echo -n "$WORD "
		PREFIX="$WORD"
	fi
	NEWLIST="$NEWLIST"" "
done > /tmp/pugstrengths.list

# BRACKETCOL="$COLAQUA"
# STRENGTHCOL="$COLGREEN"
BRACKETCOL="$COLGREY"
# STRENGTHCOL="$COLPINK"
DECOCOL="$COLPINK"
DECOCHAR="\$"
NUMCOL="$COLGREY"
NICKCOL="$COLGREY"
STRENGTHCOL="$COLSILVER"

if [[ "$COUNTPUGS" ]]
then
	# STRENGTHCOL="$COLGREEN"
	# DECOCOL="$COLAQUA"
	DECOCOL="$COLGREEN"
	DECOCHAR="#"
fi

if [ "$CHANNEL" = "#ctf.pug" ]
then
	DECOCHAR="·(¥)·"
	DECOCOL="$COLRED"
	NUMCOL="$COLWHITE"
	NICKCOL="$COLWHITE"
	STRENGTHCOL="$COLWHITE"
fi

TITLE="Avgpicks"
[[ "$COUNTPUGS" ]] && TITLE="Pugcounts" && SORTREV="-r"

# echo -n "$COLPINK\$ $COLROYAL$COLBOLD""$TITLE$COLBOLD $COLPINK:: "
echo -n "$DECOCOL$DECOCHAR $COLROYAL$COLBOLD$TITLE$COLBOLD $DECOCOL:: "
cat /tmp/pugstrengths.list |
sort -n -k 2 $SORTREV |
while read NICK STRENGTH NUM
do
	[[ "$STRENGTH" = "?" ]] && STRENGTH="$COLYELLOW$STRENGTH""?"
	# echo -n "$COLWHITE$NUM $COLGREY$NICK $BRACKETCOL""[$STRENGTHCOL""$STRENGTH$BRACKETCOL""] "
	if [ "$NUM" ]
	then echo -n "$NUMCOL$COLBOLD$NUM$COLBOLD "
	fi
	echo -n "$NICKCOL$NICK "
	if [ "$STRENGTH" ]
	then echo -n "$BRACKETCOL""[$STRENGTHCOL""$STRENGTH$BRACKETCOL""] "
	fi
done
# echo "$COLPINK\$"
echo "$DECOCOL$DECOCHAR"
exit

jshinfo "NEWLIST=$NEWLIST"

# DECORATIONA="Ã¢Â€Â¡"
# echo "$COLROYAL$DECORATIONA$COLRESET Average picks: $NEWLIST$COLROYAL$DECORATIONA$COLRESET"

# echo "$DECOCOL$DECOCHAR $COLROYAL$COLBOLD""$TITLE:$COLBOLD $NEWLIST$DECOCOL$DECOCHAR"
echo "$DECOCOL$DECOCHAR $COLBOLD$TITLE:$COLBOLD $NEWLIST$DECOCOL$DECOCHAR"

