REPCHAN="$1"
LOGFILE="$LOGDIR/$NETWORK-$REPCHAN.log"

if [ ! -f "$LOGFILE" ]
then
	jshwarn "Cannot scan $REPCHAN since no logfile found: $LOGFILE"
	exit 1
fi

touch -d "2 minutes ago" /tmp/1minago
if newer /tmp/1minago "$LOGFILE"
then
	jshinfo "Not checking $REPCHAN for scores since the logfile is OLD!"
	exit 2
fi
rm -f /tmp/1minago

## Logfile should have lines like this:
## 2008-11-04 00:28:41 [#repchan] <repbot> [02:37] New Score: Red Team 2:2 Blue Team

SCORE=`
	tail -n 2000 "$LOGFILE" |
	## We must convert "[20:00] *** Currently Playing: ..." to score 0-0
	## since this indicates a new map, but it does not provide a "New Score: 0:0" for us :P
	sed 's+\*\*\* Currently Playing:.*+New Score: Reddies 0:0 Bluees+' |
	grep "\<New Score:" |
	tail -n 1 |
	afterfirst "New Score:" |
	sed 's+.* \([0-9][0-9]*:[0-9][0-9]*\) .*+\1+ ; s+:+-+'
`
TIME=` tail -n 200 "$LOGFILE" | dropcols 1 2 3 4 | takecols 1 | grep '^\[.*\]$' | tail -n 1 `


if [ "$TIME" = "[20:00]" ]
then exit 0 ## Fresh map, game has not started.
fi

if [ "$TIME" = "[00:00]" ]
then TIME="Game Ended"
else TIME="`echo "$TIME" | sed 's+^\[[0:]*++;s+:+m+;s+\]$+s+'` remaining"
fi

echo "[$SCORE] $TIME"

exit



## OLD method:

LOGFILE="$1"
[ "$LOGFILE" ] || LOGFILE="$HOME/.xchat2.utb0t/logs/irc.quakenet.org-#ut.pmplive2.log"

#### You idiot!
#### You could have just looked for line "New Score: Red Team 0:4 Blue Team"

## Find the last time scores were published:
DATA=` grep -A3 "\] \*\* Current Score:" "$LOGFILE" | tail -n 4 `

## Extract the scores at that time:
REDSCORE=` echo "$DATA" | grep "Red Team" | afterfirst "Team" | takecols 2 `
BLUESCORE=` echo "$DATA" | grep "Blue Team" | afterfirst "Team" | takecols 2 `

## Now find any caps since then:

## Should have worked but did not:
# TOPLINERE=` echo "$DATA" | head -n 1 | toregexp `
# UPDATES=` cat "$LOGFILE" | fromline "^$TOPLINERE$" `

TOPLINERE=` echo "$DATA" | head -n 1 | takecols 1 2 3 | toregexp `
UPDATES=` cat "$LOGFILE" | fromline "^$TOPLINERE" `

REDDELTA=` echo "$UPDATES" | grep "The red team scores\!$" | wc -l `
BLUEDELTA=` echo "$UPDATES" | grep "The blue team scores\!$" | wc -l `

REDSCORE=$((REDSCORE+REDDELTA))
BLUESCORE=$((BLUESCORE+BLUEDELTA))

if [ "$REDSCORE" = 0 ] && [ "$BLUESCORE" = 0 ]
then
	:
else
	# echo "[$REDSCORE-$BLUESCORE]"
	# echo "[Red: $REDSCORE - Blue: $BLUESCORE]"
	echo "[Red $REDSCORE - Blue $BLUESCORE]"
fi

