<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE> </TITLE>
</HEAD>
<BODY>
<center>
<h1>Rendering the 4d Julia set</h1>
After Mandelbrot's seminar I was inspired to have a go at drawing some fractals I hadn't tried before.<br>
<br>
The usual 2d Mandelbrot and Julia fractals work in the complex plane using the equation:<br>
<i>z &lt;- z^2 + c</i><br>
where<br>
<i>z = x + y<b>i</b> , <b>i</b>*<b>i</b> = -</i>1<br>
Points are defined to be in the set if |z| does not exceed 2.0 after a reasonable (theoretically infinite) number of iterations.<br>
<br>
The principle can be extended to four dimensions by using 4d quaternions instead of 2d complex numbers.  Quaternions look like:<br>
<i>z = x + y<b>i</b> + z<b>j</b> + w<b>k</b></i><br>
where<br>
<i><b>i</b>*<b>i</b> = -</i>1<i> , <b>i</b>*<b>k</b> = -<b>j</b> , <b>i</b>*<b>j</b> = <b>k</b> , <b>k</b>*<b>j</b> = -<b>i</b></i><br>
Now the Julia / Mandelbrot set corresponds to a hypervolume which will be some subset of the whole 4d space.<br>
<br>
One way of visualising this is simply to take a three dimensional slice from the space, ie. ignore one of the axes.  This is what I have done in the images and animation below.<br>
They are generated by shooting rays into the hyperspace until a point inside the Julia set is hit.  The collision point is refined to a certain accuracy and added to a depth map.  The depth map is used to generate a simple lighting effect.<br>
<br>
<h1>Images</h1>
<TABLE CELLSPACING=1 CELLPADDING=7>
<TR><TD WIDTH="50%" VALIGN="TOP">
<FONT SIZE=2><P ALIGN="CENTER"><IMG SRC="Image113.gif" WIDTH=316 HEIGHT=198></FONT></TD>
<TD WIDTH="50%" VALIGN="TOP">
<FONT SIZE=2><P ALIGN="CENTER"><IMG SRC="Image114.gif" WIDTH=316 HEIGHT=198></FONT></TD>
</TR>
<TR><TD WIDTH="50%" VALIGN="TOP">
<FONT SIZE=2><P ALIGN="CENTER"><IMG SRC="Image115.gif" WIDTH=320 HEIGHT=200></FONT></TD>
<TD WIDTH="50%" VALIGN="TOP">
<FONT SIZE=2><P ALIGN="CENTER"><IMG SRC="Image116.gif" WIDTH=320 HEIGHT=200></FONT></TD>
</TR>
<TR><TD WIDTH="50%" VALIGN="TOP">
<FONT SIZE=2><P ALIGN="CENTER"><IMG SRC="Image117.gif" WIDTH=320 HEIGHT=200></FONT></TD>
<TD WIDTH="50%" VALIGN="TOP">
<FONT SIZE=2><P ALIGN="CENTER"><IMG SRC="Image118.gif" WIDTH=320 HEIGHT=200></FONT><br>
This one by Jack</TD>
</TR>
</TABLE>
<br>
<h1>Animation</h1>
<img src="anim2.gif"><br>
<br>
What are we seeing in this animation?<br>
<br>
The camera is rotating about the origin.<br>
c is moving linearly in the complex plane.<br>
The maximum number of iteration is small (10).<br>
We are seeing a 3d slice of the Julia set through the k axis (the slice taken is moving linearly).<br>
<br>
<h1>Download</h1>
Ray-shooting method (generates frames for animation): [ <a href="jul4d.c">Source code</a> ] [ <a href="jul4d.zip">DOS executable</a> ]<br>
<br>
A boundary tracing method: [ <a href="bound.c">Source code</a> ] [ <a href="bound.zip">DOS executable</a> ]<br>
<br>
They were compiled under DJGPP using the Allegro graphics library.  They are in C++ and use [ <a href="joeylib.zip">joeylib</a> ].<br>
<br>
<hr>
<br>
Feedback welcomed: <a href="mailto:pclark@cs.bris.ac.uk">pclark@cs.bris.ac.uk</a><br>
<br>
<a href="htpp://www.cs.bris.ac.uk/~pclark">Home</a>
<FONT SIZE=2><P ALIGN="CENTER"></P>
<P>&nbsp;</P></FONT></BODY>
</HTML>
