class Correlator2d {
public:
  List<V2d> points; // Points from which to find a line of best fit
  List<float> weights; // Weightings of the points

  boolean made;
  // Redundant information (only exists after processing above)
  float bestang;
  List<int> pointskept;
  V2d centroid;
  float total;
  float besterr;

  Correlator2d() {
    made=false;
  }
  Correlator2d(List<V2d> pts) {
    points=pts;
    made=false;
  }

  void add(V2d v,float w) {
    points.add(v);
    weights.add(w);
    made=false;
  }
  void add(V2d v) {
    add(v,1.0);
  }
  void add(Pixel p) {
    add(V2d(p));
  }

  /* float total() {
    float total=0.0;
    for (int i=0;i<weights.len;i++)
      total+=weights.get(i);
    return total;
  }
  V2d centroid() {
    V2d cen=V2d(0,0);
    for (int i=0;i<points.len;i++)
      cen=cen+points.get(i);
    return cen/total();
  }
  void normalise() { // Normalises all points around centroid
    V2d cen=centroid();
    for (int i=0;i<points.len;i++)
      points.replace(i+1,points.get(i)-cen); // non-Java compensation
  } */

  void make() {
    if (!made)
      remake();
//    return bestang;
  }

  void addposs(List<int> n,List<List<int> > *poss,List<V2d> *cens,List<float> *
totals) {
    poss->add(n);
        float total=0;
        V2d cen=V2d(0,0);
        for (int j=0;j<n.len;j++) {
          int k=n.get(j);
          cen=cen*total;
          cen=cen+points.get(k)*weights.get(k);
          total+=weights.get(k);
          cen=cen/total;
        }
    totals->add(total);
    cens->add(cen);
  }

  void remake() {
    if (points.len<=2)
      myerror("Correlator2d: I do not correlate only 2 points!");
    int maxposs=400;
    // What is the minimum number of points?
    int min=(points.len+1)/2;
    if (min<3)
      min=3;
    int howmany=pow(2.0,points.len)*(1.0-(float)(min)/(float)points.len);
    if (howmany>maxposs) {
      printf("%i points means %i possibilities!\n",points.len,howmany);
      printf("I cannot do that many, so I won't be able to check all possibilit
ies.\n");
      for (;min<points.len-1;min++) {
        howmany=pow(2.0,points.len)*(1.0-(float)(min)/(float)points.len);
        if (howmany<=maxposs)
          break;
      }
      printf("Therefore ensuring min %i points, meaning %i possibilities.\n",mi
n,howmany);
    }
//    normalise();
    // Set up possible subsets of points and each ones centroid and total
    int cnt=0;
    List<List<int> > poss;
    List<V2d> cens;
    List<float> totals;

    List<int> ntmp;
    for (int i=0;i<points.len;i++)
      ntmp.add(i);
    addposs(ntmp,&poss,&cens,&totals);

    for (int i=0;i<points.len;i++) {
      int sofar=poss.len;
      for (int j=0;j<sofar;j++) {
        if (poss.get(j).len>min) {
          List<int> n;
          n.add(poss.get(j));
          int k=n.find(i);
          if (k<=0)
            myerror(Sformat("Didn't find %i in %s\n",i,n.toString()));
          n.removenum(k);
          addposs(n,&poss,&cens,&totals);
        }
      }
    }

/* Old way of building - overfills memory if points.len high
   regardless of min!
    for (int i=0;i<points.len;i++) {
      int sofar=poss.len;
      for (int j=0;j<sofar;j++) {
        // Leaving the original there,
        // create a new list which includes i
        List<int> n; // =List<int>(&poss.get(j));
        n.add(poss.get(j));
        n.add(i);
        poss.add(n);
if (n.len>=min)
  cnt++;
        // And a total for the new list
        float t=totals.get(j);
        t+=weights.get(i);
        totals.add(t);
        // And a centroid for the new list
        V2d c=cens.get(j);
        c = ( c*totals.get(j) + points.get(i)*weights.get(i) ) / totals.get(tot
als.len-1);
        cens.add(c);
      }
    } */

    /* Crap binary way - still takes too long!
    int totalposs=pow(2.0,points.len);
    for (int p=pow(2.0,min)-1;p<totalposs;p++) {
      int incnt=0;
      for (int i=0;i<points.len;i++)
        if (bingetbit(i,p)==1)
          incnt++;
      if (incnt>=min) {
        List<int> n;
        for (int i=0;i<points.len;i++)
          if (bingetbit(i,p)==1)
            n.add(i);
        poss.add(n);
        float total=0;
        V2d cen=V2d(0,0);
        for (int j=0;j<n.len;j++) {
          int k=n.num(j);
          cen=cen*total;
          cen=cen+points.get(k)*weights.get(k);
          total+=weights.get(k);
          cen=cen/total;
        }
        totals.add(total);
        cens.add(cen);
      }
    } */

    printf("%i points: checking %i=%i possible combinations\n",points.len,howma
ny,poss.len);
    // Find best angle
    // Setup
    bestang=-1.0;
    besterr=inf;
    int bestposs=-1;
//    List<float> err;
//    for (int i=0;i<points.len;i++)
//      err.add(-1);
    // Try all angles
    float angstep=pi/500.0;
    for (float ang=-pi;ang<=pi;ang+=angstep) {
      V2d perp=V2d::angle(ang).perp();
      // Find error for each point
/*      for (int i=0;i<points.len;i++) {
        V2d v=points.get(i);
        float e=mysquare(v.dot(perp))*weights.get(i);
        err.replace(i+1,e); // non-Java compensation
      } */
      // Find error-sum for each subset
      List<int> ps; // Declared outside because it may be efficient
      for (int i=0;i<poss.len;i++) {
        ps=poss.get(i);
        if (ps.len>=min) {
          float es=0.0;
          for (int j=0;j<ps.len;j++) {
            V2d v=points.get(ps.get(j))-cens.get(i);
            float e=mysquare(v.dot(perp))*weights.get(ps.get(j));
//            err.replace(i+1,e); // non-Java compensation
            es+=e; // err.get(ps.get(j));
          }
          es=es/totals.get(i)/(float)mysquare(ps.len);
          if (es<besterr) {
            bestang=ang;
            besterr=es;
            bestposs=i;
          }
        }
      }
    }
    printf("Best angle %f with %s\n",bestang,poss.get(bestposs).toString());
    pointskept=poss.get(bestposs);
    centroid=cens.get(bestposs);
    total=totals.get(bestposs);
    // return bestang;
    made=true;
  }

  float angle() {
    make();
    return bestang;
  }
  float error() {
    make();
    return besterr;
  }
  Line2d line() {
    make();
    V2d ori=V2d::angle(bestang);
    return Line2d(centroid,centroid+ori);
  }

  float crossesy() {
    make();
    Line2d l=line();
    Line2d x=Line2d(V2d(0,0),V2d(1,0));
    return l.intersect(x).x;
  }

  bool used(int i) { /* i from 1..size */
    return (pointskept.find(i-1)>0);
  }

  // See drawCorrelator2d(c) in region.c

};





Map2d<bool> drawCorrelator2d(Correlator2d cc) {
  Region r=Region(cc.points);
  int left=r.listleftmost()-5;
  int right=r.listrightmost()+5;
  int top=r.listtopmost()-5;
  int bottom=r.listbottommost()+5;
  if (bottom<0 && top<0)
    bottom=0;
  if (top>0 && bottom>0)
    top=0;
  int wid=right-left;
  int hei=bottom-top;
  int mw = ( wid>hei ? 400 : 400*wid/hei );
  int mh = ( wid>hei ? 400*hei/wid : 400 );
  Map2d<bool> m=Map2d<bool>(mw,mh,false);
  float symbolsize=5.0*(float)cc.points.len/(float)cc.total;
  for (int i=1;i<=cc.points.len;i++) {
    Pixel p=Pixel(m.width*(cc.points.num(i).x-left)/wid,
                  m.height*(cc.points.num(i).y-top)/hei);
    p.y=m.height-1-p.y; // invert height so y goes up!
    m.cross(p,symbolsize*cc.weights.num(i),true);
    //if (cc.pointskept.find(i-1)==0)
    if (!cc.used(i))
      m.circle(p,symbolsize*cc.weights.num(i),true);
  }
  V2d c=cc.centroid;
  V2d mc=V2d(m.width*(c.x-left)/wid,m.height*(c.y-top)/hei);
  mc.y=m.height-1-mc.y;
  V2d dir=V2d::angle(cc.bestang)*200;
  dir.y=-dir.y;
  m.line(mc-dir,mc+dir,true);
  return m;
}
