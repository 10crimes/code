head	1.1;
access
	joey
	root;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2000.07.21.03.45.45;	author joey;	state Exp;
branches;
next	;


desc
@autostart
@


1.1
log
@autochange
@
text
@class Plane {
public:
  V3d pos,nor;
  Plane() {
  }
  Plane(V3d a,V3d b) {
    pos=a; nor=b.normal();
  }
  float distto(V3d v) {
    return V3d::dot(v-pos,nor);
  }
  Viewpoint orientor() {
    // Returns an viewpoint to frame where plane is x,y plane
    return Viewpoint(pos,Ori::indir(nor));
  }
  Plane disorient(Viewpoint v) {
    return Plane(pos.disorient(v),nor.disorientate(v.ori));
  }
  Plane bring(Viewpoint v) {
    return disorient(v);
  }
  Plane orient(Viewpoint v) {
    return Plane(pos.orient(v),nor.orientate(v.ori));
  }
  Line2d intersection(Plane p) {
    Viewpoint v=orientor();
    Plane pp=bring(v);
    // Where does pp meet this plane?
    // (X-PPP).PPN=0
    // X=(x,y,0)
    // (x-pppx)*pppnx+(y-pppy)*pppny+pppz*pppnz=0
    // y=(-pppz*pppnz+(pppx-x)*pppnx)/pppny+pppy
    #define yfrom(i) (-pp.pos.z*pp.nor.z+(pp.pos.x-(i))*pp.nor.x)/pp.nor.y+pp.pos.y
    Line2d l=Line2d(V2d(-100.0,yfrom(-100.0)),V2d(100.0,yfrom(100.0)));
//    Line3d t=Line3d(l);
//    t=t.orient(v);
    return l;
  }
    
};
@
