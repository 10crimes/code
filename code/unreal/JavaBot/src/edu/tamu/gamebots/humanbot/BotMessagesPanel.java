/*
 * botMessagesPanel.java
 *
 * Created on February 19, 2002, 11:24 AM
 */

package edu.tamu.gamebots.humanbot;
import javax.swing.*;
import java.util.*;

/**
 *
 * @author  rtr7684
 */
public class BotMessagesPanel extends javax.swing.JPanel {
  
  Object[] values = {"RunTo", "TurnToRot", "TurnToLoc", "SetWalk", "Stop", "Jump", "Strafe", "Rotate", "Shoot", "ChangeWeapon", "StopShoot", "Say", "ArbitraryMessage"};
  HumanBot bot;
  
  /** Creates new form botMessagesPanel */
  public BotMessagesPanel() {
    initComponents();
  }
  
  public BotMessagesPanel(HumanBot HumanBot){
    bot = HumanBot;
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    jPanel1 = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    actionTypeComboBox = new JComboBox(values);
    jLabel2 = new javax.swing.JLabel();
    argumentsTextField = new javax.swing.JTextField();
    jPanel3 = new javax.swing.JPanel();
    instructionLabel = new javax.swing.JLabel();
    jButton1 = new javax.swing.JButton();

    setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

    jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

    jPanel2.setLayout(new java.awt.GridLayout(2, 2));

    jLabel1.setText("Action Type: ");
    jPanel2.add(jLabel1);

    actionTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        actionTypeComboBoxActionPerformed(evt);
      }
    });

    jPanel2.add(actionTypeComboBox);

    jLabel2.setText("Comma delimited arguments: ");
    jPanel2.add(jLabel2);

    jPanel2.add(argumentsTextField);

    jPanel1.add(jPanel2);

    instructionLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    instructionLabel.setText("RunTo takes either: String-objectID OR location doubles-x,y,z");
    jPanel3.add(instructionLabel);

    jPanel1.add(jPanel3);

    add(jPanel1);

    jButton1.setText("Send");
    jButton1.setMaximumSize(new java.awt.Dimension(63, 600));
    jButton1.setMinimumSize(new java.awt.Dimension(81, 27));
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    add(jButton1);

  }//GEN-END:initComponents
  
  private void actionTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionTypeComboBoxActionPerformed
    if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("RunTo")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("RunTo takes either: String-objectID OR location doubles-x,y,z");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("TurnToRot")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(3): pitch,yaw,roll");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("TurnToLoc")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(3): x,y,z");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("SetWalk")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(1): True or False to walk or run, respectively");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Stop")){
      argumentsTextField.setText("");
      argumentsTextField.setEditable(false);
      instructionLabel.setText("No Arguments");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Jump")){
      argumentsTextField.setText("");
      argumentsTextField.setEditable(false);
      instructionLabel.setText("No Arguments");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Strafe")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(4): x,y,z(target),objectIDToface");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Rotate")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(1): amount");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Shoot")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("No Arguments OR Arguments(5): x,y,z(target),targetID,boolean(altFire)");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("ChangeWeapon")){
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(1): weaponID ");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("StopShoot")){
      argumentsTextField.setText("");
      argumentsTextField.setEditable(false);
      instructionLabel.setText("No Arguments");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("ArbitraryMessage")){
      argumentsTextField.setText("");
      argumentsTextField.setEditable(true);
      instructionLabel.setText("ArbitraryMessage");
    }
    else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Say")){
      argumentsTextField.setText("");
      argumentsTextField.setEditable(true);
      instructionLabel.setText("Arguments(2) - Message, Global (True = said to both teams)");
    }
  }//GEN-LAST:event_actionTypeComboBoxActionPerformed
  
  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    if(bot != null){
      StringTokenizer strtok = new StringTokenizer(argumentsTextField.getText(),",");
      if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("RunTo")){
        if(strtok.countTokens() == 3){
          double x = Double.parseDouble(strtok.nextToken());
          double y = Double.parseDouble(strtok.nextToken());
          double z = Double.parseDouble(strtok.nextToken());
          bot.runTo(x,y,z);
        }
        else if(strtok.countTokens() == 1){
          String id = strtok.nextToken();
          bot.runTo(id);
        }
      }
      else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("TurnToRot")){
        if(strtok.countTokens() == 3){
          double pitch = Double.parseDouble(strtok.nextToken());
          double yaw = Double.parseDouble(strtok.nextToken());
          double roll = Double.parseDouble(strtok.nextToken());
          bot.turnTo(pitch,yaw,roll);
        }
      }
      else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("TurnToLoc")){
        if(strtok.countTokens() == 3){
          double x = Double.parseDouble(strtok.nextToken());
          double y = Double.parseDouble(strtok.nextToken());
          double z = Double.parseDouble(strtok.nextToken());
          bot.turnToLoc(x,y,z);
        }
      }
      else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("SetWalk")){
        if(strtok.countTokens() == 1){
          bot.setWalk(Boolean.getBoolean(strtok.nextToken()));
        }
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Stop")){
        bot.stop();
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Jump")){
        bot.jump();
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Strafe")){
        if(strtok.countTokens() == 4){
          double x = Double.parseDouble(strtok.nextToken());
          double y = Double.parseDouble(strtok.nextToken());
          double z = Double.parseDouble(strtok.nextToken());
          String targetID = strtok.nextToken();
          bot.strafe(x,y,z,targetID);
        }
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Rotate")){
        if(strtok.countTokens() == 1){
          bot.rotate(Double.parseDouble(strtok.nextToken()));
        }
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Shoot")){
        if(strtok.countTokens() == 5){
          double x = Double.parseDouble(strtok.nextToken());
          double y = Double.parseDouble(strtok.nextToken());
          double z = Double.parseDouble(strtok.nextToken());
          String targetID = strtok.nextToken();
          boolean altFire = Boolean.valueOf(strtok.nextToken().trim()).booleanValue();
          bot.shoot(x,y,z,targetID,altFire);
        }
        else if(strtok.countTokens() == 0){
          bot.shoot();
        }
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("ChangeWeapon")){
        if(strtok.countTokens() == 1){
          bot.changeWeapon(strtok.nextToken());
        }
      }else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("StopShoot")){
          bot.stopShoot();
      }
      else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("ArbitraryMessage")){
        bot.getClient().sendMessage(argumentsTextField.getText());
      }
      else if(((String)actionTypeComboBox.getSelectedItem()).equalsIgnoreCase("Say")){
        if(strtok.countTokens() == 2){
          bot.say(strtok.nextToken(), Boolean.valueOf(strtok.nextToken().trim()).booleanValue());
        }
      }
    }
  }//GEN-LAST:event_jButton1ActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JButton jButton1;
  private javax.swing.JTextField argumentsTextField;
  private javax.swing.JComboBox actionTypeComboBox;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel instructionLabel;
  // End of variables declaration//GEN-END:variables
  
}
