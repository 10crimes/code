// The real solution to getting Resize to work properly, is of course to send it client side.

// TODO: When we resize to say 0.4, dodge trajectories seem good, but at the start we make an obvious jerk upwards.  We could lower(raise for +scale) the player's location when we first detect their dodge.
// TODO: Too noisy in broadcast messages.  Turn bLogging off by default!
// TODO: after mid-game resize, in-hand weapons look wrong, and projectile velocities remain unchanged.
// TODO: Jump boot heights scale badly, when we make players small, they bootjump less high than they should.

// Known problems with other mods:
// DoubleJump loses strength when scaling up, probably because the thresholds stay low.  Probably when scaling down, it will become over-powerful.

// vim: tabstop=2 shiftwidth=2 expandtab filetype=uc

// TODO: A mutator which uses the resize library.
//       On player input (default when they crouch), shrink the player.  Allow small or fast shrinking according to how they hold/guesture the crouch (maybe increase speed of shrinking according to jump or fall or downward velocity?!).

#ifndef CLASS_NAME
#define CLASS_NAME ResizeTest
#endif

class CLASS_NAME extends Mutator config(Resize);

/*
// NOTE: Since this is a mutator, I failed to get any code executing on the client in online play, but we are trying to work without it.
// FIXED (mostly): Splash damage needs to be scaled up/down, but HurtRadius() is sometimes called with a FIXED value. :S
// FIXED: Sometimes projectiles move too slow (sometimes they look slow but are actually standing STILL!).
// FIXED: Dodge is too high and long, jump is too high!
// FIXED: When making player large, he bounces on the floor.  =(
// FIXED: The first flakslug thrown looks like it's going on the default trajectory, but explodes at correct point.
// FIXED: Some shock balls seem to travel too fast (or slow): to reproduce, shoot secondary then primary then secondary - the latter will overtake the foremost!  or hold flak secondary fire to see the same problem there.  hold shock secondary for the same
// FIXED: Projectiles (well shock at least) do not come out of what looks like the correct point - shock balls appear higher than primaries, making flat moving combos harder.  mm not sure if i fixed that, but when scaling up, flak slugs do seem to leave the hand a bit low
// FIXED: Grenades don't look like they have changed size (or do they?); grenades seem to explode not where they appear to be!
// FIXED: Shock-balls seem harder to hit (well collision radius has been reduced, along with DrawScale and speed).
// FIXED: No really, some stand-combos can fail!  try aiming down a little to reproduce this.
// Maybe fixed: Shock-combo explosions look a bit funny when scaled, because the 2D sprite is not scaled.
// FIXED: Scaled-down players slide down slopes. :(
// OLD BUGS TO TEST: Tested Deck-16][ single-player: player was always bouncing on the floor; bio primary fine but secondary fires too far; headshots fine; both ripper shots seemed fine; pulse primary fine, secondary is long and broken; minigun bullets look too fast imo.

// FIXED: Some actors don't start at their default DrawScale (e.g. the curtain meshes on Noggins2ndMap), which breaks bNew detection.
//       Ideally we would scale things only ONCE when they are first created, and not relative to their default.DrawScale, but relative to their current scale.
//       Maybe that's why bots appear a little smaller than my eye height suggests they should.
// FIXED: Weapons in other player's hands look the default size; weapons in your hand are over-exaggerated!

// FIXED (I was using bNew on PlayerPawns): JumpZ always ends up at 357.5 - I can't set my own value!  But I can do it with ActorEditor.  :o
// DONE: We changed JumpZ so that the player goes higher (or lower) when scaled up (or down).
//       But now we must change gravity, so they spend the correct amount of time in the air ... and this will change everything else, e.g. flakslugs.

// FIXED: gravity and JumpZ!

// OLD BUG TO TEST: When testing MiniPureAction offline with scale=0.5, bot jumped way too high, hurt himself with his own combo, bounced off my combo too much, and the flag also bounced too far when it was dropped.

// OLD BUG TO TEST: Try scaling to 0.25 - you will see that when throwing TL, dodging or jumping, they start at *normal* height, not from low where they should.
//           But at 0.5 it all seems fine, so maybe we're just getting *too* small, and the engine is refusing to spawn things so close to the ground?

// Since v11:

// FIXED: bots still seem to be jumping too high

// BUG: players can walk up steps which they shouldn't be able to with their new scale

// DONE: ok so we are scaling projectiles fine, but we should also scale the final explosions!

// OLD BUG TO TEST: PlayerPawn.ThrowWeapon() gives the weapon a hard-coded velocity, so we must detect when a weapon is thrown during Tick() and slow it down.  :|

// FIXED: CollisionRadius of projectiles needs to be set, but we cannot set default ;_;
// FIXED: some shock balls come out at the right height; some don't

// TODO: There is at least one case where bots can jump with more velocity than JumpZ (JumpOffPawn()).
//       We may need to detect when a bot starts a jump, and check its velocity.
//       Fixed?

*/

// BUGS TODO:
// I picked up a weapon with the wrong in-hand drawscale.
// Thrown weapons fly at wrong speed.
// Fall damage is still not entirely correct.
// When scaling up, bots are hard to hit, and even when you do splash something close to them, little damage is done.
// Can we change Epic's default splash damage radius?  What about fall damage threshold?  (We could force our own for up-scale, but for down-scale it would be good to make fall damage threshold *more* sensitive.)
// Flakslugs fly too far, because we changed the gravity.  We need to change their initial Y velocity.
// BUG: TranslocTarget *looks* like it is moving too fast, although it isn't.  It also looks too small.
// Hammerjumps on Bleak-DoubleSize were not working.
// This problem with HandleNewActor not getting called on the player when ATB switches them is nasty.
// Although we've moved ScaleCollisionCylinder into Tick, we can't move ScalePawn, and if we don't, then sometimes the player's EyeHeight looks wrong (on Bleak-DoubleSize anyway).  Can we fix NewActor detection so that ATB doesn't break it?  Can we also force ATB to always switch us, to make this easier to test + debug.
// Dodge fix does not appear to be working on Bleak-DoubleSize.  Either because ATB is breaking my Player, or because we get to the Player after he's already lost some Z velocity.  May also be due to my assumed DeltaTime not being as large as the DeltaTime that Tick is logging. ^^
// Try to fix dodge by tweaking gravity appropriately.
// If I scale high and low a few times, Flags wander off somewhere (usually lower).

// CONSIDER:
// camera distance in behindview needs to be scaled also.  this may require code running on the client
// Consider: does the TranslocatorTarget's light need to be moved down closer to the TL when scaling down etc.?

// Dodge method should differ depending on whether CHANGE_GRAVITY is enabled or not.
// Projectile y-velocity methods should differ depending on whether CHANGE_GRAVITY is enabled or not.

// TODO: In PreBeginPlay(), check if Mutator is in chain, and add it if not.

// MAIN TODO:
// Gravity still doesn't feel right.
// Dropped + pickup up weapons appear too large in 1st person view.
// Test at wider ranges e.g. 0.1 and 3.0, to see how they feel.  Testing only 0.5 and 2.0 might not be helping.  :P

// TODO: flak projectiles are scaling fine, but rockets projectiles are not.
//       mmm very occasionally rocket projectiles do
//       RocketMk2 and UT_Grenade have default DrawScale=0.02 O_o, as well as AnimSequences.
//       flakslug has bNetTemporary=True

// TODO: air control feels weak when players are scaled up

// TODO: first flak primary projectiles are sometimes slow

// TODO: eye height does not match when we look at bots.

// BUG TODO: when I switched size to 100 (twice to save it) and then back to 200, I found I had lost my tlx, until I respawned.

// BUG: If we keep doing !resize 1 and !resize 2 then the flag moves upwards off the ground
// BUG: Weapons do not re-size mid-game

// BUG: Current incarnation appears to make shock balls travel 4x as fast instead of 2x as fast at 200, and pickups are still small!

// === START pre-compile config ===
// #define DEBUG
#define CHECK_DODGE
#define CHANGE_GRAVITY
// #define LOG_TICKS
// ==== END pre-compile config ====

#ifdef CHECK_DODGE
#define GLOBAL_DELTATIME
#endif
//// Despite my maths saying it should, this didn't seem more realistic:
#ifdef CHANGE_GRAVITY
// #define JumpScale (Sqrt(Scale))
#define JumpScale (Scale)
#else
#define JumpScale (Scale)
#endif
// #define JumpScale 1

// #define REPLACE_HAMMER

// var config String AllowedSizes;
var() config bool bAllowPlayersToResize;
var() config float Scale;
var() config bool bResizeEnabled; // This changes depending on whether Scale=100.  It is not an admin option!  Admins should see bAllowPlayersToResize.

#ifdef CHECK_DODGE
// var EDodgeDir LastDodgeState[64];
var String LastDodgeState[64];
#endif

#ifdef GLOBAL_DELTATIME
var float DeltaTime;
#endif
// var String averageTickrate;
// var long ticksCounted;

// var String WeaponsAlreadyHandled;

var String LastNewActor; // I considered using Actor instead of String, but would it become None if Actor is Destroy()ed?

var String ProjectilesAlreadyHandled;

// Store the real default projectile properties:
var config String StoredPropName[64];
var config String StoredPropValue[64];

defaultproperties {
  // AllowedSizes="0.5,0.75,1.25,1.5,2.0"
  // Scale=2.00
  bResizeEnabled=False
  Scale=1.0
  bAllowPlayersToResize=True
  // Scale=0.5
  /*
    // Attempt to get simulation working:
    bAlwaysRelevant=true
    // bNoDelete=True // Stopped mutator from spawning
    // bStasis=True // Stopped mutator from spawning
    bStatic=False
    NetPriority=3.0
    NetUpdateFrequency=10
    RemoteRole=ROLE_SimulatedProxy
  */
  // #ifdef REPLACE_HAMMER
  // DefaultWeapon=class'ResizeHammer'
  // #endif
}

#ifdef DEBUG
function DebugLog(String msg) {
  // Log("<"$Role$"> "$msg);
  Log("[ResizeTest] "$msg);
}
function DebugShout(String msg) {
  DebugLog(msg);
  BroadcastMessage("[ResizeTest] "$msg);
}
function BroadcastMessageAndLog(string Msg) {
   DebugLog("BroadcastMessage(\""$Msg$"\")");
   BroadcastMessage(Msg);
}
#else
function DebugLog(String msg) { }
function DebugShout(String msg) { }
#define BroadcastMessageAndLog(X) BroadcastMessage(X)
#endif

function PreBeginPlay() {
  Super.PreBeginPlay();

  // DEBUGGING info:
  DebugShout("At start of play, ProjectilesAlreadyHandled = "$ProjectilesAlreadyHandled);
  DebugShout("At start of play, default.ProjectilesAlreadyHandled = "$default.ProjectilesAlreadyHandled);
  DebugShout("At start of play, ShockProj properties Speed="$(class'ShockProj'.default.Speed)$" MaxSpeed="$(class'ShockProj'.default.MaxSpeed)$".");

  // TODO: remove this for official release
  // for development, auto-set scale on my test maps
  // Regardless of whether I put it in PreBeginPlay() or PostBeginPlay(), the new value of Scale became overwritten until I did SaveConfig().
  if (InStr(""$Self,"CTF-PureAction")>=0) {
    Scale = 1.0; bResizeEnabled=False; SaveConfig();
  }
  if (InStr(""$Self,"CTF-Bleak")>=0) {
    Scale = 1.0; bResizeEnabled=False; SaveConfig();
  }
  if (InStr(""$Self,"HalfSize")>=0) {
    Scale = 0.5; bResizeEnabled=True; SaveConfig();
  }
  if (InStr(""$Self,"DoubleSize")>=0) {
    Scale = 2.0; bResizeEnabled=True; SaveConfig();
  }
  DebugShout(Self$".PreBeginPlay() Scale="$Scale);

  Enable('Tick');
  Level.Game.RegisterMessageMutator(Self);
  Level.Game.RegisterDamageMutator(Self);
  if (Scale == 100)
    bResizeEnabled=False;
  if (!bResizeEnabled)
    return;
  ScaleAll();
}

function PostBeginPlay() {
  Super.PreBeginPlay();
  if (!bResizeEnabled)
    return;
  Enable('Tick');
  ScaleAll();
}

function Tick(float DeltaTimeLoc) {
  // Super.Tick(DeltaTimeLoc);
  if (!bResizeEnabled)
    return;
  #ifdef GLOBAL_DELTATIME
  DeltaTime = DeltaTimeLoc;
  #endif
  ScaleAll(); // a freshly thrown translocator or weapon, or new projectile, should be rescaled ASAP, so we do some shrinking every tick!
  // We could move some things out of Tick, but we should definitely keep checks on PlayerDodge, and maybe creation of new projectiles, as frequent as possible!
  Super.Tick(DeltaTimeLoc);
  #ifdef LOG_TICKS
  if (FRand()>0.99) {
    DebugLog("Tick() DeltaTime="$DeltaTimeLoc);
  }
  #endif
}

function ModifyPlayer(Pawn p) {
  #ifdef REPLACE_HAMMER
    local Inventory Inv;
    local Weapon w;
    Inv = P.FindInventoryType(class'ResizeHammer');
    if (Inv == None) {
      w = Spawn(class'ResizeHammer',p);
      w.bHeldItem=True;
      w.RespawnTime=0;
      // w.bRotatingPickup = False; // otherwise it appears at the spawnpoint!  This did not work.  Maybe we are given the weapon elsewhere.
      w.Instigator = P;
      w.BecomeItem();
      P.AddInventory(w);
      // w.GiveTo(P);
      w.GiveAmmo(P);
      w.SetSwitchPriority(P);
      w.WeaponSet(P);
      DebugLog("ModifyPlayer("$p.getHumanName()$"): Giving weapon: "$w);
    }
  #endif

  Super.ModifyPlayer(p);
  if (!bResizeEnabled)
    return;
  if (PlayerPawn(p)!=None && p.PlayerReplicationInfo.Deaths == 0) {
    p.ClientMessage("Your size is "$Int(Scale*100)$"%");
    p.ClientMessage("Map size is "$Int((1.0/Scale)*100)$"%");
    p.ClientMessage("To restore defaults, type: !resize 100");
    // if (PlayerPawn(p).bAdmin) {
      // PlayerPawn(p).ClientMessage("You can type: !resize 75");
    // }
  }
  p.JumpZ = 325*JumpScale; // I hope this will stop me jumping too high when I spawn, and prevent the JUMP-BUG reports.
}

function ScaleAll() {
  local Actor a;
  local bool pastLast;
  local Actor LastActorInList;

  if (!bResizeEnabled)
    return;

  // Let's do a test.  Are new Actors always added to the end of the list?
  // Nice, it seems so!  We can use this to fiddle with only newly spawned Actors!
  pastLast = False;
  foreach AllActors(class'Actor',a) {
    if (pastLast) {
      HandleNewActor(a);
    }
    if ((""$a) == LastNewActor) {
      pastLast = True;
    }
    LastActorInList = a;
  }
  LastNewActor = ""$LastActorInList; // BUG TODO: What if this actor gets destroyed?

  // Maybe it's like a stack of actors.
  // Anyway, any number of them might get destroyed by the time we next check.
  // Maybe new ones will always appear on the top though.

  foreach AllActors(class'Actor',a) {
    ScaleActor(a);
  }

}

function ScaleActor(Actor a) {
  // local bool bNew;

  if (!bResizeEnabled)
    return;

  // DONE: We should not scale brush-style actors like BlockAll.

  // TODO: We could try moving these calls into HandleNewActor().

  if (a.IsA('Brush') && a.IsA('Mover')) {
    return;
  }

  // if (a.DrawScale == a.default.DrawScale) {
    // bNew = true;
  // }

  if (a.IsA('Pawn')) {
    #ifdef CHECK_DODGE
    CheckPlayerStateForDodge(Pawn(a));
    #endif

    // TODO! This bit goes mad if we re-scale mid-game!
    // TODO: If we change the scale mid-game, something here causes a nasty runaway CPU loop!
    // We get CTF-Bleak-DoubleSize.PlayerStart16 Player start not useable!!!

    // ScalePawn(Pawn(a)); // Calling this repeatedly is what causes projectiles to leave the weapon at the wrong height.
    ScaleCollisionCylinder(a); // But we must call this, or Player can sometimes end up running around with feet in the floor.  (If HandleNewActor() was not successfully called on that player.)

    if (Pawn(a).JumpZ != 325*JumpScale) {
      DebugShout("JUMP-BUG: "$a.getHumanName()$".JumpZ != "$325*JumpScale);
    }

    Pawn(a).JumpZ = 325*JumpScale; // Best to do it here!  If we do this in HandleNewActor(), it doesn't work.

  }

  if (a.IsA('Inventory')) {
    // a.DrawScale = a.default.DrawScale * Scale;
    Inventory(a).ThirdPersonScale = Inventory(a).default.ThirdPersonScale * Scale;
    Inventory(a).PickupViewScale = Inventory(a).default.PickupViewScale * Scale;
    Inventory(a).PlayerViewScale = Inventory(a).default.PlayerViewScale / Scale;
  }

  // if (a.IsA('Translocator')) {
    // Translocator(a).TossForce = Translocator(a).default.TossForce * Scale;
    // Translocator(a).MaxTossForce = Translocator(a).default.MaxTossForce * Scale;
  // }

}

function HandleNewActor(Actor a) {
  if (!bResizeEnabled)
    return;
  // We try to avoid using this method as much as possible.
  // Since sometimes the new Actor has already been replicated before we can get to it (NetTag > 0).
  // In which case, the client will not see the changes we make here until later (or not at all - e.g. projectile speeds).

  // Also, it's not guaranteed to see new actors, due to the dodgy detection algorithm.

  // But if the Actor never gets passed through AlwaysKeep(),
  // and setting its default values fails,
  // it seems this is our last resort.

  if (a.IsA('ShockProj')) { // just to reduce spam while i watch these
  if (a.NetTag>0) {
    DebugShout("LATE! Handling New Actor: "$a$" [NetTag="$a.NetTag$"]");
  } else {
    DebugLog("Handling New Actor: "$a$" [NetTag="$a.NetTag$"]");
  }
  }

  // TranslocatorTarget does not pass through AlwaysKeep(), and setting its default DrawScale didn't work.
  // if (a.IsA('TranslocatorTarget')) {
    // DebugLog("Scaling TT "$a$" from "$a.DrawScale$"");
    // a.DrawScale = a.DrawScale * Scale; // BUG: but it's becoming too small!
    // This is getting done already when scaling Projectile.
  // }

  // Trying to detect explosions from scaled weapons, e.g. shock-combo explosion, rockets hitting wall/floor...
  if (a.IsA('Effects')) {
    a.DrawScale = a.DrawScale * Scale;
  }
  // We could try making a list of all such weapon-hit effects, and changing their default scale.
  // This is likely to detect and scale some map-embedded effects, which would not look right.

  if (a.IsA('Projectile')) {
    // I'm not sure whether this is needed or not.
    // The collision cylinder of Projectiles used to be un-scaled,
    // but maybe somehow they are auto-scaled since we changed each Projectile's default.DrawScale.
    // ScaleCollisionCylinder(a);
    // Conclusion: it's definitely not needed, but I don't know why.
    // If we do scale the collision cylinder, shock balls become much harder to hit.
    // DebugLog("Projectile "$a$" has CC ("$a.CollisionRadius$","$a.CollisionHeight$")");
    // DebugShout("Scaling projectile: "$a);
    ScaleCollisionCylinder(a);
    // We failed to scale DrawScale in ScaleProjectileClass().
    a.DrawScale = a.DrawScale * Scale;
    // if (a.IsA('RocketMk2') || a.IsA('UT_Grenade')) {
      // a.DrawScale = a.default.DrawScale * Scale;
      // // a.bNetTemporary = True; // Can't assign Const variables
    // }
    // a.ReplicateEverythingNowFFS()! ;)
  }

  //// Sometimes this doesn't get called!  So better not to do it at all.
  //// I think it doesn't get called if AutoTeamBalance swaps the player to another team, but I'm not sure.
  // BUT if we don't call it, then we can end up running about with our feet in the floor!
  // BUT still it sometimes doesn't get called, so I'm trying it in Tick()...
  if (a.IsA('Pawn')) {
    // ScalePawn(Pawn(a)); // If we do this in ScaleActor() then projectiles leave the weapon at the wrong height.
    // ScaleCollisionCylinder(a);
    DebugLog("HandleNewActor() New Pawn "$a);
  }

  if ((a.IsA('CTFFlag') /*|| a.IsA('FlagBase') <-- never happens */) /*&& a.DrawScale == a.default.DrawScale <-- unreliable! */) {
    // These changes were in FlagBase, but did not affect dropped flags.
    DebugLog("Scaling CTFFlag: "$a$" @"$a.Location$" (DrawScale="$a.DrawScale$" default.DrawScale="$a.default.DrawScale$")");
    // a.SetLocation(a.Location + (-84 + 84*Scale) * Vect(0,0,1));
    ScaleCollisionCylinder(a);
    a.DrawScale = a.DrawScale * Scale; // Otherwise it looks too big when held by player.
    // a.DrawScale = a.default.DrawScale * Scale; // Need default if we scale down then up mid-game.
    // DebuLog("HandleNewActor() Scaled "$a$" to "$Scale);
  }

}

function ScalePawn(Pawn p) {
  ScaleCollisionCylinder(p);
  p.DrawScale = p.default.DrawScale * Scale;
  p.GroundSpeed = p.default.GroundSpeed * Scale;
  // Changed nothing:
  p.BaseEyeHeight = p.default.BaseEyeHeight * Scale;
  p.EyeHeight = p.default.EyeHeight * Scale;
  // p.BaseEyeHeight = p.default.BaseEyeHeight * Scale * Scale;
  // p.EyeHeight = p.default.EyeHeight * Scale * Scale;
}

function CloserToFloor(Actor Other) {
  // Other.SetLocation(Other.Location + (-24 + 24*Scale) * Vect(0,0,1));
  Other.SetPhysics(PHYS_Falling);
}

// I think every actor goes through all 3 of these functions (AlwaysKeep,IsRelevant,CheckReplacement) when they are spawned, except for Projectiles and Effects.

function bool AlwaysKeep(Actor Other) {

  // TODO: we don't have to use default any more, since this method should only be called once for each new actor :)

  local bool doneSomething;
  local bool ignore;

  if (bResizeEnabled) {

    // DebugLog("AlwaysKeep("$Other$") "$Other.Location$" [NetTag="$Other.NetTag$"]");

    if (Other.DrawScale != Other.default.DrawScale) {
      DebugLog("Warning: "$Other$" spawned non-default DrawScale="$Other.DrawScale$" ("$Other.default.DrawScale$" default), it may not resize well.");
    }
    // if (Other.DrawScale != 1.0) {
      // DebugLog("Interesting: "$Other$" spawned with DrawScale="$Other.DrawScale);
    // }
    //// On Bleak, this showed up a few LightBoxes, both Flags, and the Keg.

    // Other Actor properties worth scaling:
    Other.PrePivot = Other.PrePivot * Scale;
    Other.VisibilityRadius = Other.VisibilityRadius * Scale;
    Other.VisibilityHeight = Other.VisibilityHeight * Scale;
    Other.SpriteProjForward = Other.SpriteProjForward * Scale;
    // TODO: sound changes are good for weapons, but should not apply to environment (map) sounds
    Other.SoundRadius = Other.SoundRadius * Scale;
    Other.SoundVolume = Other.SoundVolume / Scale; // don't make the sound quieter, just more localised!
    Other.TransientSoundRadius = Other.TransientSoundRadius * Scale;
    Other.TransientSoundVolume = Other.TransientSoundVolume / Scale; // don't make the sound quieter, just more localised!
    // BUG: I noticed when I picked up a dropped enemy flag, the sirens sound was too quiet,
    // presumably because this is a non-localised sound with no position.

    if (Other.IsA('Pawn')) {
      ScalePawn(Pawn(Other));
      Pawn(Other).JumpZ = 325*JumpScale;
      doneSomething = True;
    }

    if (Other.IsA('Inventory')) { // || Other.IsA('Pickup') || Other.IsA('Weapon')
      //// These didn't work here, so moved to Tick().
      // Inventory(Other).ThirdPersonScale = Inventory(Other).default.ThirdPersonScale * Scale;
      // Inventory(Other).PickupViewScale = Inventory(Other).default.PickupViewScale * Scale;
      // Other.default.DrawScale = Scale;
      // Other.DrawScale = Scale;
      // Inventory(Other).DrawScale = Inventory(Other).default.DrawScale * Scale;
      // Inventory(Other).PlayerViewScale = Inventory(Other).default.PlayerViewScale;
      ScaleCollisionCylinder(Other);
      CloserToFloor(Other);
      doneSomething = True;
    }

    // Change CollisionRadius/Height, and move up/down correspondingly
    // Flags require some special changes
    // TODO: this isn't scaling the flags, move back into Tick().
    if (Other.IsA('FlagBase') /*|| Other.IsA('CTFFlag')*/) {
      DebugLog("Scaling FlagBase @"$Other.Location$" DrawScale="$Other.DrawScale$" default.DrawScale="$Other.default.DrawScale); // this log showed us that default.DrawScale == Epic's default, not the map's default
      // The default flag has DrawScale 1.3 and centre at about 84 units above the floor, so we move its centre to compensate for its new DrawScale.
      ScaleCollisionCylinder(Other); // We must scale the collision cylinder before we move it!
      Other.SetLocation(Other.Location + (-84 + 84*Scale) * Other.DrawScale/1.3 * Vect(0,0,1)); // makes no difference
      // Other.DrawScale = Other.DrawScale * Scale;
      Other.DrawScale = Other.default.DrawScale * Scale;
      DebugLog("FlagBase now @"$Other.Location$" DrawScale="$Other.DrawScale);
      doneSomething = True;
    }

    if (Other.IsA('ZoneInfo') || Other.IsA('LevelInfo')) {
      #ifdef CHANGE_GRAVITY
      // if (Scale>1) {
        // ZoneInfo(Other).ZoneGravity = ZoneInfo(Other).default.ZoneGravity * Sqrt(Scale); // Sqrt feels much better when scaling up, but not when scaling down.  Well ok it still feels a *little* lowgrav... somewhere between Sqrt and 1* might be best.
      // } else {
        // ZoneInfo(Other).ZoneGravity = ZoneInfo(Other).default.ZoneGravity * Scale; // Feels about right, except dodges are too short.
      // }
      ZoneInfo(Other).ZoneGravity = ZoneInfo(Other).default.ZoneGravity * Scale; // Feels about right, except dodges are too short.
      #endif
      doneSomething = True;
    }

    if (Other.IsA('PlayerStart')) {
      CloserToFloor(Other);
      doneSomething = True;
    }

    if (Other.IsA('PathNode') || Other.IsA('LiftExit')) {
      // CloserToFloor(Other);
      // doneSomething = True;
      ignore = True;
    }

    if (Other.IsA('InventorySpot')) {
      Other.DrawScale = Other.DrawScale * Scale;
      CloserToFloor(Other);
      doneSomething = True;
    }

    if (Other.IsA('Weapon')) {

      ScaleProjectileClass(Weapon(Other).ProjectileClass);
      ScaleProjectileClass(Weapon(Other).AltProjectileClass);

      // Which setting really affects the speed?  The speed in the weapon or in the projectile?
      Weapon(Other).ProjectileSpeed = Weapon(Other).ProjectileSpeed * Scale;
      Weapon(Other).AltProjectileSpeed = Weapon(Other).AltProjectileSpeed * Scale;

      Other.DrawScale = Other.default.DrawScale /* * Scale */;

      if (Other.IsA('Translocator')) {
        DebugLog("Fixing tossforce of "$Other);
        Translocator(Other).TossForce = Translocator(Other).TossForce * Scale;
        Translocator(Other).MaxTossForce = Translocator(Other).MaxTossForce * Scale;
      }

      doneSomething = True;
    }

    if (Other.IsA('Light') || Other.IsA('locationid') || Other.IsA('BlockAll')
        || Other.IsA('Mover') || Other.IsA('LightBox')) {
      ignore = True; // Just to quieten the reporter
    }

    if (ignore) {
      // DebugLog("Ignored "$Other);
    } else if (doneSomething) {
      // DebugLog("Scaled "$Other);
    } else {
      DebugShout("AlwaysKeep() DID NOTHING FOR "$Other);
    }

    // DebugLog("AlwaysKeep("$Other$") ENDED");

  }
  return Super.AlwaysKeep(Other);

}

// function bool IsRelevant(Actor Other, out byte bSuperRelevant) {
  // DebugLog("IsRelevant("$Other$") [NetTag="$Other.NetTag$"]");
  // return Super.IsRelevant(Other,bSuperRelevant);
// }

function bool CheckReplacement(Actor Other, out byte bSuperRelevant) {
  // DebugLog("CheckReplacement("$Other$") [NetTag="$Other.NetTag$"]");
  #ifdef REPLACE_HAMMER
  if (Other.Class==class'ImpactHammer' && !Other.IsA('ResizeHammer')) {
    //// TODO: Even commented out, this still causes the errors with Pure: ST_Mutator DM-Liandri.ST_Mutator0 (F_nction PureS
    ////       But at least it doesn't leave pickups sitting around.
    ReplaceWith(Other,String(class'ResizeHammer')); // This was supposed to replace the hammer but it only removes it!
    DebugLog("CheckReplacement("$Other$") -> ResizeHammer");
    return False;
  }
  #endif
  return Super.CheckReplacement(Other,bSuperRelevant);
}

function MutatorTakeDamage( out int ActualDamage, Pawn Victim, Pawn InstigatedBy, out Vector HitLocation, out Vector Momentum, name DamageType) {
  local float HitDistance, HitRadius, HitHeight;
  if (bResizeEnabled) {
    HitDistance = VSize(HitLocation - Victim.Location);
    DebugLog("Damage "$DamageType$" @ "$HitDistance$" ["$Victim.CollisionRadius$","$Victim.CollisionHeight$"]");
    if (DamageType == 'impact') {
      // DebugShout("Scaling "$DamageType$" boost @ "$HitDistance);
      // if (Scale>1) {
        Momentum = Momentum * Scale; // to compensate for splash difference
      // }
      // Do nothing
      DebugShout("IMPACT damage "$ActualDamage$" at ("$ ((HitLocation.X-Victim.Location.X)**2+(HitLocation.Y-Victim.Location.Y)**2)**0.5 $","$ HitLocation.Z-Victim.Location.Z $")");
    } else if (DamageType == 'Fell') {
      // Since we change gravity, we must change fall damage also.
      #ifdef CHANGE_GRAVITY
      ActualDamage = ActualDamage / Scale;
      DebugShout("FALL damage "$ActualDamage);
      // At Scale 2.0 on Bleak, I get damage 10/11 (after division) for dropping one level - I should get 0.
      #endif
    } else {
    // if (DamageType == 'jolted' || DamageType == 'RocketDeath' || DamageType=='FlakDeath' || DamageType=='GrenadeDeath' || DamageType=='RipperAltDeath') {
      // BUG TODO: still haven't properly detected whether damage is splash or not
      // both jolted and RocketDeath count for primary and secondary shots
      // impact *damage* should never be scaled
      // We could check the distance of the HitLocation from the Victim, to see if it is within his collision cylinder or not.  But I'm not sure this is entirely accurate.
      // NOTE:
      // When scaled at 0.5:
      //   shock-primary had HitDistance ~9
      //   shock-secondary had HitDistance ~14
      //   bot's collision radius was ~8
      // SO: i check HitDistance < Victim.CollisionRadius * 1.25 which seems to work :P
      // But, when scaled at 2.0:
      //   bot's radius is 34, height 78
      //   shooting him with sniper was registerings hits at HitDistance 26.34 and 50.50
      // if (HitDistance > Victim.CollisionRadius*1.25 /*&& HitDistance > Victim.CollisionHeight*/) {
      HitRadius = ((HitLocation.X-Victim.Location.X)**2+(HitLocation.Y-Victim.Location.Y)**2)**0.5;
      HitHeight = HitLocation.Z-Victim.Location.Z;
      // DebugShout("("$HitRadius$","$HitHeight$") ["$Victim.CollisionRadius$","$Victim.CollisionHeight$"]");
      if (Abs(HitHeight) > Victim.CollisionHeight || HitRadius > Victim.CollisionRadius) {
        // Gets called sometimes even on a direct hit. :(
        // Seems to be outside the Victim, so it's splash damage, so scale it:
        // DebugShout("Scaling splash damage "$DamageType$" on "$Victim.getHumanName()$" ("$HitDistance$")");
        ActualDamage = ActualDamage * Scale;
        // Check with scale=2.0 that 1 primary shock deals correct damage (and does not kill)!
        Momentum = Momentum * Scale; // to compensate for splash reduction
        DebugShout("SPLASH damage "$DamageType$" "$InstigatedBy.getHumanName()$"->"$Victim.getHumanName()$" "$ActualDamage$" ("$Int(HitRadius)$","$Int(HitHeight)$") > ["$Int(Victim.CollisionRadius)$","$Int(Victim.CollisionHeight)$"]");
      } else {
        DebugShout("DIRECT hit "$DamageType$" "$InstigatedBy.getHumanName()$"->"$Victim.getHumanName()$" "$ActualDamage$" ("$Int(HitRadius)$","$Int(HitHeight)$") <= ["$Int(Victim.CollisionRadius)$","$Int(Victim.CollisionHeight)$"]");
      }
      Momentum = Momentum * Scale; // to compensate for scale change
      #ifdef CHANGE_GRAVITY
      // Momentum.Z = Momentum.Z * Scale; // to compensate for gravity change :: TODO: we should do this for everything which spawns or is thrown, i.e. flag when dropped, weapon when thrown
      #endif
    // }
    // BUG UNFIXABLE: ofc if the engine already thinks the damage was out of range, we can't scale that damage up. (When scaling up.) =/
    // conversely, when scaling down, if the player runs forward and hits his own combo, the engine says that he *is* in range, and gets hurt by it (even though we scale that damage down, he still gets hurt!)
    }
  }

  Super.MutatorTakeDamage( ActualDamage, Victim, InstigatedBy, HitLocation, Momentum, DamageType );
}

#ifdef CHECK_DODGE
// We need to check when a player (or other pawn) starts to dodge, so that we can fix (change) their velocity,
// since the dodge height (y velocity) is hard-coded in Epic's code, so we can't set it in advance.
function CheckPlayerStateForDodge(Pawn p) {
  // TODO: how we scale dodge should be different if we have CHANGE_GRAVITY switched on or off.
  // TODO: if we don't change gravity, fixed y should be no problem, since x is scaled ideally
  //       to make the jump *look* better, we could increase y and decrease x.
  if (p.PlayerReplicationInfo == None || (PlayerPawn(p)==None && Bot(p)==None) || UTServerAdminSpectator(p)!=None)
    return;
  #define pDodgeState (LastDodgeState[p.PlayerReplicationInfo.PlayerID % 64])
  if (pDodgeState == "NOTWALKING") {
    if (p.Physics == PHYS_Walking) {
      DebugShout("Walking again!");
      pDodgeState = ""$p.DodgeDir;
      // pDodgeState = "WALKING";
    }
  } else {
    if ((""$p.DodgeDir) != pDodgeState) { // This used to work fine but doesn't at the moment!
      // DebugShout(p.getHumanName()$"[id="$p.PlayerReplicationInfo.PlayerID$",DodgeDir="$p.DodgeDir$",Phys="$p.Physics$"]"); //// Appears to change between 0 and 5 DURING the player's flight.  I'm sure this didn't used to be the case.  Now this is causing a player's single dodge to be scaled multiple times!
      if (p.DodgeDir == DODGE_Active) {
        // DebugShout("Scaling dodge z="$p.Location.Z$" + "$p.Velocity.Z$" for "$p.getHumanName()$" ["$LastDodgeState[p.PlayerReplicationInfo.PlayerID % 64]$"->"$p.DodgeDir$"] ("$DeltaTime$"ms)");
        // DebugShout("Scaling dodge ("$Int(p.Location.X)$","$Int(p.Location.Y)$","$Int(p.Location.Z)$") + ("$Int(p.Velocity.X)$","$Int(p.Velocity.Y)$","$Int(p.Velocity.Z)$") for "$p.getHumanName()$" ["$LastDodgeState[p.PlayerReplicationInfo.PlayerID % 64]$"->"$p.DodgeDir$"] ("$DeltaTime$"ms)");
        DebugShout("["$ LastDodgeState[p.PlayerReplicationInfo.PlayerID % 64] $"->Active] Player dodge Z = "$ Int(p.Velocity.Z) $" but should be "$ (p.JumpZ * 0.61) $"");
        // I think the default upward dodge velocity was around 198.
        // p.Velocity.Z = p.JumpZ * 0.61;
        // Mmm now I think it's more like 170.
        p.Velocity.Z = p.JumpZ * 0.55;
        /*
        #ifdef CHANGE_GRAVITY
          // Try to correct the changes from last tick:
          // DeltaTime = 0.05; // BUG: Assumes tickrate 20, but we could arrange for the real DeltaTime to be passed down to us.
          #define gravity 0 // Should be -ve.  BUG: should get it from the right place
          p.Velocity.Z = p.Velocity.Z - gravity*DeltaTime;
          p.SetLocation(p.Location + (-p.Velocity.Z*DeltaTime + p.Velocity.Z*Scale*DeltaTime) * Vect(0,0,1));
          // Set correct upward velocity:
          p.Velocity.Z = p.Velocity.Z * Scale;
          p.Velocity.Z = p.Velocity.Z + gravity*DeltaTime;
        #else
          // p.Velocity.X = p.Velocity.X * Scale;
          // p.Velocity.Y = p.Velocity.Y * Scale;
          // p.Velocity.X = p.Velocity.X * Sqrt(Scale);
          // p.Velocity.Y = p.Velocity.Y * Sqrt(Scale);
          // p.Velocity.Z = p.Velocity.Z * Sqrt(Scale);
          // p.Velocity.Z = p.Velocity.Z * Sqrt(Sqrt(Scale));
        #endif
        */
        pDodgeState = "NOTWALKING";
      }
      // pDodgeState = ""$p.DodgeDir;
    }
  }
  // CONSIDER: When scaling up, the dodge seems a little low, but distance reached seems ok.
  //           Maybe this is because Velocity.Z has already changed by 1 tick before we get to it.
  // DebugLog("CheckPlayerStateForDodge [END]");
}
#endif

// FIXED: When we change the default values of projectiles, they stay changed next map!!  And hence get scaled again, becoming over-scaled (too slow/fast).
// Maybe we can get around this by caching things already been scaled
// Well it seems that default.ProjectilesAlreadyHandled does not last between maps, the same way that Projectiles default properties do.  =(
// Well I guess one yukky solution, would be to save the first values we ever find, in our config file, and use those stored values as the defaults we scale from in future.
function ScaleProjectileClass(class<Projectile> ProjectileClass) {
  if (ProjectileClass == None) {
    return; // Presumably the parent weapon had no projectile for primary/secondary fire.
  }
  if (InStr(ProjectilesAlreadyHandled," "$ProjectileClass$" ") != -1) {
    return; // We already scaled these default properties earlier for this weapon/projectile type.
  }
  DebugShout("Scaling projectile type: "$ProjectileClass);
  // BUG TODO: UTChunk and flakslug report 2 x "Accessed None" here.
  // ProjectileClass.default.DrawScale = ProjectileClass.default.DrawScale * Scale; // This does not seem to work, so doing it in HandleNewActor() instead.
  ProjectileClass.default.Speed = ScaleOnceOnly(ProjectileClass$".default.Speed", ProjectileClass.default.Speed);
  ProjectileClass.default.MaxSpeed = ScaleOnceOnly(ProjectileClass$".default.MaxSpeed", ProjectileClass.default.MaxSpeed);
  ProjectileClass.default.MomentumTransfer = ScaleOnceOnly(ProjectileClass$".default.MomentumTransfer", ProjectileClass.default.MomentumTransfer);
  ProjectileClass.default.ExplosionDecal.default.DrawScale = ScaleOnceOnly(ProjectileClass$".default.ExplosionDecal.default.DrawScale", ProjectileClass.default.ExplosionDecal.default.DrawScale);
  DebugShout("New properties for "$ProjectileClass$": Speed="$ProjectileClass.default.Speed$" MaxSpeed="$ProjectileClass.default.MaxSpeed$".");
  // We cannot scale default CollisionSize here, so we do it later.  Oh well strangely we didn't need to!
  // Add this Projectile type to the list, so that we don't scale its defaults again later:
  ProjectilesAlreadyHandled = ProjectilesAlreadyHandled $ " " $ ProjectileClass $ " ";
}

function float ScaleOnceOnly(String prop, float currentValue) {
  local String storedValue;
  storedValue = GetStoredProp(prop);
  if (storedValue == "") {
    PutStoredProp(prop,""$currentValue);
  } else {
    currentValue = Float(storedValue);
  }
  return currentValue * Scale;
}

function String GetStoredProp(String prop) {
  local int i;
  for (i=0;i<64;i++) {
    if (StoredPropName[i] == prop) {
      return StoredPropValue[i];
    }
  }
  return "";
}

function PutStoredProp(String prop, String value) {
  local int i;
  for (i=0;i<64;i++) {
    if (StoredPropName[i] == "") {
      DebugShout("Storing property "$(i+1)$"/64: "$prop$" = "$value);
      StoredPropName[i] = prop;
      StoredPropValue[i] = value;
      SaveConfig();
      return;
    }
  }
  DebugShout("FAILED to store property "$prop$" = "$value);
  return;
}

function ScaleCollisionCylinder(Actor Other) {
  Other.SetCollisionSize(Other.default.CollisionRadius * Scale, Other.default.CollisionHeight * Scale);
}



// Catch messages from spectators:
function bool MutatorBroadcastMessage(Actor Sender, Pawn Receiver, out coerce string Msg, optional bool bBeep, out optional name Type) {
  SuperCheckMessage(Sender,Receiver,Mid(Msg,InStr(Msg,":")+1));
  return Super.MutatorBroadcastMessage(Sender,Receiver,Msg,bBeep,Type);
}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
  SuperCheckMessage(Sender,Receiver,Msg);
  return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep);
}

// Returns True if this message should be swallowed / hidden from other players.
function SuperCheckMessage(Actor Sender, Pawn Receiver, String Msg) {
  if (Left(Msg,1) == "!") {
    if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
      CheckMessage(Mid(Msg,1), PlayerPawn(Sender));
    }
  }
}

function Mutate(String str, PlayerPawn Sender) {
  CheckMessage(str, Sender);
  Super.Mutate(str, Sender);
}

// Returns True if the command was recognised.
function CheckMessage(String line, PlayerPawn Sender) {
  local float NewScale;

  if (Left(line,4) ~= "HELP") {
    if (Sender.bAdmin || bAllowPlayersToResize || Scale != 1.0) {
      Sender.ClientMessage("ResizeTest commands: !resize <newscale>");
    }
  }

  if (Left(line,4) ~= "SIZE") {
    Sender.ClientMessage("Current scale is "$Scale$"");
  }

  // Still doesn't work very well, but at least it sets the size easily for the next map.
  if (Left(line,7) ~= "RESIZE ") {
    NewScale = Float( Mid(line,7) );

    if (!Sender.bAdmin && !bAllowPlayersToResize && NewScale != 100) {
      Sender.ClientMessage("You can only force default size with: !resize 100");
      return;
    }

    // We are going to do the resize...

    if (NewScale == 100) {
      BroadcastMessageAndLog("Game is now at default size.");
      NewScale = 1.0;
    } else {
     // if (NewScale >= 20) // assume they meant percent
     if (NewScale >= 5 && InStr(Mid(line,7),".")==-1) // assume they meant percent
       NewScale = NewScale / 100;
     if (NewScale<0.1)
       NewScale=0.1;
     if (NewScale>4)
       NewScale=4;
     // BroadcastMessageAndLog("You have been resized to " $ Int(Scale*100) $ "% by " $ Sender.getHumanName());
     BroadcastMessageAndLog("Game has been resized to " $ Int(NewScale*100) $ "% by " $ Sender.getHumanName());
    }

    bResizeEnabled = True;

    if (Scale == 100 && NewScale == 100)
      bResizeEnabled=False;

    if (Scale == NewScale) {
      BroadcastMessageAndLog("Game has been FIXED on " $ Int(Scale*100) $ "% by " $ Sender.getHumanName());
      SaveConfig();
    } else {
      BroadcastMessageAndLog("Game has been resized from " $ Int(Scale*100) $ "% to " $ Int(NewScale*100) $ "% by " $ Sender.getHumanName());
    }

    // DONE: As a precaution, before setting our new scale, we "undo" our old
    // scale, by applying the inverse scale to all actors.  Hopefully this will
    // "reset" actors to their default size before we change them again.
    Scale = 1.0/Scale;
    // Force a refresh of everything:
    GlobalRefresh();

    // Now we apply the new scale setting:
    DebugLog("Scale="$NewScale);
    Scale = NewScale;
    // Force a refresh of everything:
    GlobalRefresh();

  }

}

function GlobalRefresh() {
  local Actor a;
  foreach AllActors(class'Actor',a) {
    // TODO: Refactor this AlwaysKeep() into MyAlwaysKeep() so that we don't keep calling the later mutators in the chain.
    AlwaysKeep(A); // kill transloc
    HandleNewActor(a);
    ScaleActor(a);
    // A number of things do not change from the client's point of view.
    // TODO Consider clearing LastActor.
  }
}

