//// ResizeTest ////
//// Allows users to resize the map by typing "!resize 150" or "mutate resize 0.8".

class ResizeTest expands ResizeLib config(Resize);

//// This method sucked cos we can't add to defaultproperties:
// class ResizeTest extends Mutator config(Resize);
// #define RESIZE_LIB
// #include "ResizeLib.uc.jpp"

#define CHECK_MESSAGES

var() config bool bAllowPlayersToResize;

defaultproperties {
	bAllowPlayersToResize=True
}

function PreBeginPlay() {
	Super.PreBeginPlay();

	#ifdef DEBUG
		// DEBUGGING info:
		DebugShout("At start of play, ProjectilesAlreadyHandled = "$ProjectilesAlreadyHandled);
		DebugShout("At start of play, default.ProjectilesAlreadyHandled = "$default.ProjectilesAlreadyHandled);
		DebugShout("At start of play, ShockProj properties Speed="$(class'ShockProj'.default.Speed)$" MaxSpeed="$(class'ShockProj'.default.MaxSpeed)$".");

		// DONE: remove this for official release
		// for development, auto-set scale on my test maps
		// Regardless of whether I put it in PreBeginPlay() or PostBeginPlay(), the new value of Scale became overwritten until I did SaveConfig().
		if (InStr(""$Self,"CTF-PureAction")>=0) {
			Scale = 1.0; bResizeEnabled=False; SaveConfig();
		}
		if (InStr(""$Self,"CTF-Bleak")>=0) {
			Scale = 1.0; bResizeEnabled=False; SaveConfig();
		}
		if (InStr(""$Self,"HalfSize")>=0) {
			Scale = 0.5; bResizeEnabled=True; SaveConfig();
		}
		if (InStr(""$Self,"DoubleSize")>=0) {
			Scale = 2.0; bResizeEnabled=True; SaveConfig();
		}
	#endif

	DebugShout(Self$".PreBeginPlay() Scale="$Scale);

	Enable('Tick');
	Level.Game.RegisterMessageMutator(Self);
	Level.Game.RegisterDamageMutator(Self);
	if (Scale == 100)
		bResizeEnabled=False;
	if (!bResizeEnabled)
		return;
	ScaleAll();
}

function PostBeginPlay() {
	Super.PostBeginPlay();
	if (!bResizeEnabled)
		return;
	Enable('Tick');
	ScaleAll();
}

#ifndef DONT_CHECK_MESSAGES

// Catch messages from spectators:
function bool MutatorBroadcastMessage(Actor Sender, Pawn Receiver, out coerce string Msg, optional bool bBeep, out optional name Type) {
	SuperCheckMessage(Sender,Receiver,Mid(Msg,InStr(Msg,":")+1));
	return Super.MutatorBroadcastMessage(Sender,Receiver,Msg,bBeep,Type);
}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
	SuperCheckMessage(Sender,Receiver,Msg);
	return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep);
}

// Returns True if this message should be swallowed / hidden from other players.
function SuperCheckMessage(Actor Sender, Pawn Receiver, String Msg) {
	if (Left(Msg,1) == "!") {
		if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
			CheckMessage(Mid(Msg,1), PlayerPawn(Sender));
		}
	}
}

function Mutate(String str, PlayerPawn Sender) {
	CheckMessage(str, Sender);
	Super.Mutate(str, Sender);
}

// Returns True if the command was recognised.
function CheckMessage(String line, PlayerPawn Sender) {
	local float NewScale;

	if (Left(line,4) ~= "HELP") {
		if (Sender.bAdmin || bAllowPlayersToResize || Scale != 1.0) {
			Sender.ClientMessage("ResizeTest commands: !resize <newscale>");
		}
	}

	if (Left(line,4) ~= "SIZE") {
		Sender.ClientMessage("Current scale is "$Scale$"");
	}

	// Still doesn't work very well, but at least it sets the size easily for the next map.
	if (Left(line,7) ~= "RESIZE ") {
		NewScale = Float( Mid(line,7) );

		if (!Sender.bAdmin && !bAllowPlayersToResize && NewScale != 100) {
			Sender.ClientMessage("You can only force default size with: !resize 100");
			return;
		}

		// We are going to do the resize...

		if (NewScale == 100) {
			BroadcastMessage("Game is now at default size.");
			NewScale = 1.0;
		} else {
		 // if (NewScale >= 20) // assume they meant percent
		 if (NewScale >= 5 && InStr(Mid(line,7),".")==-1) // assume they meant percent
			 NewScale = NewScale / 100;
		 if (NewScale<0.1)
			 NewScale=0.1;
		 if (NewScale>4)
			 NewScale=4;
		 // BroadcastMessage("You have been resized to " $ Int(Scale*100) $ "% by " $ Sender.getHumanName());
		 BroadcastMessage("Game has been resized to " $ Int(NewScale*100) $ "% by " $ Sender.getHumanName());
		}

		bResizeEnabled = True;

		ChangeScaleTo(NewScale);

		if (Scale == 100 && NewScale == 100)
			bResizeEnabled=False;

		if (Scale == NewScale) {
			BroadcastMessage("Game has been FIXED on " $ Int(Scale*100) $ "% by " $ Sender.getHumanName());
			SaveConfig();
		} else {
			BroadcastMessage("Game has been resized from " $ Int(Scale*100) $ "% to " $ Int(NewScale*100) $ "% by " $ Sender.getHumanName());
		}

	}

}

#endif



// vim: tabstop=2 shiftwidth=2 expandtab filetype=uc
