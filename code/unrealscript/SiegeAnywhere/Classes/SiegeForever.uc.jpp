class SiegeForever extends Mutator config(SiegeForever);

// BUG: Sometimes spawned buildings of one colour, have an inner glow of the other colour.  I think that's because there was only 1 player to use as owner, and that causes the glow!
// TODO: TryToLoadBuildings() should use random players as owners, if more than 1 are available.
// TODO: Detect EndGame and auto-save then.
// TODO: When a new Type or Map overwrites an old one, we should really clear all relevant recorded building locations for that type/map!
// TODO: If the gametype is Assault, then red/blue is not enough - we end up with buildings swapping side!  We should say 0=Attackers and 1=Defenders, and map from that to/from Red/Blue, according to Team Assault(Level.Game).Attacker and Defender.
// CONSIDER: Could be really clever, and detect whether the map is symmetrical, using some distance-minimisation search on the PlayerStarts, and if so, spawn exactly the same sets of buildings for both teams.

#define MaxTeams 2
#define MaxMaps 32
#define MaxTypes 16
#define MAX_ALL 1024
// MAX_ALL must be the multiple of the other 3.

var config bool bAutoLoad,bAutoSave,bRememberOld,bSpawnFairly;

var config String Maps[MaxMaps]; // 0-MaxMaps
var config String Types[MaxTypes]; // 0-MaxTypes
var config String BuildingsData[MAX_ALL]; // 0-(MaxTeams*MaxTypes*MaxMaps)

var bool bDoneLoad;

// var String SavedTypes;
// var String LoadedTypes;

defaultproperties {
	// MaxMaps=16
	// MaxTypes=8
	bAutoLoad=True       // When set, stored buildings will be loaded at the start of the game.  (Otherwise only accessible through "mutate load".)
	bAutoSave=True       // When set, buildings in the game will be saved at regular intervals (CAUSES LAG!).  (Otherwise only accessible through "mutate save".)
	bRememberOld=False   // When set, will keep records of old buildings which have been destroyed.
	bSpawnFairly=True    // When set, on loading buildings, will only spawn an equal number of buildings of each type for each team.
}

function PostBeginPlay() {
	Super.PostBeginPlay();
	SetTimer(20,True);
}

event Timer() {
	if (!bDoneLoad) {
		TryToLoadBuildings();
		return;
	}
	if (bDoneLoad && bAutoSave)
		SaveBuildings();
}

function Mutate(String str, PlayerPawn Sender) {
	if (Sender.bAdmin) {
		if (str ~= "save" || str ~= "savebuildings") {
			SaveBuildings();
		}
		if (str ~= "load" || str ~= "loadbuildings") {
			TryToLoadBuildings(); // Note: Refuses to load if a load has already occurred!  I suspect that is desirable.
		}
	}
}

function TryToLoadBuildings() {
	local Pawn redOwner,blueOwner;
	local Pawn p;
	if (bDoneLoad)
		return;
	redOwner = None;
	blueOwner = None;
	// We must find a PlayerPawn for every building.
	// In the end, I don't care if he's on the wrong team!
	for (p=Level.PawnList;p!=None;p=p.NextPawn) {
		// if (p.IsA('PlayerPawn') || p.IsA('Bot')) {
		if (p.IsA('PlayerPawn') && p.PlayerReplicationInfo != None) {
			if (p.PlayerReplicationInfo.team == 0 || redOwner == None) {
				redOwner = p;
			}
			if (p.PlayerReplicationInfo.team == 1 || blueOwner == None) {
				blueOwner = p;
			}
		}
	}
	if (redOwner != None && blueOwner != None) {
		if (bAutoLoad)
			LoadBuildings(redOwner,blueOwner);
		bDoneLoad=True;
		SetTimer(60,True);
	}
}

function TrimRecord(int j) {
	local int i;
	if (len(BuildingsData[j]) > 36*32) {
		// BuildingsData[j] = Right(BuildingsData[j],36*32);
		i = InstrOff(BuildingsData[j],":",len(BuildingsData[j])/4);
		BuildingsData[j] = Mid(BuildingsData[j],i+1);
	}
}

function LoadBuildings(Pawn redOwner, Pawn blueOwner) {
	local int i,j,k,l,team;
	local string type,buildingLocation,map;
	local class<sgBuilding> typeClass;
	local int countStored[MaxTeams];
	local int maxToSpawn;
	local int countSpawned[MaxTeams];
	// local float chanceOfSpawning;
	local int numToSkip;
	local Actor sgB;
	local Pawn pOwner;
	map = GetMap();
	// local string LoadedTypes;
	for (i=0;i<MaxTypes;i++) {
		type = Types[i];
		if (type == "")
			break;
		// typeClass = Class(type);
		// typeClass = class<sgBuilding>(DynamicLoadObject("SiegeXXL2dRC1.sgBuilding", class'Class'));
		typeClass = class<sgBuilding>(DynamicLoadObject(type, class'Class'));
		// Count how many buildings of this type each team has stored:
		maxToSpawn = 9999;
		for (team=0;team<MaxTeams;team++) {
			j = GetBuildingsI(map,type,team);
			countStored[team] = 0;
			k = 0;
			while (true) {
				l = InstrOff(BuildingsData[j],":",k);
				if (l>-1) {
					countStored[team]++;
					k = l+1;
				} else {
					break;
				}
			}
			if (countStored[team] < maxToSpawn)
				maxToSpawn = countStored[team];
		}
		// Go ahead and spawn buildings of this type:
		for (team=0;team<MaxTeams;team++) {
			if (bSpawnFairly)
				numToSkip = countStored[team] - maxToSpawn;
			countSpawned[team]=0;
			j = GetBuildingsI(map,type,team);
			TrimRecord(j);
			Log("SiegeForever.LoadBuildings(): "$type$" "$team$" BuildingsData["$j$"] = \""$BuildingsData[j]$"\"");
			k = 0;
			while (true) {
				l = InstrOff(BuildingsData[j],":",k);
				if (l>-1) {
					buildingLocation = Mid(BuildingsData[j],k,l-k);
					if (buildingLocation != "") { // could also check for 2 ","s and 3 "."s
						if (bSpawnFairly && numToSkip>0) {
							numToSkip--;
						} else {
							if (team == 0)
								pOwner = redOwner;
							if (team == 1)
								pOwner = blueOwner;
							sgB = Spawn(typeClass,pOwner,,Vector(buildingLocation));
							if (sgB == None) {
								Log("SiegeForever.LoadBuildings(): Failed to spawn "$type$" "$typeClass$" at ("$buildingLocation$")");
							} else {
								sgBuilding(sgB).Team = team;
								sgBuilding(sgB).Grade = 2;
								if (FRand() < 0.5)
									sgBuilding(sgB).Grade = 3;
								// sgBuilding(sgB).BuildTime = FRand()*10.0;
								// sgBuilding(sgB).Energy = 75.0;
								sgBuilding(sgB).Energy = sgBuilding(sgB).MaxEnergy;
								// sgBuilding(sgB).Health = 75.0;
								// sgBuilding(sgB).DoneBuilding = True;
								// Log("SiegeForever.LoadBuildings(): Spawned "$sgB$" ("$Pawn(sgB.Owner).PlayerReplicationInfo.Team$")");
								countSpawned[team]++;
							}
						} // else don't spawn it, for fairness!
					}
					k = l+1;
				} else {
					break;
				}
			}
		}
		if (countSpawned[0]>0 || countSpawned[1]>0) {
			BroadcastMessage("Spawned "$countSpawned[0]$" x "$StrAfterLast(type,".")$" for Red, and "$countSpawned[1]$" for Blue.");
			Log("Spawned "$countSpawned[0]$" "$type$"s for Red, and "$countSpawned[1]$" for Blue.");
		}
		// LoadedTypes = LoadedTypes $ ":" $ type $ ":";
	}
}

function SaveBuildings() {
	local int i,Typei,team,count;
	local string SavedTypes,type,map;
	local sgBuilding A;
	map = GetMap();
	// i = FRand()*MaxRecords;
	SavedTypes="";
	foreach AllActors(class'sgBuilding',A) {
		type = String(A.class);
		TypeI = GetTypeI(type);
		if (TypeI==-1) {
			continue;
		}
		if (Instr(SavedTypes,":"$type$":")==-1) {
			// New type:
			for (team=0;team<MaxTeams;team++) {
				i = GetBuildingsI(map,type,team);
				if (!bRememberOld)
					BuildingsData[i] = "";
				foreach AllActors(class'sgBuilding',A) {
					// if (String(A.class) == type && Pawn(A.Owner).PlayerReplicationInfo.Team == team) {
					if (String(A.class) == type && A.Team == team) {
						if (Instr(BuildingsData[i],A.Location $ ":") == -1) {
							TrimRecord(i);
							BuildingsData[i] = BuildingsData[i] $ A.Location $ ":";
							count++;
						}
					}
				}
			}
			SavedTypes = SavedTypes $ ":" $ type $ ":";
		}
	}
	SaveConfig();
	BroadcastMessage("Saved "$(Typei+1)$" types of building, "$count$" new.");
	Log("Saved "$(Typei+1)$" types of building, "$count$" new.");
}

function int GetBuildingsI(String map, String type, int team) {
	local int i,j,k;
	local String key;
	team = FixTeamForAssault(team);
	i = (team % 2); // 0 or 1
	j = (GetTypeI(type) % MaxTypes);
	k = (GetMapI(map) % MaxMaps);
	// key = map $ ":" $ type $ ":" $ team $ ":";
	// return i + (j * 2) + (k * MaxTypes*2);
	return i + j*2 + k*2*MaxTypes;
}

function int GetMapI(String map) {
	local int i;
	for (i=0;i<MaxMaps;i++) {
		if (Maps[i] ~= map) {
			return i;
		}
		// End of list:
		if (Maps[i] ~= "") {
			break;
		}
	}
	if (i==MaxMaps) {
		i = MaxMaps*FRand();
		BroadcastMessage("SiegeForever: Ran out of slots for maps!  "$Maps[i]$" will be replaced by "$map);
		Log("SiegeForever: Ran out of slots for maps!  "$Maps[i]$" will be replaced by "$map);
	}
	Maps[i] = map;
	return i;
}

function int GetTypeI(String type) {
	local int i;
	for (i=0;i<MaxTypes;i++) {
		if (Types[i] ~= type) {
			return i;
		}
		// End of list:
		if (Types[i] ~= "") {
			break;
		}
	}
	if (i==MaxTypes) {
		i = MaxTypes*FRand();
		BroadcastMessage("SiegeForever: Ran out of slots for types!  "$Types[i]$" will be replaced by "$type);
		Log("SiegeForever: Ran out of slots for types!  "$Types[i]$" will be replaced by "$type);
	}
	Types[i] = type;
	return i;
}

function String GetMap() {
	local int i;
	i = Instr(""$Self,".");
	return Left(""$Self,i);
}

function int FixTeamForAssault(int team) {
	if (!Level.Game.IsA('Assault')) {
		return team;
	} else {
		if (Assault(Level.Game).Attacker.TeamIndex == 0)
			return team;
		else
			return 1 - team;
	}
}

#include "../../JLib/jlib.uc.jpp"

