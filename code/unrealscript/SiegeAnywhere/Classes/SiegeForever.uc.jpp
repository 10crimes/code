class SiegeForever extends Mutator config(SiegeForever);

// vim: filetype=uc

// TODO: Optionally build all buildings as belonging to admin or current player.
// CONSIDER: atm buildings stay with the server until the server drops them.  but we could associate saved buildings with the players that built them (or upgraded them).  that way, a player joining the game, brings his favourite buildings for the map with him.  dunno how desirable that is :P
// TODO: spawn fairly - if we can detect that the map is symmetrical, for every building we spawn for red, build a clone in the other team's base.
// BUG: If only 1 player is present at game start, all auto-loaded buildings will belong to him, and have an inner glow of his colour.
// DONE: TryToLoadBuildings() should use random players as owners, if more than 1 are available.
// DONE: Detect EndGame and auto-save then.  (Well, sorta detected ;p )
// DONE: When a new Type or Map overwrites an old one, we should really clear all relevant recorded building locations for that type/map!
// DONE: If the gametype is Assault, then red/blue is not enough - we end up with buildings swapping side!  We should say 0=Attackers and 1=Defenders, and map from that to/from Red/Blue, according to Team Assault(Level.Game).Attacker and Defender.
// CONSIDER: Could be really clever, and detect whether the map is symmetrical, using some distance-minimisation search on the PlayerStarts, and if so, spawn exactly the same sets of buildings for both teams.
// DONE: do not load or save sgBaseCore!
// DONE: fixed the multi-color bug (failed to decide whether MaxTeams=4 or 2!)
// TODO: the config file is hard to read - a nicer format might be: CTF-Face 0 SiegeXXL2e.sgSupplier@6975,848,-1883 SiegeXXL2e.sgHealthPod@6974,847,-1882
// TODO: sgBuildings moved by the kxForceGun can cause doubles to get saved in the config (if bRememberOld/bAutoSave is set).
// TODO: The server sometimes segfaults when using reloaded Teleporters!  It was fine when I made 2 using my 1 playerpawn.
// TODO: When we need to remove the data for a map, pick the map with fewest stored buildings, and for which buildings have not been loaded or saved for a long time.

#define AUTO_SWITCH_VERSION

#define DEV

// TODO: VERSION_INDEPENDENCE

// If you change any of these values, you must scrap your old .ini (or migrate
//   it by hand), otherwise it may load the buildings of the wrong type in the
//   wrong location on the wrong map with the wrong colour, and they may be
//   impossible to remove.
#define MaxTeams 4
#define MaxMaps 48
#define MaxTypes 32
// MAX_ALL must be the multiple of the other 3.
// #define MAX_ALL (MaxTeams*MaxMaps*MaxTypes)
#define MAX_ALL 6144

//// TODO: Have WarnLog and InfoLog do Broadcast only if admin specified bBroadcastInfo=True.
////       Maybe bBroadcastInfo to True and bBroadcastWarning to False?
////       No both default true, but warning can be disabled.
// #define MyLogHeader ("["$Self.class$"]")
#define MyLogHeader "[SiegeForever]"
#define WarnLog(X); if (true) { Log( MyLogHeader $" "$ X ); }
#define InfoLog(X); if (true) { Log( MyLogHeader $" "$ X ); }
#define DebugLog(X); 
#ifdef DEV
	#undef WarnLog
	#define WarnLog(X); if (true) { Log( MyLogHeader $" "$ X ); BroadcastMessage( MyLogHeader $" "$ X ); }
	// #undef InfoLog
	// #define InfoLog(X); if (true) { Log( MyLogHeader $" "$ X ); BroadcastMessage( MyLogHeader $" "$ X ); }
	#undef DebugLog
	#define DebugLog(X); Log( MyLogHeader $" "$ X );
#endif

var config bool bAutoLoad,bSaveAtEnd,bAutoSave,bRememberOld,bSpawnFairly;
var config bool bBroadcastInfo,bBroadcastSaves;

var config String Maps[MaxMaps]; // 0-MaxMaps
var config String Types[MaxTypes]; // 0-MaxTypes
var config String BuildingsData[MAX_ALL]; // 0-(MaxTeams*MaxTypes*MaxMaps)
var config bool bPlayersMaySave,bPlayersMayLoad,bPlayersMayClear;

var Pawn redOwner,blueOwner;
var int CurrentLoadingIndex;
var bool bDoneLoad;

// var String SavedTypes;
// var String LoadedTypes;

defaultproperties {
	// MaxMaps=16
	// MaxTypes=8
	bAutoLoad=True       // When set, stored buildings will be loaded at the start of the game.  (Otherwise only accessible through "mutate load".)
	bSaveAtEnd=True      // When set, at the end of the game the remaining buildings will be saved.  (May cause lag at 0:00 if game goes into overtime.)
	bAutoSave=False      // When set, buildings in the game will be saved at regular intervals (CAUSES LAG!).
	bRememberOld=False   // When set, will keep records of old buildings which have been destroyed.  (Will only remember buildings destroyed mid-game if bAutoSave=True.)  When unset, only remembers the buildings that were in the game when the buildings were last saved.
	bSpawnFairly=True    // When set, on loading buildings, will only spawn an equal number of buildings of each type for each team.
	// DONE: bAutoSave already does this O_o // bKeepDestroyed=True  // When set, buildings will be scanned every 3 minutes, but SaveConfig() will not be run, to avoid lag.  LIES the lag is in the processing!
	bPlayersMaySave=True
	bPlayersMayLoad=True
	bPlayersMayClear=False
	bBroadcastInfo=True
	bBroadcastSaves=False
}

// PreBeginPlay was too early - UpgradeTypes couldn't get the Level.Game.GameReplicationInfo
function PostBeginPlay() {
	Super.PostBeginPlay();
	#ifdef AUTO_SWITCH_VERSION
	UpgradeTypes();
	#endif
	SetTimer(5,True);
}

event Timer() {
	if (bAutoLoad && !bDoneLoad && !DeathMatchPlus(Level.Game).bTournament) {
		// TryToLoadBuildings();
		LoadSomeBuildings();
		return;
	}
	if (bDoneLoad && bAutoSave && !DeathMatchPlus(Level.Game).bTournament)
		SaveBuildings();
}

function Mutate(String str, PlayerPawn Sender) {
	// You do not need to be an admin to save the buildings:
	// TODO: This is nice that anyone can do it, but since it causes lag, we don't really want players spamming it mid-game.
	// DONE: They can't do it during Tournament games.
	DebugLog("SiegeForever.Mutate(\""$str$"\") was called.");
	if (DeathMatchPlus(Level.Game).bTournament && !Sender.bAdmin) {
	} else {
		if (str ~= "HELP") {
			if (Sender.bAdmin || bPlayersMaySave) {
				Sender.ClientMessage(Self.class.name$": mutate save | mutate savebuildings");
			}
			if (Sender.bAdmin || bPlayersMayLoad) {
				Sender.ClientMessage(Self.class.name$": mutate load | mutate loadbuildings");
			}
			if (Sender.bAdmin || bPlayersMayClear) {
				Sender.ClientMessage(Self.class.name$": mutate clear | mutate killbuildings | mutate reset");
			}
		}
		// Only an admin can run these commands, or any player in the first 10 seconds of the game.
		if ( (Sender.bAdmin || bPlayersMaySave)
			&& (str ~= "SAVE" || str ~= "SAVEBUILDINGS")
		) {
			SaveBuildings();
		}
		// Only an admin can run these commands, or any player in the first 10 seconds of the game.
		if ( (Sender.bAdmin || bPlayersMayLoad)
			&& (str ~= "LOAD" || str ~= "LOADBUILDINGS")
		) {
			TryToLoadBuildings();
			if (bBroadcastInfo) {
				BroadcastMessage(Sender.getHumanName()$" has loaded some buildings.  Type mutate save to save them..");
			}
		}
		if ( (Sender.bAdmin || bPlayersMayClear)
			&& (str ~= "CLEAR" || str ~= "CLEARBUILDINGS" || str ~= "KILLBUILDINGS" || str ~= "RESET")
		) {
			// DONE: might be a good idea to save them first!  But not if the map is currently empty or sparse.
			// Admin Clear does NOT save them.  He can clear broken buildings and exploits.
			if (!Sender.bAdmin) {
				SaveBuildings();
			}
			KillAllBuildings(); // Admin could also try: admin killall sgBuilding
			// FINE IMO: Is admin wanting to clear current game, changes this game, or all history for this map?  He's currently doing the middle one.
			if (bBroadcastInfo) {
				BroadcastMessage(Sender.getHumanName()$" cleared all the buildings.  Type mutate load to reload them.");
			}
		}
	}
	Super.Mutate(str,Sender);
}

function GetRedBluePawns() {
	local Pawn p;
	redOwner = None;
	blueOwner = None;
	// We must find a PlayerPawn for every building.
	// In the end, I don't care if he's on the wrong team!
	// We can load red buildings with a blue pawn, but they will end up with a blue glow!
	// TODO: Can't we use a Bot when a Player is not present?  (Player is preferable ofc, for ownership.)
	for (p=Level.PawnList;p!=None;p=p.NextPawn) {
		if ((p.IsA('PlayerPawn') || p.IsA('Bot')) && p.PlayerReplicationInfo != None) {
			if (p.PlayerReplicationInfo.Team == 0) { // || redOwner == None) {
				redOwner = p;
			}
			if (p.PlayerReplicationInfo.Team == 1) { // || blueOwner == None) {
				blueOwner = p;
			}
		}
	}
}

function TryToLoadBuildings() {
	GetRedBluePawns();
	if (redOwner != None && blueOwner != None) {
		LoadBuildings();
		if (bBroadcastInfo) {
			BroadcastMessage("Buildings were loaded.  Type mutate clear to remove them.");
		}
		bDoneLoad = True;
		SetTimer(60,True);
	} else {
		if (FRand()<0.01) {
			DebugLog("SiegeAnywhere.SiegeForever.TryToLoadBuildings() Waiting for red and blue Pawns...");
		}
	}
}

function LoadSomeBuildings() {
	GetRedBluePawns();
	// if (redOwner != None && blueOwner != None) {
	if (redOwner != None && blueOwner != None) {
		if (CurrentLoadingIndex >= MaxTypes) {
			bDoneLoad = True;
			SetTimer(60,True);
			return;
		}
		LoadBuildingsType(CurrentLoadingIndex);
		CurrentLoadingIndex++;
		SetTimer(1.0,True);
	}
}

function KillAllBuildings() {
	local sgBuilding b;
	foreach AllActors(class'sgBuilding',b) { // TODO: VERSION_INDEPENDENCE
		// Don't kill the cores!
		if (b.IsA('sgBaseCore'))
			continue;
		b.Destroy();
	}
}

function TrimRecord(int j) {
	local int i;
	if (len(BuildingsData[j]) > 22*32) {
		// BuildingsData[j] = Right(BuildingsData[j],36*32);
		i = InstrOff(BuildingsData[j],":",len(BuildingsData[j])/4);
		BuildingsData[j] = Mid(BuildingsData[j],i+1);
	}
}

function Pawn GetRandomPlayer(int team) {
	local Pawn p;
	local int count;
	count = 0;
	for (p=Level.PawnList;p!=None;p=p.NextPawn) {
		if ((p.IsA('PlayerPawn') || p.IsA('Bot')) && p.PlayerReplicationInfo != None && p.PlayerReplicationInfo.Team == team) {
			count++;
		}
	}
	count = 1 + count * FRand();
	for (p=Level.PawnList;p!=None;p=p.NextPawn) {
		if ((p.IsA('PlayerPawn') || p.IsA('Bot')) && p.PlayerReplicationInfo != None && p.PlayerReplicationInfo.Team == team) {
			count--;
			if (count == 0)
				return p;
		}
	}
	return None;
}

#ifdef AUTO_SWITCH_VERSION
#define AfterFirst(str,srch) Mid(str,Instr(str,srch)+Len(srch))
#define BeforeFirst(str,srch) Left(str,Instr(str,"."))

function String GetSiegeVersion() {
	//// Whatever we were compiled against.
	return BeforeFirst(String(class'sgBuilding'),".");
	//// Good but doesn't work during Pre or PostBeginPlay().
	// if (Level.Game!=None && Level.Game.GameReplicationInfo!=None)
		// return BeforeFirst(String(Level.Game.GameReplicationInfo.class),"."); // Should work more often.
	//// Fails on SiegeGIFix and sgGrappleNNN.SiegeGI.
	// else
		// return BeforeFirst(String(Level.Game.class),".");
	// return "";
}

function UpgradeTypes() {
	local int i;
	local String newType;
	local class<Actor> targetClass;
	for (i=0;i<MaxTypes;i++) {
		if (Types[i] == "")
			continue;
		if (! (BeforeFirst(Types[i],".") ~= GetSiegeVersion()) ) {
			// Can we load this type of building in the new siege version?
			newType = GetSiegeVersion() $"."$ AfterFirst( Types[i] ,".") ;
			targetClass = class<Actor>(DynamicLoadObject(newType, class'Class'));
			if (targetClass == None) {
				WarnLog("Could not upgrade "$ Types[i] $" to "$newType);
			} else {
				WarnLog("Upgrading "$ Types[i] $" to "$newType);
				Types[i] = newType;
			}
		}
	}
}
#endif

function LoadBuildings() {
	local int i;
	// local string LoadedTypes;
	for (i=0;i<MaxTypes;i++) {
		LoadBuildingsType(i);
	}
}

function LoadBuildingsType(int TypeI) {
	local int j,k,l,team;
	local string type,buildingLocation,map;
	local class<Actor> typeClass;
	local int countStored[MaxTeams];
	local int maxToSpawn;
	local int countSpawned[MaxTeams];
	// local float chanceOfSpawning;
	local int numToSkip;
	local Actor sgB;
	local Pawn pOwner;
	local int resetTeam;
	type = Types[TypeI];
	map = GetMap();
	/*
	#ifdef AUTO_SWITCH_VERSION
	if (type != Types[GetTypeI(type)]) {
		WarnLog("We called GetTypeI() for the sake of AUTO_SWITCH_VERSION, but got a different number back!");
	}
	#endif
	*/
	if (type == "")
		return;
	// typeClass = Class(type);
	// typeClass = class<sgBuilding>(DynamicLoadObject("SiegeXXL2dRC1.sgBuilding", class'Class'));
	typeClass = class<Actor>(DynamicLoadObject(type, class'Class'));
	// Count how many buildings of this type each team has stored:
	maxToSpawn = 9999;
	for (team=0;team<MaxTeams;team++) {
		j = GetBuildingsI(map,type,team);
		if (BuildingsData[j] != "") {
			InfoLog("SiegeForever.LoadBuildingsType("$TypeI$") has BuildingsData["$j$"] = \""$ BuildingsData[j] $"\"");
		}
		countStored[team] = 0;
		k = 0;
		while (true) {
			l = InstrOff(BuildingsData[j],":",k);
			if (l>-1) {
				countStored[team]++;
				k = l+1;
			} else {
				break;
			}
		}
		if (team<2 && countStored[team] < maxToSpawn)
			maxToSpawn = countStored[team];
	}
	InfoLog("SiegeForever.LoadBuildingsType("$TypeI$"): "$type$" spawning max="$maxToSpawn$" since redcount="$countStored[0]$" bluecount="$countStored[1]);
	// Go ahead and spawn buildings of this type:
	for (team=0;team<MaxTeams;team++) {
		if (bSpawnFairly) {
			numToSkip = countStored[team] - maxToSpawn;
			DebugLog("SiegeForever.LoadBuildingsType("$TypeI$"): Skipping "$numToSkip$" / "$countStored[team]$" buildings of type "$type$" belonging to team "$team$" for fairness.");
		} // else numToSkip should sit at default 0
		countSpawned[team]=0;
		j = GetBuildingsI(map,type,team);
		TrimRecord(j);
		k = 0;
		while (true) {
			l = InstrOff(BuildingsData[j],":",k);
			if (l>-1) {
				buildingLocation = Mid(BuildingsData[j],k,l-k);
				if (buildingLocation != "") { // could also check for 2 ","s and 3 "."s
					if (bSpawnFairly && numToSkip>0) {
						numToSkip--;
					} else {
						pOwner = GetRandomPlayer(team);
						if (pOwner == None) { // Might happen if only 1 player is present.
							// redOwner and blueOwner are guaranteed to have values, even if there are no red players present.
							if (team == 0)
								pOwner = redOwner;
							if (team == 1)
								pOwner = blueOwner;
						}
						resetTeam = pOwner.PlayerReplicationInfo.Team;
						if (pOwner.PlayerReplicationInfo.Team != team)
							pOwner.PlayerReplicationInfo.Team = team;
						// TODO: If there is already a building of the same type at almost this exact location, do not build a second.
						sgB = Spawn(typeClass,pOwner,,Vector(buildingLocation));
						pOwner.PlayerReplicationInfo.Team = resetTeam;
						if (sgB == None) {
							WarnLog("SiegeForever.LoadBuildingsType("$TypeI$"): Failed to spawn "$type$" "$typeClass$" at ("$buildingLocation$")");
						} else {
							// TODO: VERSION_INDEPENDENCE
							// sgB.Team = team;
							// Pawn(sgB).Team = team;
							sgBuilding(sgB).Team = team;
							sgBuilding(sgB).Grade = 2;
							if (FRand() < 0.4)
								sgBuilding(sgB).Grade = 3;
							// Build faster than normal.  Randomize for twinkle! :D
							// TODO: even prettier (but harder) would be to slightly stagger the spawning.
							// sgBuilding(sgB).BuildTime = sgBuilding(sgB).BuildTime / (2+FRand()*4);
							// sgBuilding(sgB).Energy = 75.0;
							// sgBuilding(sgB).Energy = sgBuilding(sgB).MaxEnergy;
							// sgBuilding(sgB).SCount = sgBuilding(sgB).SCount / (3+FRand()*7);
							// sgBuilding(sgB).SCount = sgBuilding(sgB).SCount / (3+FRand()*3);
							sgBuilding(sgB).SCount = (20 + FRand()*80);
							// sgBuilding(sgB).Health = 75.0;
							// sgBuilding(sgB).DoneBuilding = True;
							// InfoLog("SiegeForever.LoadBuildingsType("$TypeI$"): Spawned "$sgB$" ("$Pawn(sgB.Owner).PlayerReplicationInfo.Team$")");
							countSpawned[team]++;
						}
					} // else don't spawn it, for fairness!
				}
				k = l+1;
			} else {
				break;
			}
		}
	}
	if (countSpawned[0]>0 || countSpawned[1]>0) {
		if (bBroadcastInfo) {
			BroadcastMessage("Spawned "$countSpawned[0]$" x "$StrAfterLast(type,".")$" for Red, and "$countSpawned[1]$" for Blue.");
		}
		InfoLog("Spawned "$countSpawned[0]$" "$type$"s for Red, and "$countSpawned[1]$" for Blue.");
	}
	if (countSpawned[0]==0 && countSpawned[1]==0 && (countStored[0]>0 || countStored[1]>0)) {
		WarnLog("Blocked loading of "$type$" although redcount="$countStored[0]$" and bluecount="$countStored[1]);
	}
	// LoadedTypes = LoadedTypes $ ":" $ type $ ":";
}

function SaveBuildings() {
	local int i,TypeI,team,count;
	local string SavedTypes,type,map;
	local sgBuilding A;

	count = 0;
	InfoLog("SaveBuildings() searching for siege buildings like "$ class'sgBuilding');
	foreach AllActors(class'sgBuilding',A) {
		if (!A.IsA('sgBaseCore')) {
			count++;
		}
	}
	InfoLog("SaveBuildings() saw "$count);
	//// This check just ensures we don't override old map data, when we don't even have any buildings to save anyway.
	if (count == 0) {
		// No buildings to save.  If invoked by user, as opposed to auto-run, we should really tell them we failed.
		return;
	}

	map = GetMap();
	// i = FRand()*MaxRecords;
	SavedTypes="";
	TypeI=-1; // just for the logging at the end
	count = 0;
	foreach AllActors(class'sgBuilding',A) {
		if (A.IsA('sgBaseCore')) // Buildings we don't save
			continue;
		type = String(A.class);
		TypeI = GetTypeI(type);
		if (TypeI==-1) {
			continue; // For some reason we couldn't get a type index for this building.  (Never actually happens!)
		}
		if (Instr(SavedTypes,":"$type$":")==-1) {
			// New type:
			SavedTypes = SavedTypes $ ":"$type$":";
			for (team=0;team<MaxTeams;team++) {
				i = GetBuildingsI(map,type,team);
				if (!bRememberOld)
					BuildingsData[i] = ""; // BUG: We only clear old for those types that we search (those currently on the map).
				foreach AllActors(class'sgBuilding',A) {
					// if (String(A.class) == type && Pawn(A.Owner).PlayerReplicationInfo.Team == team) {
					if (String(A.class) == type && A.Team == team) {
						if (Instr(BuildingsData[i],A.Location $ ":") == -1) {
							TrimRecord(i);
							BuildingsData[i] = BuildingsData[i] $ A.Location $ ":";
							count++;
						}
					}
				}
			}
		}
	}
	SaveConfig();
	// I'm not sure (TypeI+1) is a good estimate, probably CountOfStr(SavedTypes,":")/2 is better ^^
	if (bBroadcastSaves) {
		BroadcastMessage("Saved "$(TypeI+1)$" types of building, "$count$" new.");
	}
	InfoLog("Saved "$(TypeI+1)$" types of building, "$count$" new.");
}

function int GetBuildingsI(String map, String type, int team) {
	local int i,j,k;
	local String key;
	team = FixTeamForAssault(team);
	i = (team % MaxTeams); // 0-3
	j = (GetTypeI(type) % MaxTypes);
	k = (GetMapI(map) % MaxMaps);
	// key = map $ ":" $ type $ ":" $ team $ ":";
	// return i + (j * 2) + (k * MaxTypes*2);
	return i + j*MaxTeams + k*MaxTeams*MaxTypes;
}

function int GetMapI(String map) {
	local int i;
	local int type,team;
	// local int smallestI,smallestCount;
	// smallestI = 0; smallestCount = -1;
	for (i=0;i<MaxMaps;i++) {
		if (Maps[i] ~= map) {
			return i;
		}
		// Empty slot:
		if (Maps[i] ~= "") {
			break;
		}
		// myCount = Len(i*MaxTypes*MaxTypes)+Len
		// No dammit it's hard to count because they are split over different fields
	}
	if (i==MaxMaps) {
		i = MaxMaps*FRand();
		// i = smallestI;
		if (bBroadcastInfo) {
			BroadcastMessage("SiegeForever: Ran out of slots for maps!  "$Maps[i]$" will be replaced by "$map);
		}
		WarnLog("SiegeForever: Ran out of slots for maps!  "$Maps[i]$" will be replaced by "$map);
	}
	Maps[i] = map;
	WarnLog("Clearing all data for map "$i$" ("$map$")");
	for (type=0;type<MaxTypes;type++)
		for (team=0;team<MaxTeams;team++)
			BuildingsData[ GetBuildingsI(map,Types[type],team) ] = "";
	return i;
}

function int GetTypeI(String type) {
	local int i;
	local int map,team;
	for (i=0;i<MaxTypes;i++) {
		if (Types[i] ~= type) {
			return i;
		}
		/*
		#ifdef AUTO_SWITCH_VERSION
		if (AfterFirst(Types[i],".") ~= AfterFirst(type,".")) {
			WarnLog("Playing version "$GetSiegeVersion()$", converting "$ Types[i] $" to "$type);
			Types[i] = type;
			return i;
		}
		#endif
		*/
		// Empty slot:
		if (Types[i] ~= "") {
			break;
		}
	}
	if (i==MaxTypes) {
		i = MaxTypes*FRand();
		if (bBroadcastInfo) {
			BroadcastMessage("SiegeForever: Ran out of slots for types!  "$Types[i]$" will be replaced by "$type);
		}
		WarnLog("SiegeForever: Ran out of slots for types!  "$Types[i]$" will be replaced by "$type);
	}
	Types[i] = type;
	WarnLog("Clearing all data for type "$i$" ("$type$")");
	for (map=0;map<MaxMaps;map++)
		for (team=0;team<MaxTeams;team++)
			BuildingsData[ GetBuildingsI(Maps[map],type,team) ] = "";
	return i;
}

function String GetMap() {
	local int i;
	i = Instr(""$Self,".");
	return Left(""$Self,i);
}

function int FixTeamForAssault(int team) {
	if (!Level.Game.IsA('Assault')) {
		return team;
	} else {
		if (Assault(Level.Game).Attacker.TeamIndex == 0)
			return team;
		else
			return 1 - team;
	}
}

function bool HandleEndGame() {
	if (bSaveAtEnd)
		SaveBuildings();
	return Super.HandleEndGame();
}

#include "../../JLib/jlib.uc.jpp"

