// vim: filetype=uc
// This is an attempt to add the Siege constructor to any gametype.
// But I think we will need a custom constructor and HUD, since e.g. SiegeGI(Level.Game).MaxRU is not available!
// Ah actually we get away with that.  But I did manage to get negative RU, and then DOWNgraded one of my buildings!  >.<
// DONE: sgProtectors KILL players!  Fixed this by copying over ReduceDamage().
// BUG DONE: HUD info, such as the flags, is overriden by sgHUD.  Recommend extending sgHUD, and getting it to call the original HUD's render functions.  Done for CTF.
// DONE: We will definitely need to block some things, e.g. Teleporters in CTF, Containers+ContainerXs on flagspots, Containers+ContainerXs at key points on AS maps.
// DONE: Currently MaxRU does not grow.  Although there is code for it in ScoreKill.  =/
// DONE: Teamkilling was on, because I wasn't calling Super.ReduceDamage().
// DONE: You can exceed your MaxRU by leeching.  Hack fixed in Tick().
// CONSIDER TODO: Suppliers will not give you any new weapons.  If we want it to, we could do like SiegeGI, and give each player every weapon with 0 ammo when they spawn.

// TODO: SiegeDM has a problem with damage on players of the same colour.  Either let them damage each other, or make sure everyone who joins goes on a smaller team ( = 5 team TDM).

// DONE: When I upgraded to SiegeXXL2f, and played with a bunch of SiegeAnywhere mutators, I could not upgrade my buildings!
// TODO: SiegeCTF friendly fire is active for minigun but not shock primary!  sgProtectors kill us!

#ifndef SiegeAnywhereHUDType
	#define SiegeAnywhereHUDType class'SiegeAnywhereHUD'
#endif

// #define INCLUDE_BUILDOPTION_ADDER
//// See also: SIEGEANYWHERE_ADD_TO_CONSTRUCTOR

var config float StartingMaxRU, StartingRU;
var config float FriendlyFireScale;
var config bool bAllWeapons;
var config bool bNoAmmo;
var config bool bLogging;

// #define RUGainedPerKill 75
#define RUGainedPerKill 100
#define RULostPerDeath 20
#define RULostPerSuicide 50
#define RUMaxExpansionRate 50

//// I want 20 or even 50.
//// But we keep getting killed by sgProtectors!
//// Setting 10 seems to fix this.
#define sgProtectorsStopAt 32
// #define sgProtectorsStopAt 20
// #define sgProtectorsStopAt 10

// var class<HUD> OriginalHUDType;

// #define DebugLog(X) 
#define DebugLog(X) if (bLogging) { Log(X); }
#define WarnLog(X) Log(X);

function PreBeginPlay() {
	Super.PreBeginPlay();
	/*
	// This was causing unwanted gamegoal messages to appear in SiegeAssault.
	// Better to let admins set default values in the config, or individual gametypes can set it in their defaultproperties.
	if (TeamGamePlus(Level.Game) != None) {
		if (TeamGamePlus(Level.Game).GoalTeamScore < 15)
			TeamGamePlus(Level.Game).GoalTeamScore = 20; // I don't think this works.  If we do get it working, we should also set TimeLimit a bit higher.  ;)  But maybe better if the admin just sets it in the GameType config.
	}
	*/
}

function PostBeginPlay() {
	Super.PostBeginPlay();
	// OriginalHUDType = Level.Game.HUDType;
	Level.Game.HUDType = SiegeAnywhereHUDType;
	// DebugLog(Self$": Original HUD type "$OriginalHUDType$" overriden by "$Level.Game.HUDType);
	// CONSIDER: we could set GoalTeamScore to 0, so the game goes the full time.
	Level.Game.GameName = Level.Game.GameName $ " Sieged";
	Enable('Tick');
	// Global tweaks
	class'sgProtProj'.default.MomentumTransfer /= 4;
	class'sgSProtProj'.default.MomentumTransfer /= 4;
}

event PlayerPawn Login(string portal, string options, out string error, class<PlayerPawn> spawnClass) {
	local PlayerPawn newPlayer;
	local class<PlayerReplicationInfo> priClass;

	// Ugly hack to spawn the correct type of PRI
	priClass = spawnClass.default.PlayerReplicationInfoClass;
	spawnClass.default.PlayerReplicationInfoClass = class'sgPRI';
	newPlayer = Super.Login(portal, options, error, spawnClass);
	spawnClass.default.PlayerReplicationInfoClass = priClass;

	sgPRI(newPlayer.PlayerReplicationInfo).MaxRU = StartingMaxRU;
	sgPRI(newPlayer.PlayerReplicationInfo).RU = StartingRU;

	return newPlayer;
}

function AddDefaultInventory(Pawn p) {
	local sgConstructor cons;
	local Translocator t;

	local int i;
	local class<Weapon> weaponClass;
	local Weapon w;

	local Inventory inv;

	//// Let's not call parent.  We try to add everything we need here.
	// Super.AddDefaultInventory(p);

	// Does player have a constructor already?
	cons = sgConstructor(p.FindInventoryType(class'sgConstructor'));
	// DONE: If he has an sgConstructor which is not a SiegeAnywhereConstructor, destroy it!
	if (SiegeAnywhereConstructor(cons) == None) {
		p.DeleteInventory(cons);
		cons.Destroy();
		cons = None;
	}
	// If player doesn't have a SiegeAnywhereConstructor, give him one:
	if (cons == None)
		cons = SiegeAnywhereConstructor(p.FindInventoryType(class'SiegeAnywhereConstructor'));
	if (cons == None) {
		// cons = Spawn(class'sgConstructor',p,,,rot(0,0,0));
		cons = Spawn(class'SiegeAnywhereConstructor',p,,,rot(0,0,0));
		// DebugLog("SiegeAnywhere.ModifyPlayer(" $ p.getHumanName() $ ") Adding cons = " $ cons);
		cons.GiveTo(p);
	}

	// If player has a Translocator, replace it with an sgTranslocator, which prevents players from telefragging buildings.
	// TODO: This should really be done in CheckReplacement() or something, in the rare case of a player obtained a translocator not from respawning.
	t = Translocator(p.FindInventoryType(class'Botpack.Translocator'));
	if (t != None) {
		t.Destroy();
		// t = Spawn(class'sgTranslocator',p,,,rot(0,0,0));
		t = Spawn(class'SiegeAnywhereTranslocator',p,,,rot(0,0,0)); // I thought that by calling it "Translocator", the user binds might still work, but they didn't.
		t.GiveTo(p);
	}

	if (bAllWeapons) {
		// Copied from SiegeGI (and minimalised?)
		// DOES NOT WORK WELL!
		// We end up getting two of each type of weapon, and there are a lot of log errors.
		for (i=0;i<16;i++) {
			weaponClass = class'SiegeGI'.default.WeaponClasses[i];
			if (weaponClass == None) {
				continue;
			}
			// If player already have one, remove it.
			inv = p.FindInventoryType(weaponClass);
			if (inv != None) {
				p.DeleteInventory(inv);
				inv.Destroy();
			}
			// Create new one
			w = Spawn(weaponClass);
			if (w != None) {
				DebugLog(Self$".AddDefaultInventory(): Spawned "$w$" giving it to "$p);
				// Add it
				w.GiveTo(p);
				if (bNoAmmo) {
					// Enforcer gets ammo, nothing else does!
					if (Enforcer(w) != None) {
						if (w.AmmoType != None) {
							w.AmmoType.AmmoAmount = 0;
						}
					}
				}
			}
		}
	}

	#ifdef INCLUDE_BUILDOPTION_ADDER
	Inv = Spawn(class'sgBuildOptionAdder');
	if (Inv == None) {
		WarnLog(Self$".ModifyPlayer("$P.getHumanName()$") Warning! Failed to spawn sgBuildOptionAdder!");
	} else {
		inv.Instigator = p;
		inv.BecomeItem();
		p.AddInventory(Inv);
		DebugLog("Gave "$inv$" to "$p.getHumanName());
	}
	#endif


}

// CONSIDER: Does this ever get called.  Is it a mutator or a gametype function?
function ScoreKill(Pawn killer, Pawn other) {

	// We adjust RU here, but leave it to our parent class to score kills/deaths, and call the mutator chain.

	if ( killer == other || killer == None ) { // Any form of suicide
		// if ( other.PlayerReplicationInfo != None )
			// other.PlayerReplicationInfo.Score -= 1;
		if ( sgPRI(other.PlayerReplicationInfo) != None ) {
			sgPRI(other.PlayerReplicationInfo).AddRU(-RULostPerSuicide);
			if (sgPRI(other.PlayerReplicationInfo).RU < 0)
				sgPRI(other.PlayerReplicationInfo).RU = 0;
		}
	} else if ( killer != None ) {
		sgPRI(killer.PlayerReplicationInfo).sgInfoKiller++;
		// killer.KillCount++;
		if ( killer.bIsPlayer && other != None &&
				other.bIsPlayer &&
				killer.PlayerReplicationInfo.Team != other.PlayerReplicationInfo.Team )
		{
			// killer.PlayerReplicationInfo.Score += 1;
			if ( sgPRI(killer.PlayerReplicationInfo) != None ) {
				sgPRI(killer.playerreplicationinfo).AddRU(RUGainedPerKill);
				if (sgPRI(killer.PlayerReplicationInfo).RU > sgPRI(killer.PlayerReplicationInfo).MaxRU) {
					sgPRI(killer.PlayerReplicationInfo).MaxRU += RUMaxExpansionRate;
					if (sgPRI(killer.PlayerReplicationInfo).RU > sgPRI(killer.PlayerReplicationInfo).MaxRU) {
						sgPRI(killer.PlayerReplicationInfo).RU = sgPRI(killer.PlayerReplicationInfo).MaxRU;
					}
				}
			}
		}
		if ( sgPRI(other.PlayerReplicationInfo) != None ) {
			sgPRI(other.PlayerReplicationInfo).AddRU(-RULostPerDeath);
			if (sgPRI(other.PlayerReplicationInfo).RU < 0)
				sgPRI(other.PlayerReplicationInfo).RU = 0;
		}
	}
	// other.DieCount++;

	// BaseMutator.ScoreKill(Killer, Other);
	Super.ScoreKill(killer,other);
}

// TODO: We may refactor this into the SiegeAnywhere mutator.
simulated event Tick(float DeltaTime) {
	local PlayerPawn p;
	Super.Tick(DeltaTime);
	// Since there are no cores, siege code cannot check when we exceed MaxRU, e.g. by leeching or from supermines.
	// So we check here.
	// We cap RU at MaxRU.  Currently the only way to expand your MaxRU is by fragging, as in ScoreKill() below.
	foreach AllActors(class'PlayerPawn', p) {
		if (sgPRI(p.PlayerReplicationInfo) != None)
			if (sgPRI(p.PlayerReplicationInfo).RU > sgPRI(p.PlayerReplicationInfo).MaxRU)
				sgPRI(p.PlayerReplicationInfo).RU = sgPRI(p.PlayerReplicationInfo).MaxRU;
	}
}

function int ReduceDamage(int damage, name damageType, Pawn injured,  Pawn instigatedBy) {
	local string sMessage;
	local sgSpawnProt sgSP;

	if (instigatedBy != None && injured != None && injured.bIsPlayer && instigatedBy.bIsPlayer
			&& injured.PlayerReplicationInfo.Team != instigatedBy.PlayerReplicationInfo.Team)
	{
		if (injured != instigatedBy) {
			sgSP=sgSpawnProt(injured.FindInventoryType(class'sgSpawnProt'));
			if (sgSP != None ) {
				//instigatedBy.TakeDamage(damage, instigatedBy, instigatedBy.Location, vect(0,0,0), 'exploded');
				sMessage="Player "@injured.PlayerReplicationInfo.PlayerName@" is spawn protected.";

				if (instigatedBy.PlayerReplicationInfo != None)
					instigatedBy.ClientMessage(sMessage);

				damage=0;
				return damage;
			}
		} else {
			sgSP=sgSpawnProt(instigatedBy.FindInventoryType(class'sgSpawnProt'));
			if ( sgSP != None )
				sgSP.DisableProt();
		}
	}

	//// DONE: CTFGame was throwing Accessed Nones - maybe we should implement what DM.ReduceDamage() does.
	// damage = Super.ReduceDamage(damage, damageType, injured, instigatedBy);

	Damage = DMPReduceDamage(Damage,DamageType,injured,instigatedBy);

	// This is copied from TeamGamePlus:
	if ( instigatedBy != None && (instigatedBy != injured) && injured.bIsPlayer && instigatedBy.bIsPlayer
			&& (injured.PlayerReplicationInfo.Team == instigatedBy.PlayerReplicationInfo.Team) )
	{
		if ( injured.IsA('Bot') )
			Bot(Injured).YellAt(instigatedBy);
		Damage = Damage * FriendlyFireScale;
	}

	// Un-done - Self harm is quartered, so hammers are still possible under 20hp:
	/*
	if (instigatedBy == injured) {
		damage = damage/4.0;
		return damage;
	}
	*/

	/*
	if ( sgBaseCore(injured) != None )
	{
		if ( instigatedBy != None &&
				(SniperRifle(instigatedBy.Weapon) != None ||
				 Ripper(instigatedBy.Weapon) != None) &&
				VSize(injured.Location - instigatedBy.Location) >
				MaxCoreSnipeDistance ) {
			damage /= 10;
			sgPRI(instigatedBy.PlayerReplicationInfo).sgInfoCoreKiller+=damage;
			return damage;

		}
	}
	else*/

	// Reduce sgProtector damage against players (and anything that isn't a building).
	// TODO: unfortunately we can't reduce boost - only a mutator can
	if ( (sgProtector(instigatedBy)!=None || damageType=='sgSpecial') && sgBuilding(injured)==None && damage>0) {
		// This is from a Protector or SuperPro, it doesn't kill.
		// Since the Siege pros are a bit strong, we go gentle:
		damage = damage / 8;
		if (damage < 1)
			damage = 1;
		if (injured.Health<=sgProtectorsStopAt) {
			damage = 0;
		} else if (injured.Health-damage <= sgProtectorsStopAt) {
			damage = injured.Health - sgProtectorsStopAt;
			// injured.Health = sgProtectorsStopAt;
		}
	}
	if (sgProtector(instigatedBy) != None && damageType != 'sgSpecial') {
		DebugLog(Self$".ReduceDamage() Warning: "$instigatedBy$" just gave "$injured$" damage of unknown type: "$damageType);
		// If this happens, it means the code above will not have acted, although it should have.
	}
	/*
	*/

	if (injured != None && instigatedBy != None
			&& injured.PlayerReplicationInfo != None
			&& instigatedBy.PlayerReplicationInfo != None
			&& injured.PlayerReplicationInfo.Team != instigatedBy.PlayerReplicationInfo.Team
			&& sgPRI(instigatedBy.PlayerReplicationInfo) != None
	)
		sgPRI(instigatedBy.PlayerReplicationInfo).sgInfoBuildingHurt+=damage;
	return damage;
}

// Copied from DeathMatchPlus:
function int DMPReduceDamage(int Damage, name DamageType, pawn injured, pawn instigatedBy) {
	if (injured.Region.Zone.bNeutralZone)
		return 0;

	if ( instigatedBy == None)
		return Damage;

	if ( bHardCoreMode )
		Damage *= 1.5;
	if ( bNoviceMode && !bThreePlus )
	{
		if ( instigatedBy.bIsPlayer && (injured == instigatedby) && (Level.NetMode == NM_Standalone) )
			Damage *= 0.5;

		//skill level modification
		if ( instigatedBy.IsA('Bot') && injured.IsA('PlayerPawn') )
		{
			if ( ((instigatedBy.Weapon != None) && instigatedBy.Weapon.bMeleeWeapon) 
				|| ((injured.Weapon != None) && injured.Weapon.bMeleeWeapon && (VSize(injured.location - instigatedBy.Location) < 600)) )
				Damage = Damage * (0.76 + 0.08 * instigatedBy.skill);
			else
				Damage = Damage * (0.25 + 0.15 * instigatedBy.skill);
		}
	}
	return (Damage * instigatedBy.DamageScaling);
}

// To stop Accessed Nones in CTF games:
// TODO CONSIDER: move this to SiegeCTF.uc.jpp, and see if other gametypes are ok.  Also, would be good to work out why Accessed Nones are being logged.
function bool FindSpecialAttractionFor(Bot aBot) {
	return false;
}
function byte PriorityObjective(Bot aBot) {
	return 0;
}
function Actor SetDefenseFor(Bot aBot) {
	return None;
}
//// disabled for TESTING: I don't see why the CTF version of this would break, although it might break in some of the other gametypes we override.
// function byte AssessBotAttitude(Bot aBot, Pawn Other) {
	// return 3; // teammate - don't attack
// }
function float GameThreatAdd(Bot aBot, Pawn Other) {
	return 0;
}

/*
// DIDN'T WORK!  To avoid the error of Assault displaying "20 frags wins the match":
event InitGame( string Options, out string Error ) {
	Super.InitGame(Options,Error);
}
*/

// event Timer() {
// }





defaultproperties {
	StartingMaxRU=300
	StartingRU=1
	FriendlyFireScale=0
	bAllWeapons=True
	bNoAmmo=True
	bLogging=True
}


