/** This file was auto-generated by jpp.  You probably want to be editing ./PostBox.uc.jpp instead. **/



class PostBox expands Mutator config(PostBox);

var config bool bAcceptSpokenCommands;
var config bool bAcceptMutateCommands;
var config bool bSwallowSpokenCommands;

var config String mailFrom[1024];
var config String mailTo[1024];
var config String mailDate[1024];
var config String mailMessage[1024];

defaultproperties {
  bAcceptSpokenCommands=True
  bAcceptMutateCommands=True
  bSwallowSpokenCommands=True
}

function PostBeginPlay() {
 // If we were not added as a mutator, but run in some other way (e.g. as a ServerActor), then we need to register as a mutator:
   // Level.Game.BaseMutator.AddMutator(Self);

 // Register to receive spoken messages in MutatorTeamMessage() below:
 if (bAcceptSpokenCommands) {
  Level.Game.RegisterMessageMutator(Self);
 }

}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
 local bool hideMessage;
 hideMessage = False;
 if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
  hideMessage = CheckMessage(Mid(Msg,InStr(Msg,":")+1), PlayerPawn(Sender));
 }
 return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep) && (!hideMessage || !bSwallowSpokenCommands);
}

function Mutate(String str, PlayerPawn Sender) {
 if (bAcceptMutateCommands) {
  CheckMessage(str, Sender);
 }
 Super.Mutate(str, Sender);
}

// Returns True if the command was recognised.
function bool CheckMessage(String line, PlayerPawn Sender) {
 local int argCount;
 local String args[256];
 local Actor A;
 local String result;
 local int i,j;
 local String squishedName;
 local String url;

 // Log("PostBox.uc.CheckMessage() ("$Sender$"): "$Msg$"");
 argcount = SplitString(line," ",args);
 // TODO: strip leading "!" if any

 if (StrStartsWith(args[0],"!")) {
  args[0] = Mid(args[0],1);
 }

 if (args[0] ~= "HELP") {
  Sender.ClientMessage("PostBox commands: HELP | MAIL/POST | MAIL/POST <recipient> <message>");
  Sender.ClientMessage("  Note: for delivery, only the letters and numbers in <recipient>'s nick need to match.");
  return True;
 }

 if (args[0] ~= "MAIL" || args[0] ~= "POST") {
  if (args[1] == "") {
   // Check for mail for Sender
   squishedName = squishString(Sender.GetHumanName());
   for (i=0; i<1024; i++) {
    j = -1;
    if (squishString(mailTo[i])==squishedName) {
     j = i;
     Sender.ClientMessage("You have new mail:");
     Sender.ClientMessage(mailFrom[i] $ " -> " $ mailTo[i] $ " @ " $ mailDate[i] $ ": " $ mailMessage[i]);
     mailFrom[i] = "";
     mailTo[i] = "";
     mailDate[i] = "";
     mailMessage[i] = "";
     SaveConfig();
     break;
    }
   }
   if (j == -1) {
    Sender.ClientMessage("You have no new mail.");
   }
  } else {
   // Save message args[2..] for args[1] (from Sender)
   for (i=0; i<1024; i++) {
    if (mailFrom[i] == "" && mailTo[i] == "" && mailDate[i] == "" && mailMessage[i] == "") {
     mailFrom[i] = Sender.GetHumanName();
     mailTo[i] = args[1];
     mailDate[i] = GetDate();
      mailMessage[i] = "";
      for (j=2;j<argcount;j++) { mailMessage[i] = mailMessage[i] $ args[j] $ " "; }
      mailMessage[i] = Left(mailMessage[i], Len(mailMessage[i])-1);
     // Sender.ClientMessage("Message for " $ squishString(mailTo[i]) $ " stored at " $ mailDate[i] $ ".");
     Sender.ClientMessage("Message for " $ squishString(mailTo[i]) $ " has been saved.");
     SaveConfig();
     break;
    }
   }
  }
  return True;
 }

 return False;

}

// Removes all non-alphanumeric characters from a string
function String squishString(String str) {
 local String newStr;
 local int i,c;
 str = Caps(str);
 newStr = "";
 for (i=0; i<Len(str); i++) {
  c = Asc(Mid(str,i,1));
  if ( (c>=Asc("A") && c<=Asc("Z")) || (c>=Asc("0") && c<=Asc("9")) ) {
   newStr = newStr $ Chr(c);
  }
 }
 return newStr;
}
//===============//
//               //
//  JLib.uc.jpp  //
//               //
//===============//
function int SplitString(String str, String divider, out String parts[256]) {
 // local String parts[256];
 // local array<String> parts;
 local int i,nextSplit;
 i=0;
 while (true) {
  nextSplit = InStr(str,divider);
  if (nextSplit >= 0) {
   // parts.insert(i,1);
   parts[i] = Left(str,nextSplit);
   str = Mid(str,nextSplit+Len(divider));
   i++;
  } else {
   // parts.insert(i,1);
   parts[i] = str;
   i++;
   break;
  }
 }
 // return parts;
 return i;
}
function string GetDate() {
    local string Date, Time;
    Date = Level.Year$"-"$PrePad(Level.Month,"0",2)$"-"$PrePad(Level.Day,"0",2);
    Time = PrePad(Level.Hour,"0",2)$":"$PrePad(Level.Minute,"0",2)$"."$PrePad(Level.Second,"0",2);
    return Date$"-"$Time;
}
function string PrePad(coerce string s, string p, int i) {
    while (Len(s) < i)
        s = p$s;
    return s;
}
function bool StrStartsWith(string s, string x) {
 return (InStr(s,x) == 0);
 // return (Left(s,Len(x)) ~= x);
}
// function bool StrEndsWith(string s, string x) {
 // return (Right(s,Len(x)) ~= x);
// }
function bool StrContains(String s, String x) {
 return (InStr(s,x) > -1);
}
function String StrAfter(String s, String x) {
 local int i;
 i = Instr(s,x);
 return Mid(s,i+Len(x));
}
function string StrAfterLast(string s, string x) {
 local int i;
 i = InStr(s,x);
 if (i == -1) {
  return s;
 }
 while (i != -1) {
  s = Mid(s,i+Len(x));
  i = InStr(s,x);
 }
 return s;
}
function string StrBefore(string s, string x) {
 local int i;
 i = InStr(s,x);
 if (i == -1) {
  return s;
 } else {
  return Left(s,i);
 }
}
function string StrBeforeLast(string s, string x) {
 local int i;
 i = InStrLast(s,x);
 if (i == -1) {
  return s;
 } else {
  return Left(s,i);
 }
}
function int InStrOff(string haystack, string needle, int offset) {
 local int instrRest;
 instrRest = InStr(Mid(haystack,offset),needle);
 if (instrRest == -1) {
  return instrRest;
 } else {
  return offset + instrRest;
 }
}
function int InStrLast(string haystack, string needle) {
 local int pos;
 local int posRest;
 pos = InStr(haystack,needle);
 if (pos == -1) {
  return -1;
 } else {
  posRest = InStrLast(Mid(haystack,pos+Len(needle)),needle);
  if (posRest == -1) {
   return pos;
  } else {
   return pos + Len(needle) + posRest;
  }
 }
}
/*



*/
