/** This file was auto-generated by jpp.  You probably want to be editing ./PostBox.uc.jpp instead. **/



class PostBox expands Mutator config(PostBox);

var config bool bAnnounceOnJoin;
var config bool bSuggestReply;
var config bool bSendConfirmationMessage;

var config bool bAcceptSpokenCommands;
var config bool bAcceptMutateCommands;
var config bool bSwallowSpokenCommands;

var config String mailFrom[1024];
var config String mailTo[1024];
var config String mailDate[1024];
var config String mailMessage[1024];

var int lastPlayerChecked;

defaultproperties {
  bAnnounceOnJoin=True
  bSuggestReply=True
  bSendConfirmationMessage=True // TODO: default to False?
  bAcceptSpokenCommands=True
  bAcceptMutateCommands=True
  bSwallowSpokenCommands=True
  lastPlayerChecked=0
}

function PostBeginPlay() {
 // If we were not added as a mutator, but run in some other way (e.g. as a ServerActor), then we need to register as a mutator:
   // Level.Game.BaseMutator.AddMutator(Self);

 // Register to receive spoken messages in MutatorTeamMessage() below:
 if (bAcceptSpokenCommands) {
  Level.Game.RegisterMessageMutator(Self);
 }

 SetTimer(15,True);
}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
 local bool hideMessage;
 hideMessage = False;
 if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
  hideMessage = CheckMessage(Mid(Msg,InStr(Msg,":")+1), PlayerPawn(Sender));
 }
 return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep) && (!hideMessage || !bSwallowSpokenCommands);
}

function Mutate(String str, PlayerPawn Sender) {
 if (bAcceptMutateCommands) {
  CheckMessage(str, Sender);
 }
 Super.Mutate(str, Sender);
}

// Returns True if the command was recognised.
function bool CheckMessage(String line, PlayerPawn Sender) {
 local int argCount;
 local String args[256];
 local Actor A;
 local String result;
 local int i,j;
 local String command;
 local String squishedName;
 local String url;

 // Log("PostBox.uc.CheckMessage() ("$Sender$"): "$Msg$"");
 argcount = SplitString(line," ",args);
 // DONE: strip leading "!" if any
 command = args[0];
 if (StrStartsWith(command,"!")) {
  command = Mid(command,1);
 }

 if (command ~= "HELP") {
  Sender.ClientMessage("PostBox commands:");
  Sender.ClientMessage("  !help | !read | !mail/!post <recipient> <message>");
  // Sender.ClientMessage("  Note: for delivery, only the letters and numbers in <recipient>'s nick need to match.");
  return True;
 }

 if (command ~= "READ") {
  ReadMail(Sender);
  return True;
 }

 if (command ~= "MAIL" || command ~= "POST") {
  if (args[1] == "" || args[2] == "") {
   Sender.ClientMessage("Usage: !mail <part_of_recipient_nick> <message>");
  } else {
   // Save message args[2..] for args[1] (from Sender)
   for (i=0; i<1024; i++) {
    if (mailFrom[i] == "" && mailTo[i] == "" && mailDate[i] == "" && mailMessage[i] == "") {
     mailFrom[i] = Sender.GetHumanName();
     mailTo[i] = args[1];
     mailDate[i] = GetDate();
      mailMessage[i] = "";
      for (j=2;j<argcount;j++) { mailMessage[i] = mailMessage[i] $ args[j] $ " "; }
      mailMessage[i] = Left(mailMessage[i], Len(mailMessage[i])-1);
     // Sender.ClientMessage("Message for " $ squishString(mailTo[i]) $ " stored at " $ mailDate[i] $ ".");
     Sender.ClientMessage("Message for " $ squishString(mailTo[i]) $ " has been saved.");
     SaveConfig();
     break;
    }
   }
  }
  return True;
 }

 return False;

}

// Removes all non-alphanumeric characters from a string
function String squishString(String str) {
 local String newStr;
 local int i,c;
 // str = Caps(str);
 str = Locs(str);
 newStr = "";
 for (i=0; i<Len(str); i++) {
  c = Asc(Mid(str,i,1));
  if ( (c>=Asc("A") && c<=Asc("Z")) || (c>=Asc("0") && c<=Asc("9")) ) {
   newStr = newStr $ Chr(c);
  }
 }
 return newStr;
}

event Timer() {
 CheckForNewPlayers();
}

function CheckForNewPlayers() {
 local Pawn p;
 while (Level.Game.CurrentID > lastPlayerChecked) {
  for (p=Level.PawnList; p!=None; p=p.NextPawn) {
   if (p.IsA('PlayerPawn') && p.PlayerReplicationInfo.PlayerID == lastPlayerChecked) {
    ProcessNewPlayer(PlayerPawn(p));
    break;
   }
  }
  lastPlayerChecked++;
 }
}

function ProcessNewPlayer(PlayerPawn p) {
 if (bAnnounceOnJoin) {
  p.ClientMessage("This server is running the PostBox mutator.");
  p.ClientMessage("You can leave messages for other players with the !mail command.");
 }
 // Check for new mail for this player:
 CheckMailFor(p);
}

function int FindMailFor(PlayerPawn p) {
 local String squishedName;
 local int i;
 // Check for mail for Sender
 squishedName = squishString(p.GetHumanName());
 for (i=0; i<1024; i++) {
  if (mailTo[i] != "" && StrContains(squishedName,squishString(mailTo[i]))) {
   return i;
  }
 }
 return -1;
}

function CheckMailFor(PlayerPawn p) {
 local int i;
 i = FindMailFor(p);
 if (i >= 0) {
  p.ClientMessage("Somebody has left you a message.  Type !read to read it.");
 }
}

function ReadMail(PlayerPawn p) {
 local int i;
 i = FindMailFor(p);
 if (i == -1) {
  p.ClientMessage("You have no new mail.");
 } else {
  // Display message:
  // p.ClientMessage(mailFrom[i] $ " -> " $ mailTo[i] $ " @ " $ mailDate[i] $ ": " $ mailMessage[i]);
  p.ClientMessage("From " $ mailFrom[i] $ " to " $ mailTo[i] $ " at " $ mailDate[i] $ ": " $ mailMessage[i]);
  if (bSuggestReply) {
   p.ClientMessage("You can reply to this message using: !mail "$squishString(mailFrom[i])$" <your_message>...");
  }

  if (!bSendConfirmationMessage || mailFrom[i] ~= "PostMaster") {
   // Clear message:
   mailFrom[i] = "";
   mailTo[i] = "";
   mailDate[i] = "";
   mailMessage[i] = "";
   // TODO: If we don't shunt any later messages up to fill this gap at i, players may end up receiving messages in non-chronological order.
  } else {
   // Send a confirmation message back to the sender, saying their message was received (and by who).
   mailTo[i] = mailFrom[i];
   mailFrom[i] = "PostMaster";
   mailDate[i] = GetDate();
   mailMessage[i] = ""$p.GetHumanName()$" received your message \""$mailMessage[i]$"\"";
  }
  SaveConfig();

  // Does this player have more messages?
  CheckMailFor(p);
 }
}
//===============//
//               //
//  JLib.uc.jpp  //
//               //
//===============//
function int SplitString(String str, String divider, out String parts[256]) {
 // local String parts[256];
 // local array<String> parts;
 local int i,nextSplit;
 i=0;
 while (true) {
  nextSplit = InStr(str,divider);
  if (nextSplit >= 0) {
   // parts.insert(i,1);
   parts[i] = Left(str,nextSplit);
   str = Mid(str,nextSplit+Len(divider));
   i++;
  } else {
   // parts.insert(i,1);
   parts[i] = str;
   i++;
   break;
  }
 }
 // return parts;
 return i;
}
function string GetDate() {
    local string Date, Time;
    Date = Level.Year$"-"$PrePad(Level.Month,"0",2)$"-"$PrePad(Level.Day,"0",2);
    Time = PrePad(Level.Hour,"0",2)$":"$PrePad(Level.Minute,"0",2)$"."$PrePad(Level.Second,"0",2);
    return Date$"-"$Time;
}
function string PrePad(coerce string s, string p, int i) {
    while (Len(s) < i)
        s = p$s;
    return s;
}
function bool StrStartsWith(string s, string x) {
 return (InStr(s,x) == 0);
 // return (Left(s,Len(x)) ~= x);
}
// function bool StrEndsWith(string s, string x) {
 // return (Right(s,Len(x)) ~= x);
// }
function bool StrContains(String s, String x) {
 return (InStr(s,x) > -1);
}
function String StrAfter(String s, String x) {
 local int i;
 i = Instr(s,x);
 return Mid(s,i+Len(x));
}
function string StrAfterLast(string s, string x) {
 local int i;
 i = InStr(s,x);
 if (i == -1) {
  return s;
 }
 while (i != -1) {
  s = Mid(s,i+Len(x));
  i = InStr(s,x);
 }
 return s;
}
function string StrBefore(string s, string x) {
 local int i;
 i = InStr(s,x);
 if (i == -1) {
  return s;
 } else {
  return Left(s,i);
 }
}
function string StrBeforeLast(string s, string x) {
 local int i;
 i = InStrLast(s,x);
 if (i == -1) {
  return s;
 } else {
  return Left(s,i);
 }
}
function int InStrOff(string haystack, string needle, int offset) {
 local int instrRest;
 instrRest = InStr(Mid(haystack,offset),needle);
 if (instrRest == -1) {
  return instrRest;
 } else {
  return offset + instrRest;
 }
}
function int InStrLast(string haystack, string needle) {
 local int pos;
 local int posRest;
 pos = InStr(haystack,needle);
 if (pos == -1) {
  return -1;
 } else {
  posRest = InStrLast(Mid(haystack,pos+Len(needle)),needle);
  if (posRest == -1) {
   return pos;
  } else {
   return pos + Len(needle) + posRest;
  }
 }
}
// Converts a string to lower-case.
function String Locs(String in) {
 local String out;
 local int i;
 local int c;
 out = "";
 for (i=0;i<Len(in);i++) {
  c = Asc(Mid(in,i,1));
  if (c>=65 && c<=90) {
   c = c + 32;
  }
  out = out $ Chr(c);
 }
 return out;
}
