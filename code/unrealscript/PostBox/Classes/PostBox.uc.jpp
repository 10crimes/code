class PostBox expands Mutator config(PostBox);

var config bool bAnnounceOnJoin;
var config bool bSuggestReply;
var config bool bSendConfirmationMessage;

var config bool bAcceptSpokenCommands;
var config bool bAcceptMutateCommands;
var config bool bSwallowSpokenCommands;

var config String mailFrom[1024];
var config String mailTo[1024];
var config String mailDate[1024];
var config String mailMessage[1024];

var int lastPlayerChecked;

defaultproperties {
  bAnnounceOnJoin=True
  bSuggestReply=True
  bSendConfirmationMessage=True // TODO: default to False?
  bAcceptSpokenCommands=True
  bAcceptMutateCommands=True
  bSwallowSpokenCommands=True
  lastPlayerChecked=0
}

function PostBeginPlay() {
	// If we were not added as a mutator, but run in some other way (e.g. as a ServerActor), then we need to register as a mutator:
   // Level.Game.BaseMutator.AddMutator(Self);

	// Register to receive spoken messages in MutatorTeamMessage() below:
	if (bAcceptSpokenCommands) {
		Level.Game.RegisterMessageMutator(Self);
	}

	SetTimer(15,True);
}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
	local bool hideMessage;
	hideMessage = False;
	if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
		hideMessage = CheckMessage(Mid(Msg,InStr(Msg,":")+1), PlayerPawn(Sender));
	}
	return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep) && (!hideMessage || !bSwallowSpokenCommands);
}

function Mutate(String str, PlayerPawn Sender) {
	if (bAcceptMutateCommands) {
		CheckMessage(str, Sender);
	}
	Super.Mutate(str, Sender);
}

// Returns True if the command was recognised.
function bool CheckMessage(String line, PlayerPawn Sender) {
	local int argCount;
	local String args[256];
	local Actor A;
	local String result;
	local int i,j;
	local String command;
	local String squishedName;
	local String url;

	// Log("PostBox.uc.CheckMessage() ("$Sender$"): "$Msg$"");
	argcount = SplitString(line," ",args);
	// DONE: strip leading "!" if any
	command = args[0];
	if (StrStartsWith(command,"!")) {
		command = Mid(command,1);
	}

	if (command ~= "HELP") {
		Sender.ClientMessage("PostBox commands:");
		Sender.ClientMessage("  !help | !read | !mail/!post <recipient> <message>");
		// Sender.ClientMessage("  Note: for delivery, only the letters and numbers in <recipient>'s nick need to match.");
		return True;
	}

	if (command ~= "READ") {
		ReadMail(Sender);
		return True;
	}

	if (command ~= "MAIL" || command ~= "POST") {
		if (args[1] == "" || args[2] == "") {
			Sender.ClientMessage("Usage: !mail <part_of_recipient_nick> <message>");
		} else {
			// Save message args[2..] for args[1] (from Sender)
			for (i=0; i<1024; i++) {
				if (mailFrom[i] == "" && mailTo[i] == "" && mailDate[i] == "" && mailMessage[i] == "") {
					mailFrom[i] = Sender.GetHumanName();
					mailTo[i] = args[1];
					mailDate[i] = GetDate();
						mailMessage[i] = "";
						for (j=2;j<argcount;j++) { mailMessage[i] = mailMessage[i] $ args[j] $ " "; }
						mailMessage[i] = Left(mailMessage[i], Len(mailMessage[i])-1);
					// Sender.ClientMessage("Message for " $ squishString(mailTo[i]) $ " stored at " $ mailDate[i] $ ".");
					Sender.ClientMessage("Message for " $ squishString(mailTo[i]) $ " has been saved.");
					SaveConfig();
					break;
				}
			}
		}
		return True;
	}

	return False;

}

// Removes all non-alphanumeric characters from a string
function String squishString(String str) {
	local String newStr;
	local int i,c;
	// str = Caps(str);
	str = Locs(str);
	newStr = "";
	for (i=0; i<Len(str); i++) {
		c = Asc(Mid(str,i,1));
		if ( (c>=Asc("A") && c<=Asc("Z")) || (c>=Asc("0") && c<=Asc("9")) ) {
			newStr = newStr $ Chr(c);
		}
	}
	return newStr;
}

event Timer() {
	CheckForNewPlayers();
}

function CheckForNewPlayers() {
	local Pawn p;
	while (Level.Game.CurrentID > lastPlayerChecked) {
		for (p=Level.PawnList; p!=None; p=p.NextPawn) {
			if (p.IsA('PlayerPawn') && p.PlayerReplicationInfo.PlayerID == lastPlayerChecked) {
				ProcessNewPlayer(PlayerPawn(p));
				break;
			}
		}
		lastPlayerChecked++;
	}
}

function ProcessNewPlayer(PlayerPawn p) {
	if (bAnnounceOnJoin) {
		p.ClientMessage("This server is running the PostBox mutator.");
		p.ClientMessage("You can leave messages for other players with the !mail command.");
	}
	// Check for new mail for this player:
	CheckMailFor(p);
}

function int FindMailFor(PlayerPawn p) {
	local String squishedName;
	local int i;
	// Check for mail for Sender
	squishedName = squishString(p.GetHumanName());
	for (i=0; i<1024; i++) {
		if (mailTo[i] != "" && StrContains(squishedName,squishString(mailTo[i]))) {
			return i;
		}
	}
	return -1;
}

function CheckMailFor(PlayerPawn p) {
	local int i;
	i = FindMailFor(p);
	if (i >= 0) {
		p.ClientMessage("Somebody has left you a message.  Type !read to read it.");
	}
}

function ReadMail(PlayerPawn p) {
	local int i;
	i = FindMailFor(p);
	if (i == -1) {
		p.ClientMessage("You have no new mail.");
	} else {
		// Display message:
		// p.ClientMessage(mailFrom[i] $ " -> " $ mailTo[i] $ " @ " $ mailDate[i] $ ": " $ mailMessage[i]);
		p.ClientMessage("From " $ mailFrom[i] $ " to " $ mailTo[i] $ " at " $ mailDate[i] $ ": " $ mailMessage[i]);
		if (bSuggestReply) {
			p.ClientMessage("You can reply to this message using: !mail "$squishString(mailFrom[i])$" <your_message>...");
		}

		if (!bSendConfirmationMessage || mailFrom[i] ~= "PostMaster") {
			// Clear message:
			mailFrom[i] = "";
			mailTo[i] = "";
			mailDate[i] = "";
			mailMessage[i] = "";
			// TODO: If we don't shunt any later messages up to fill this gap at i, players may end up receiving messages in non-chronological order.
		} else {
			// Send a confirmation message back to the sender, saying their message was received (and by who).
			mailTo[i] = mailFrom[i];
			mailFrom[i] = "PostMaster";
			mailDate[i] = GetDate();
			mailMessage[i] = ""$p.GetHumanName()$" received your message \""$mailMessage[i]$"\"";
		}
		SaveConfig();

		// Does this player have more messages?
		CheckMailFor(p);
	}
}

#include "/mnt/big/ut/ut_win/JLib/jlib.uc.jpp"

