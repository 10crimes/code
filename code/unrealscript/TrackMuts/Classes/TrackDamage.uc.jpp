// vim: tabstop=2 shiftwidth=2 noexpandtab filetype=uc

class TrackDamage expands Mutator config(TrackMuts);

struct PlayerSettings {
	var bool bNoFlash;         // Flash damage updates instead of putting them in chatlog/console
	var bool bSeeDamageGiven;   // Show damage this player causes
	var bool bSeeDamageReceived;  // Show damage this player receives
	var bool bSeeAllDamage;  // Show all damage that occurs!  (Not yet added)
};

var config bool bAcceptSpokenCommands;
var config bool bAcceptMutateCommands;
var config bool bSwallowSpokenCommands;
var bool bOnlyAdmin; // TODO: config
var config Color SentPainColor,ReceivedPainColor,InfoColor;

var PlayerSettings settings[64];



defaultproperties {
  bAcceptSpokenCommands=True
  bAcceptMutateCommands=True
  bSwallowSpokenCommands=True   // Note: only hides the message for the calling player, not the other players.
  bOnlyAdmin=False
	InfoColor=(R=255,G=255,B=255,A=4)
	SentPainColor=(R=222,G=111,B=0,A=8)
	ReceivedPainColor=(R=222,G=0,B=0,A=16)
}

// function PlayerSettings GetPlayerSettingsFor(PlayerPawn P) {
	// return settings[P.PlayerReplicationInfo.PlayerID % 64];
// }

#define GetPlayerSettingsFor(X) settings[X.PlayerReplicationInfo.PlayerID % 64]

function PostBeginPlay() {
	local Actor A;
	local int i;

	Level.Game.RegisterDamageMutator(Self);

	// TODO:
	// If we were not added as a mutator, but run in some other way (e.g. as a ServerActor), then we need to register as a mutator:
   // Level.Game.BaseMutator.AddMutator(Self);

	// Register to receive spoken messages in MutatorTeamMessage() below:
	if (bAcceptSpokenCommands) {
		Level.Game.RegisterMessageMutator(Self);
	}

}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
	local bool hideMessage;
	hideMessage = False;
	if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
		if (StrStartsWith(Msg,"!")) {
			hideMessage = CheckMessage(Mid(Msg,1), PlayerPawn(Sender));
		}
	}
	return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep) && (!hideMessage || !bSwallowSpokenCommands);
}

function Mutate(String str, PlayerPawn Sender) {
	if (bAcceptMutateCommands) {
		CheckMessage(str, Sender);
	}
	Super.Mutate(str, Sender);
}

// Returns True if the command was recognised (and therefore the player's message could optionally be swallowed).
function bool CheckMessage(String line, PlayerPawn Sender) {
	local int argCount;
	local String args[256];
	local Actor A;
	local String result;
	local int i,j;
	local String squishedName;
	local String url;
	local String rebuilt_string; // CONSIDER: instead of rebuilding the string, we could just use StrAfter(line," ") one or more times.
	local String command;
	// local PlayerSettings ps;
	local String stateStr;

	if (bOnlyAdmin && !Sender.bAdmin) {
		return False;
	}

	// ps = GetPlayerSettingsFor(Sender);
	#define ps GetPlayerSettingsFor(Sender)

	// Log("ActorEditor.CheckMessage() ("$Sender$"): "$Msg$"");
	argcount = SplitString(line," ",args);

	command = args[0];

	if (command ~= "flash") {
		ps.bNoFlash = !ps.bNoFlash;
		stateStr = "on";
		if (ps.bNoFlash)
			stateStr = "off";
		// if (!ps.bNoFlash)
		FlashMessageToPlayer(Sender,"flash = "$stateStr,InfoColor,0,2,true);
		// else Sender.ClearProgressMessages();
		Sender.ClientMessage("Your flash is "$stateStr);
		return True;
	}

	if (command ~= "damage") {
		ps.bSeeDamageGiven = !ps.bSeeDamageGiven;
		stateStr = "off";
		if (ps.bSeeDamageGiven)
			stateStr = "on";
		Sender.ClientMessage("Your show damage is "$stateStr);
		// if (!ps.bNoFlash) 
		FlashMessageToPlayer(Sender,"show damage = "$stateStr,SentPainColor,1,4,True);
		return True;
	}

	if (command ~= "pain" || command ~="mydamage") {
		ps.bSeeDamageReceived = !ps.bSeeDamageReceived;
		stateStr = "off";
		if (ps.bSeeDamageReceived)
			stateStr = "on";
		Sender.ClientMessage("Your show pain is "$stateStr);
		FlashMessageToPlayer(Sender,"show pain = "$stateStr,ReceivedPainColor,7,2,True);
		return True;
	}

	if (command ~= "alldamage") {
		ps.bSeeAllDamage = !ps.bSeeAllDamage;
		stateStr = "off";
		if (ps.bSeeAllDamage)
			stateStr = "on";
		Sender.ClientMessage("show alldamage = "$stateStr);
		FlashMessageToPlayer(Sender,"Your show all damage is "$stateStr,InfoColor,3,2,True);
		return True;
	}

	if (command ~= "HELP") {
		Sender.ClientMessage("TrackDamage commands: flash damage pain alldamage");
		return True;
	}

	return False;

}

function MutatorTakeDamage( out int ActualDamage, Pawn Victim, Pawn InstigatedBy, out Vector HitLocation, out Vector Momentum, name DamageType) {
	local PlayerSettings instigatorSettings;
	local PlayerSettings victimSettings;
	local PlayerPawn pl;
	local String boost;
	local String actualDamageStr;

	if (ActualDamage == 0 && Victim.PlayerReplicationInfo.Team != InstigatedBy.PlayerReplicationInfo.Team)
		actualDamageStr = "(absorbed)"; // shield or armor (or some other reason) caused this to give 0 damage to enemy
	else
		actualDamageStr = ""$ActualDamage;
	if (Victim == InstigatedBy)
		actualDamageStr = actualDamageStr $ " SELF";
	else if (Victim.PlayerReplicationInfo!=None && InstigatedBy.PlayerReplicationInfo!=None && Victim.PlayerReplicationInfo.Team == InstigatedBy.PlayerReplicationInfo.Team)
		actualDamageStr = actualDamageStr $ " TEAM";

	boost = "";
	if (VSize(Momentum) > 0.1) boost = "boost";
	if (VSize(Momentum) > 100) boost = "boost!";
	if (VSize(Momentum) > 500.1) boost = "BOOST";
	if (VSize(Momentum) > 1000.1) boost = "BOOST!";
	if (boost != "")
		boost = boost $ " ("$ Int(VSize(Momentum)) $")";
	// if (boost != "" && Victim.PlayerReplicationInfo.Team == InstigatedBy.PlayerReplicationInfo.Team)
		// boost = "TEAM " $ boost;

	if (PlayerPawn(InstigatedBy) != None) {
		instigatorSettings = GetPlayerSettingsFor(PlayerPawn(InstigatedBy));
		if (instigatorSettings.bSeeDamageGiven) {
			// TODO: damage on multiple players at one moment in time should appear on different lines
			#undef FlashMessage
			#undef SayMessage
			#define FlashMessage Victim.getHumanName()$" -"$actualDamageStr
			#define SayMessage "Damage "$ actualDamageStr $" on "$ Victim.getHumanName() $" type "$ DamageType $" "$ boost
			// Line 0-1 is "You killed"
			// Line ~2 is "Double Kill"
			if (!instigatorSettings.bNoFlash) FlashMessageToPlayer(PlayerPawn(InstigatedBy),FlashMessage,SentPainColor,1,4);
			else PlayerPawn(InstigatedBy).ClientMessage(SayMessage);
		}
	}

	if (PlayerPawn(Victim) != None) {
		victimSettings = GetPlayerSettingsFor(PlayerPawn(Victim));
		if (victimSettings.bSeeDamageReceived)
			#undef FlashMessage
			#undef SayMessage
			#define FlashMessage "You -"$actualDamageStr$" ("$InstigatedBy.getHumanName()$")"
			#define SayMessage "Pain "$ actualDamageStr $" from "$ InstigatedBy.getHumanName() $"'s "$ DamageType$" "$boost
			if (!victimSettings.bNoFlash) FlashMessageToPlayer(PlayerPawn(Victim),FlashMessage,ReceivedPainColor,7,2);
			// else PlayerPawn(Victim).ClientMessage("*HIT* -"$ actualDamageStr $" "$boost$" from "$ InstigatedBy.getHumanName() $"'s type "$ DamageType);
			else PlayerPawn(Victim).ClientMessage(SayMessage);
	}

	// Log("TrackDamage.MutatorTakeDamage(): [-"$ actualDamageStr $"] "$ InstigatedBy.getHumanName() $" -> "$ Victim.getHumanName() $" ("$ DamageType $")");
	foreach AllActors(class'PlayerPawn', pl) {
		if (GetPlayerSettingsFor(pl).bSeeAllDamage) {
			pl.ClientMessage(InstigatedBy.getHumanName() $" caused -"$ actualDamageStr $" on "$ Victim.getHumanName() $" with "$ DamageType $".");
		}
	}

	Super.MutatorTakeDamage(ActualDamage,Victim,InstigatedBy,HitLocation,Momentum,DamageType);
}

function FlashMessageToPlayer(PlayerPawn p, string Msg, Color msgColor, optional int linenum, optional int duration, optional bool bAdditional, optional bool bBeep) {
	if (linenum == 0)
		linenum = 4;
	if (duration == 0)
		duration = 2;
	if (!bAdditional)
		p.ClearProgressMessages();
	p.SetProgressTime(duration);
	p.SetProgressColor(msgColor,linenum);
	p.SetProgressMessage(Msg,linenum);
	if (bBeep)
		p.PlaySound(sound'Beep', SLOT_Interface, 2.5, False, 32, 32);
}

#include "../../JLib/findactor.uc.jpp"

#include "../../JLib/jlib.uc.jpp"

