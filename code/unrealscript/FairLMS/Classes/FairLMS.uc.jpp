// vim: ft=uc ts=3 sw=3 noexpandtab

// TODO: When a player gets the shieldbelt, other players do not see it surround him.
// TODO: Uggla keeps getting two warheads, or respawning with one.  I dunno how this is happening!
// DONE: It seemed Invis was never being given.  And in CTF mode, it seemed health packs were far too popular!  We must use UT_Stealth, Stealth just doesn't work.
// TODO: In the original, the health countdown stops for a few seconds after you make a kill.
// TODO CONSIDER: Maybe we should integrate anti-camper with the health countdown.  We could apply the health countdown only to players who are far from other players, and not moving towards the other players.  Beware - 3 players on a large map might not know HOW to find each other, and might lose health unfairly.  Check values against average?
// TODO: Move some of this class to BonusPowerups, and then let this class add the FairLMS stuff on top.
// FIXED: When running during a CTFGame, if the player runs out of health whilst holding the flag, he/she respawns still holding the flag!
// FIXED: Similar problem with invis during FairLMS.
// TODO: If someone runs out of energy, but you hit him 10 seconds ago, maybe you should get at least a weak late-kill bonus.
// TODO: We didn't really need to give the player those weapons, since LMS will probably suit them up anyway.
//       But maybe we aren't in the LMS gametype.  In which case, we should probably remove weapons and other pickup items from the map.
// WAS NOT A BUG: Were some of the armor+pads getting left invisible on the spawnpoints?  I kept spawning with 150, but maybe that was done by normal LMS.
// TODO: Anti-camper anti-idler detection.  Otherwise you still get some advantage by sitting on your spawnpoint - people might avoid killing you because you are idling and they don't wanna be lame!
// Redeemer fire works but not altfire.
// DONE: WarheadLauncher DM-Liandri.WarheadLauncher0 (Function Botpack.WarheadLauncher.AltFire:002C) Accessed None
// DONE: WarheadLauncher DM-Liandri.WarheadLauncher12 (Function Botpack.WarheadLauncher.RateSelf:0027) Accessed None
// FIXED: LMS seems a bit stingy on initial ammo.
// TODO: It is sometimes a bit laggy to load a new external object (e.g. the siege jetpack) during play due to DynamicLoadObject() calls.
//       Since one is likely to spawn during the game anyway, have server and client pre-load the Powerups resources before the game starts.
//       But do we need to spawn one in order to get the client to load it?
// TODO: I think you only get given one WarheadLauncher per life.  This is a feature, so ensure it stays that way!
// DONE: Detect last 2 players, display it, and then stop giving powerups+health.
// DONE: Some errors from the bots - are they due to pathing on spawned items which they think are navigable to/through?  Seemed to be fixed with some more additions to GiveInventory().
// DONE: Rather than watch health go down 2 points each second, set the timer frequency calculated to remove 1hp each call to Timer().
// DONE: zeroping weapons not working, piglet wants "+50" txt, or happy with healthsound instead.
//       initial armour and health got set by LMS.
// DONE: (i think) Player is Out.
// FIXED: invis lasts too long
// DONE: Ammo is not working!
// In LMS fragged players are not dropping their weapons?!  Then we really must increase their ammo!
// FIXED: Still showing "Large Bullets"
// TODO: Make it an admin option, whether sounds are heard by all or only the relevant player.
// TODO CONSIDER: If it's a TeamGame, spawn the same Powerup for each team at semi-regular intervals, somewhere in front of their player with most health (who is in their base, or least under threat).
//                In Siege games, makes this dependent on certain conditions.
// DONE Remove logging, or #define it to be optional and efficient.
// TODO: Invis does not wear off!
// TODO: bSpawnPowerupsAsDroppedPickups

// #define DEBUG

class FairLMS expands Mutator config(FairLMS);

struct LMSBonus {
	var String Type;
	var Color Color;
	var String Name;  // If not set, defaults to item's ItemName.
	var String Sound; // If not set, defaults to item's PickupSound.
	var int Ammo; // If not set, defaults to weapon's default ammo x 4.
};

var config bool bLogging;
#ifdef DEBUG
var config bool bDebugLogging;
#endif
var config bool bGiveWeapons;
var config int InitialArmour,InitialHealth;
var config float HealthLostPerSec,HealthGainedPerKill;
var config bool bGivePowerups;
var config int FragsForPowerup;
var config bool bBroadcastPowerups;
var config bool bInformHealth;
var config bool bSpawnPowerupsAsDroppedPickups;
var config bool bPainSounds;
var config Color MessageColor;
var config Sound PowerupSound;
var config Sound WarningSound;

var config String InitialWeapon[20];
var config LMSBonus Powerup[25];

var int KillsSinceSpawn[64];
var bool bGameStarted,bTwoPlayersLeft;

// These turned out pretty good: FairLMS.Timer() at 275.035034 gap 0.477356 average 0.500064 
// var float TimerLast;
// var float TimerAverage;
// var int TimerCount;

function LogWarn(String Msg) {
	// BroadcastMessage("[FairLMS] "$Msg);
	Log("[FairLMS] Warning: "$Msg);
}

#define MaybeLog(Msg) if (bLogging) { Log("[FairLMS] Log: " $ Msg); }

function PostBeginPlay() {
	local Mutator m;
	Super.PostBeginPlay();
	foreach AllActors(class'Mutator',m) {
		if (m.class == Self.class && m!=Self) {
			Log(Self$".PostBeginPlay() Found another copy "$m$" so self-destructing.");
			Self.Destroy();
			return;
		}
	}
	if (HealthLostPerSec > 0) {
		SetTimer(1.0/HealthLostPerSec,True);
	} else {
		SetTimer(1,True);
	}
	// if (HealthLostPerSec>0 || HealthGainedPerKill>0)
	if (HealthLostPerSec > 0)
		Level.Game.GameName = "Anti-Idle "$ Level.Game.GameName;
	if (bGivePowerups) {
		if (InStr(Level.Game.GameName," with ")>=0)
			Level.Game.GameName = Level.Game.GameName $" and Bonus Powerups";
		else
			Level.Game.GameName = Level.Game.GameName $" with Bonus Powerups";
	}
	if (HealthLostPerSec>0)
		DeathMatchPlus(Level.Game).StartMessage = "Your are losing health!  Kill to stay alive!";

	//// It might have been neater to create a new weapon class.  Although it would need the same name, or player keybinds would break.
	// TESTING: Turn redeemers into mini-redeemers.  I think this is working!
	// TODO CHECK: Do these changes propogate over maps, messing with other types of game, or next round of LMS?
	// CONSIDER: If setting defaults doesn't work, change values after it has spawned.  (CheckReplacement() / IsRelevant()?)
	class'WarheadLauncher'.default.ItemName = "Mini Redeemer";
	class'WarShell'.default.DrawScale = class'WarShell'.default.DrawScale * 0.3;
	class'WarShell'.default.Speed = class'WarShell'.default.Speed * 0.6;
	class'WarShell'.default.Damage = class'WarShell'.default.Damage * 0.3;
	class'WarShell'.default.MomentumTransfer = class'WarShell'.default.MomentumTransfer * 0.3;
	class'GuidedWarShell'.default.DrawScale = class'GuidedWarShell'.default.DrawScale * 0.3;
	class'GuidedWarShell'.default.Speed = class'GuidedWarShell'.default.Speed * 0.6; // BUG: This doesn't seem to work!
	class'GuidedWarShell'.default.Damage = class'GuidedWarShell'.default.Damage * 0.3;
	class'GuidedWarShell'.default.MomentumTransfer = class'GuidedWarShell'.default.MomentumTransfer * 0.3;
	//// TODO: Value sometimes set from PostBeginPlay().  We should intercept just after creation.  bIsRelevant/CheckReplacement?
	class'WarExplosion'.default.DrawScale = class'WarExplosion'.default.DrawScale * 0.3;
	class'WarExplosion2'.default.DrawScale = class'WarExplosion2'.default.DrawScale * 0.3;
	// I think these don't work in Siege, maybe WarheadLauncher gets replaced by sgWarheadLauncher.

	if (bPainSounds) {
		m = Spawn(class'PainSounds',,,);
		Level.Game.BaseMutator.AddMutator(m);
	}
}

event Timer() {
	local Pawn p;
	local PlayerPawn pp;
	local int aliveCount;
	local String players;
	local Inventory inv;
	/*
	if (bLogging) {
		TimerAverage = ( TimerAverage*TimerCount + (Level.TimeSeconds-TimerLast)*1 ) / (TimerCount+1);
		TimerCount++;
		// MaybeLog("FairLMS.Timer() at "$Level.TimeSeconds$" gap "$ (Level.TimeSeconds-TimerLast) );
		MaybeLog("FairLMS.Timer() at "$Level.TimeSeconds$" gap "$ (Level.TimeSeconds-TimerLast) $" average "$TimerAverage);
		TimerLast = Level.TimeSeconds;
	}
	*/
	Super.Timer();
	foreach AllActors(class'Pawn',p) {
		if ((PlayerPawn(p)!=None || Bot(p)!=None) && Spectator(p)==None) {

			// We detect gamestart by looking for a weapon in a player/pawn's inventory.
			if (!bGameStarted) {
				for (Inv=p.Inventory; Inv!=None; Inv=Inv.Inventory) {
					if (Inv.IsA('Weapon')) {
						bGameStarted = True;
						break; // Why?
					}
				}
			}

			if (!bTwoPlayersLeft) {
				// This technique was nice - they always die after the same amount of time.
				// But it caused problems - a player with <=0 HP can't take pickups!
				/*
				p.Health -= 1;
				if (p.Health == 0) {
					// FlashMessage(p,"You are about to die!  Kill to survive!",MessageColor);
					FlashMessage(p,"You have low health ... Kill someone quickly!",MessageColor);
					p.PlaySound(WarningSound,SLOT_Interface,1.0); // Other players can hear this, if they are close.
					p.bUnlit=True;
				}
				if (p.Health <= -15) {
					p.Died(None, 'Suicided', p.Location);
					// TODO: make a puff of smoke appear here!!! xD
				}
				*/
				if (p.Health == 10) {
					// FlashMessage(p,"You are about to die!  Kill to survive!",MessageColor);
					FlashMessage(p,"You have low health ... Kill someone quickly!",MessageColor);
					p.PlaySound(WarningSound,SLOT_Interface,1.0); // TEST: Does this go to the player alone, or all?  All might be fun, probably we should make it a little quiet tho, or 2/3 or 3/4 radius.
					p.bUnlit=True;
				}
				if (p.Health > 1) {
					p.Health -= 1;
				} else {
					if (FRand()<0.2) {
						p.Died(None, 'Suicided', p.Location);
					}
				}
			}

		}

		// Count the number of players still in the game.
		if (   p.getHumanName()!="Player"
		    && p.PlayerReplicationInfo!=None
		    && !p.PlayerReplicationInfo.bIsSpectator
		    && !p.PlayerReplicationInfo.bWaitingPlayer
		    && p.PlayerReplicationInfo.Score>0
		   ) {
			aliveCount++;
			// Update the players string.  (We won't use it anyway if aliveCount>=3)
			if (players == "") {
				players = p.getHumanName();
			} else {
				players = players $ " v " $ p.getHumanName();
			}
		}

		#ifdef DEBUG
		if (bDebugLogging && p.getHumanName()=="Player" && FRand()<0.02) {
			BroadcastMessage("The player who is not a player is a "$p.class.name);
		}
		#endif

	}

	#ifdef DEBUG
	if (bDebugLogging && FRand()<0.1) {
		BroadcastMessage("I see "$ aliveCount $" players: "$players);
	}
	#endif

	// Check to see if there are only 2 players left.
	if (bGameStarted && LastManStanding(Level.Game)!=None && aliveCount==2 && !bTwoPlayersLeft && FRand()<0.2) { // Delay to avoid get overwritten by other messages.
		BroadcastMessage("Two players left: "$players);
		foreach AllActors(class'PlayerPawn',pp) {
			FlashMessage(pp,"Two players left:",MessageColor,3,false);
			FlashMessage(pp,players,MessageColor,4,true);
			// TODO: switch everyone's music >.<  Hmm might be hard, since only the map's track is loaded. :P
			//       but actually ND manages it, altho maybe client-side.
			//       Maybe we can do it by spawning some sound Actor, and triggering it.
		}
		bTwoPlayersLeft = True;
	}
	// This check will turn the multi-player features back on, if a 3rd player joins a few seconds after the game started.
	if (bGameStarted && aliveCount>2) {
		bTwoPlayersLeft = False;
	}

}

function ModifyPlayer(Pawn p) {
	p.bUnlit=False;
	Super.ModifyPlayer(p);
	if (InitialHealth>0)
		p.Health = InitialHealth;
	// p.PlayerReplicationInfo.Armor = InitialArmour;
	GiveInitialInventory(p);
	if (p.PlayerReplicationInfo!=None) {
		KillsSinceSpawn[p.PlayerReplicationInfo.PlayerID%64] = 0;
	}
}

function ScoreKill(Pawn killer, Pawn victim) {
	Super.ScoreKill(killer,victim);
	if (killer != None && killer!=victim) {

		// I was dropping my powerup weapon when dying from crater/suicide etc, during siege games.
		if (TeamGamePlus(Level.Game)!=None) {
			if (killer.PlayerReplicationInfo!=None && victim.PlayerReplicationInfo!=None) {
				if (killer.PlayerReplicationInfo.Team == victim.PlayerReplicationInfo.Team) {
					return;
				}
			}
		}

		if (!bTwoPlayersLeft) {

			// HealthGainedPerKill:
			Killer.bUnlit=False;
			killer.Health += HealthGainedPerKill;
			if (killer.Health > 199) killer.Health = 199;
			// killer.PlaySound(class'Botpack.TournamentHealth'.default.PickupSound,SLOT_Interface,3.0);
			killer.PlaySound(Sound'Botpack.Pickups.UTHealth',SLOT_Interface,3.0); // TEST: I think this is ok, all hear it.
			if (bInformHealth) {
				killer.ClientMessage("You gained "$HealthGainedPerKill$" health for your kill.");
			}

			// bGivePowerups:
			if (killer.PlayerReplicationInfo!=None) {
				KillsSinceSpawn[killer.PlayerReplicationInfo.PlayerID%64] += 1;
				if (bGivePowerups && KillsSinceSpawn[killer.PlayerReplicationInfo.PlayerID%64]%FragsForPowerup == 0) {
					GiveRandomPowerup(killer,victim);
				}
			}

		}
	}
}

function GiveArmor(Pawn p) {
}

function GiveInitialInventory(Pawn p) {
	local Inventory Inv;
	local int i;
	local class<Weapon> wType;
	// local class<Inventory> iType;

	// Give appropriate armour.
	// CONSIDER: Alternatively, give them normal armour, but adjust its Charge.
	if (InitialArmour<50) {
	} else if (InitialArmour>=50 && InitialArmour<100) {
		GivePickupType(p,class'ThighPads');
	} else if (InitialArmour>=100 && InitialArmour<150) {
		GivePickupType(p,class'Armor2');
	} else if (InitialArmour>=150) {
		GivePickupType(p,class'Armor2');
		GivePickupType(p,class'ThighPads');
	}

	if (bGiveWeapons) {
		for (i=0;i<20;i++) {
			if (InitialWeapon[i]!="") {
				wType = class<Weapon>(DynamicLoadObject(InitialWeapon[i],class'class'));
				// iType = class<Inventory>(DynamicLoadObject(InitialWeapon[i],class'class'));
				/*
				Inv = p.FindInventoryType(wType);
				if (Inv == None) {
					// TODO: we could try Spawning and Giving - in which case we should refactor the spawning out of GiveRandomPowerup().
					DeathMatchPlus(Level.Game).GiveWeapon(p,InitialWeapon[i]);
				} else {
					// LogWarn(Self$".GiveInitialInventory() Warning! "$p.getHumanName()$" already had a "$wType$" so re-using it "$Inv);
					MaybeLog(Self$".GiveInitialInventory() Warning! "$p.getHumanName()$" already had a "$wType$" so re-using it "$Inv);
					// Maybe this is not needed.  My actual problem was adding a SniperRifle to a player that already had a zp_SniperRifle.
				}
				*/
				GivePickupType(p,wType);
				// GivePickupType(p,iType);
			}
		}
	}

}

function Inventory GivePickupType(Pawn p, class<Inventory> t) {
	// TODO: Can we just grab the implementation in GiveRandomPowerup()?
	local Inventory Inv;
	Inv = p.FindInventoryType(t);
	if (Inv!=None) {
		MaybeLog(Self$".GivePickupType() "$p.getHumanName()$" already has a "$Inv$" - destroying it.");
		Inv.Destroy();
		Inv = None;
		// This might be a bummer if it destroys the weapon you are currently holding, but I've never seen that happen.
	}
	// In the case of amp at least, re-using is bad because you don't get the fresh charge!
	if (Inv==None) {
		// MaybeLog(Self$".GivePickupType() Spawning a new "$t$" for "$p.getHumanName());
		Inv = Spawn(t,p);
	}
	if (Inv==None) {
		MaybeLog(Self$".GivePickupType() Warning! Failed to spawn a "$t);
	} else {
		GiveInventory(p,Inv);

		// Post-hacks:
		if (Weapon(Inv)!=None) {
			// Really for the redeemer.  CHECK: may not be needed
			if (Weapon(Inv).AmmoType.AmmoAmount<1)
				Weapon(Inv).AmmoType.AmmoAmount = 1;
		}
	}
	return Inv;
}

function GiveInventory(Pawn p, Inventory inv) {
	local Weapon w;

	inv.bHeldItem=True;
	inv.RespawnTime=0;

	w = Weapon(inv);
	if (w!=None) {

		// Handle Weapon:
		w.Instigator = P;
		w.BecomeItem();
		P.AddInventory(w);
		// w.GiveTo(p);
		w.GiveAmmo(P);
		// Not for the redeemer (or other 1 ammo weapons):
		if (Weapon(inv)!=None && Weapon(inv).AmmoType!=None && Weapon(inv).AmmoType.AmmoAmount>1) {
			// Increase ammo x 3
			Weapon(inv).AmmoType.AmmoAmount = Weapon(inv).AmmoType.AmmoAmount * 4; // Now 4 sixpacks instead of 3
		}
		w.SetSwitchPriority(P);
		w.WeaponSet(P);
		w.AmbientGlow = 0;

		// DeathMatchPlus does this to weapons:
		if ( p.IsA('PlayerPawn') )
			w.SetHand(PlayerPawn(p).Handedness);
		else
			w.GotoState('Idle');

	} else {

		// Handle other Inventory item:
		inv.GiveTo(p);
		inv.Activate();

	}
	// DONE: Check out what DeathMatchPlus, and Translocator/GrappleGun do to initialise weapons correctly.
	//       We may be missing something we should do for weapons.  In a game with bots I got: WarheadLauncher DM-Liandri.WarheadLauncher3 (F_nction Botpack.WarheadLauncher.RateSelf:0027) Accessed None
}

function GiveRandomPowerup(Pawn p, Pawn victim) {
	local int i,j;
	local class<Inventory> type;
	local Inventory inv;
	local Color col;
	local Sound resource;
	for (j=0;j<100;j++) {
		i = 25*FRand();
		if (Powerup[i].Type == "")
			continue;

		if (Powerup[i].Type == "FairLMS.AmmoBoost") {
			if (p.Weapon!=None && p.Weapon.AmmoType!=None && p.Weapon.AmmoType.AmmoAmount>=p.Weapon.AmmoType.MaxAmmo/2) {
				// His current weapon has plenty of ammo - don't give him an AmmoBoost
				continue;
			}
			if (bSpawnPowerupsAsDroppedPickups) {
				// We can't drop this as a pickup item, and doing it the normal way looks out-of-place.
				// So we just remove this powerup from the list.
				continue;
			}
			/*
			if (p.Weapon!=None && p.Weapon.AmmoType!=None && p.Weapon.AmmoType.AmmoAmount<=8 && FRand()<0.9) {
				// His current weapon is a bit low - definitely give the AmmoBoost
			} else {
				// We don't know the state of his weapon, or his ammo is "average".
				if (FRand()<0.25)
					continue; // Since this item never enters the inventory, we might offer it too often, so 75% chance of re-roll.
			}
			*/
			for (inv=p.Inventory;inv!=None;inv=inv.Inventory) {
				if (Weapon(inv)!=None) {
					if (Weapon(inv).AmmoType==None) {
						LogWarn("FairLMS.GiveRandomPowerup() Can not boost ammo for "$inv);
					} else {
						if (Weapon(inv).AmmoType.default.AmmoAmount>1) { // Not for deemer
							Weapon(inv).AmmoType.AmmoAmount = Weapon(inv).AmmoType.MaxAmmo;
							// MaybeLog("FairLMS.GiveRandomPowerup() Boosted ammo "$Weapon(inv).AmmoType$" to "$Weapon(inv).AmmoType.AmmoAmount);
						} else {
							LogWarn("FairLMS.GiveRandomPowerup() Not boosting ammo for "$inv);
						}
					}
				}
			}
		} else {
			type = class<Inventory>( DynamicLoadObject(Powerup[i].Type,class'Class') );
			if (type == None) {
				MaybeLog("[FairLMS] Powerup #"$i$" type \""$Powerup[i].Type$"\" does not exist!");
				continue;
			}
			inv = p.FindInventoryType(type);
			if (inv != None) {
				// A bit log spammy:
				// MaybeLog(Self$".GiveRandomPowerup() "$p.getHumanName()$" already has a "$inv);
				// MaybeLog(Self$".GiveRandomPowerup() maybe they don't want another - maybe we could upgrade it?");
				// It seems to me that items *are* being removed from a player's inventory when he loses them.
				// I don't know if warhead 2nd time around is working now.
				continue;
			}
			inv = Spawn(type,p);
			if (inv == None) {
				MaybeLog(Self$".GiveRandomPowerup() Failed to spawn "$type);
				continue;
			}

			if (Powerup[i].Ammo>0 && Weapon(inv)!=None && Weapon(inv).AmmoType!=None) {
				Weapon(inv).AmmoType.AmmoAmount = Powerup[i].Ammo;
			}

			if (bSpawnPowerupsAsDroppedPickups) {
				/*
				inv.BecomePickup();
				inv.SetLocation(Victim.Location+vect(0,0,1)*Victim.CollisionHeight/2);
				inv.Velocity = vect(0,0,200) + VRand()*5;
				inv.SetPhysics(PHYS_Falling);
				*/
				Victim.DropWhenKilled = inv.class;
				//// This isn't really bBroadcastPowerups, it's more like bInformKillerOfPowerup.
				if (bBroadcastPowerups) {
					// Repeated code:
					if (Powerup[i].Name == "")
						Powerup[i].Name = inv.ItemName;
					// TODO: not always grammatically correct.
					// p.ClientMessage(Victim.getHumanName()$" dropped a "$Powerup[i].Name$" for you.");
					// if ends with "s" then "dropped some "
					//// This is grammatically correct, but not accurate.  The player may not have been weilding an amp, or armour.
					if (InStr(Caps(Victim.VoiceType),"FEMALE") > -1) {
						p.ClientMessage("She dropped her "$Powerup[i].Name$".");
					} else {
						p.ClientMessage("He dropped his "$Powerup[i].Name$".");
					}
				}
				// We have established that it will load into the level.  But in
				// fact the engine will spawn it fresh from DropWhenKilled, so we
				// must remove this copy.
				inv.Destroy();
				return;
			}

			// OK we have created the powerup, we can give it to the player:
			GiveInventory(p,inv);

			if (bLogging) {
				MaybeLog("[FairLMS] Gave "$inv$" to "$p);
			}
		}

		// Flash the powerup's message:
		col = Powerup[i].Color;
		if (col.R==0 && col.G==0 && col.B==0) {
			col.R=128+128*FRand(); col.G=128+128*FRand(); col.B=128+128*FRand(); col.A=32;
		}
		if (Powerup[i].Name == "")
			Powerup[i].Name = inv.ItemName;
		FlashMessage(p,"-+- "$Caps(Powerup[i].Name)$" -+-",col);
		if (bBroadcastPowerups) {
			BroadcastMessage(p.getHumanName()$" got the "$Powerup[i].Name);
			// if (InStr("AEIOU",Caps(Left(Powerup[i].Name,1)))>=0)
				// BroadcastMessage(p.getHumanName()$" got an "$Powerup[i].Name);
			// else
				// BroadcastMessage(p.getHumanName()$" got a "$Powerup[i].Name);
		}

		// Play the powerup's sound:
		resource = None;
		if (Powerup[i].Sound != "") {
			resource = Sound(DynamicLoadObject(Powerup[i].Sound,class'Sound'));
		}
		// TEST: Are volumes correct?  One of the imported Invis sounds was a bit loud.  Maybe radius should be reduced in general.
		if (resource != None) {
			p.PlaySound(resource,SLOT_Interface,5.0);
		} else {
			if (Inv.PickupSound != None) {
				p.PlaySound(Inv.PickupSound,SLOT_Interface,5.0);
			} else {
				p.PlaySound(PowerupSound,SLOT_Interface,5.0);
			}
		}

		return;

	}
	if (j==100) {
		MaybeLog(Self$".GiveRandomPowerup() Tried 100 times but could not find a suitable powerup!  Maybe "$p.getHumanName()$" has everything already.");
		// TODO: maybe remove something from his inventory and retry?  Then at least he could get a fresh one.
		if (bBroadcastPowerups)
			BroadcastMessage(p.getHumanName()$" is MAXXED OUT!");
	}

}

function FlashMessage(Pawn p, String msg, Color col, optional int line, optional bool bContinuation) {
	if (PlayerPawn(p)==None)
		return;
	if (line == 0) line=4;
	// msg = Caps(msg) $ "!";
	if (!bContinuation)
		PlayerPawn(p).ClearProgressMessages();
	PlayerPawn(p).SetProgressTime(3.0);
	PlayerPawn(p).SetProgressColor(col,line);
	PlayerPawn(p).SetProgressMessage(msg,line);
}

// Only really needed for development:
function Mutate(String msg, PlayerPawn Sender) {
	local String rep;
	local Inventory inv;
	local Sound snd;

	if (bLogging) { // I want to keep these out of production!

		if (msg ~= "LISTINV") {

			rep = "";
			for (Inv=Sender.Inventory; Inv!=None; Inv=Inv.Inventory) {
				// rep = rep $ Inv $"("$ Inv.getHumanName() $") ";
				// rep = rep $ Inv.ItemName $" ";
				rep = rep $ Inv.Name $" ";
				if (Len(rep)>1500) {
					rep = rep $ "...";
					break;
				}
			}
			Sender.ClientMessage("Your inventory: "$rep);

		} else if (Left(msg,10) ~= "TESTSOUND ") {

			snd = Sound(DynamicLoadObject(Mid(msg,10),class'Sound'));
			if (snd == None) {
				Sender.ClientMessage("Failed to load sound \""$ Mid(msg,10) $"\".");
			} else {
				Sender.PlaySound(snd,SLOT_Interface,3.0);
				Sender.PlaySound(snd,SLOT_Interact,3.0);
				Sender.PlaySound(snd,SLOT_Talk,3.0);
				Sender.PlaySound(snd,SLOT_Misc,3.0);
			}

		}
		
		#ifdef DEBUG
		if (msg ~= "DEBUG") {
			bDebugLogging = !bDebugLogging;
		}
		#endif

	}

	Super.Mutate(msg,Sender);
}

defaultproperties {
	bLogging=True
	bGiveWeapons=False  // Handled by LMS
	InitialArmour=123   // Handled by LMS
	InitialHealth=123   // Handled by LMS?
	// InitialArmour=100
	HealthLostPerSec=1.9
	HealthGainedPerKill=50.0
	bGivePowerups=True
	FragsForPowerup=3
	// bBroadcastPowerups=False
	// bSpawnPowerupsAsDroppedPickups=False
	bPainSounds=True
	// MessageColor=(R=255,G=255,B=31,A=0)
	MessageColor=(R=255,G=255,B=255,A=31)
	PowerupSound=Sound'Botpack.Pickups.BeltSnd'
	WarningSound=Sound'Botpack.FlagBase.FlagTaken'
	InitialWeapon(0)="Botpack.ImpactHammer"
	InitialWeapon(1)="Botpack.Enforcer"
	InitialWeapon(2)="Botpack.UT_BioRifle"
	InitialWeapon(3)="Botpack.PulseGun"
	InitialWeapon(4)="Botpack.Minigun2"
	InitialWeapon(5)="Botpack.UT_FlakCannon"
	InitialWeapon(6)="Botpack.UT_EightBall"
	InitialWeapon(7)="Botpack.ShockRifle"
	InitialWeapon(8)="Botpack.SniperRifle"
	//// On my zp server, I think I needed to add the following zp weapons:
	// InitialWeapon[9]=ZeroPingPlus103.zp_ShockRifle
	// InitialWeapon[10]=ZeroPingPlus103.zp_SniperRifle
	// InitialWeapon[11]=ZeroPingPlus103.zp_Enforcer
	// PowerupSound=Sound'Botpack.Pickups.Sbelthe2'
	// PowerupSound=Sound'Botpack.Pickups.AmpOut'
	//// I removed HealthPack and AmmoBoost cos they just kinda suck.
	// Powerup(0)=(Type="Botpack.HealthPack",Color=(R=131,G=255,B=131,A=32),Name="Health Boost")
	Powerup(1)=(Type="Botpack.Armor2",Color=(R=255,G=131,B=91,A=32))
	Powerup(2)=(Type="Botpack.UDamage",Color=(R=192,G=31,B=192,A=32))
	Powerup(3)=(Type="Botpack.UT_Invisibility",Color=(R=3,G=3,B=150,A=48),Name="Invisibility")
	Powerup(4)=(Type="Botpack.UT_ShieldBelt",Color=(R=255,G=255,B=31,A=32))
	Powerup(5)=(Type="Botpack.UT_JumpBoots",Color=(R=91,G=255,B=255,A=32))
	Powerup(6)=(Type="Botpack.WarheadLauncher",Color=(R=180,G=21,B=21,A=32))
	// Powerup(7)=(Type="FairLMS.AmmoBoost",Color=(R=102,G=102,B=102,A=32),Name="Ammo Boost")
	// Speed - too much!
	// Relics...
	// Powerup(8)=(Type="SiegeXXL2f.JetPack",Color=(R=91,G=192,B=255,A=32))
	// Powerup(9)=(Type="kxGrapple.GrappleGun",Color=(R=255,G=60,B=60,A=44))
	// Powerup(10)=(Type="kxDoubleJump.DoubleJumpBoots",Color=(R=91,G=255,B=255,A=32))
	//// Not working - I get a second enforcer, rather than my single becoming double!  Oh that may have been zp related.
	// Powerup(19)=(Type="Botpack.DoubleEnforcer",Color=(R=180,G=180,B=180,A=32))
}

