// vim: ft=uc ts=3 sw=3 noexpandtab

// TODO BUG: Players were spawning with 200a:123h according to %a UTStats team messages, although the HUD only displays 150:100.
// BUG: bUnlit is not reset if the player fixed his health by taking a healthpack (in non LMS-modes).  Or if some another mod heals him.
// BUG: Low health warning sound is not fired if player was knocked down to 1-9 HP from combat (it activates on 10).
// DONE: bRemovePickups
// DONE: When a player gets the shieldbelt, other players do not see it surround him.  Still true?  It might be the spawning code has improved!
// TESTING FIX: Uggla keeps getting two warheads, or respawning with one.  I dunno how this is happening!  I think this happens because he was given it after dying.
// DONE: It seemed Invis was never being given.  And in CTF mode, it seemed health packs were far too popular!  We must use UT_Stealth, Stealth just doesn't work.
// TESTING: Improved health dropping.  1) grace period after respawn and after a kill.  2) increased health drop if player is camping (need good detection from this, it's no good if they run slightly up and down the same corridor, they should move about the whole map!)  Maybe seperately have idler detection (for player who is afk).
// TESTING: In the original, the health countdown stops for a few seconds after you make a kill.
// TODO CONSIDER: Maybe we should integrate anti-camper with the health countdown.  We could apply the health countdown only to players who are far from other players, and not moving towards the other players.  Beware - 3 players on a large map might not know HOW to find each other, and might lose health unfairly.  Check values against average?
// TODO: Anti-camper anti-idler detection.  Otherwise you still get some advantage by sitting on your spawnpoint - people might avoid killing you because you are idling and they don't wanna be lame!
// CONSIDER: Move some of this class to BonusPowerups, and then let this class add the FairLMS stuff on top.  OTOH, given nice default config vars, leave power with the admin.
// FIXED: When running during a CTFGame, if the player runs out of health whilst holding the flag, he/she respawns still holding the flag!
// FIXED: Similar problem with invis during FairLMS.
// TODO: If someone runs out of energy, but you hit him 10 seconds ago, maybe you should get at least a weak late-kill bonus.  (He ran away from you and died, hardly fair on the aggressor!)
// DONE: We didn't really need to give the player those weapons, since LMS will probably suit them up anyway.  (bGiveWeapons is optional for LMS.)
//       But maybe we aren't in the LMS gametype.  In which case, we should probably remove weapons and other pickup items from the map.
// WAS NOT A BUG: Were some of the armor+pads getting left invisible on the spawnpoints?  I kept spawning with 150, but maybe that was done by normal LMS.
// Redeemer fire works but not altfire.
// DONE: WarheadLauncher DM-Liandri.WarheadLauncher0 (Function Botpack.WarheadLauncher.AltFire:002C) Accessed None
// DONE: WarheadLauncher DM-Liandri.WarheadLauncher12 (Function Botpack.WarheadLauncher.RateSelf:0027) Accessed None
// FIXED: LMS seems a bit stingy on initial ammo.
// DONE/TESTING: It is sometimes a bit laggy to load a new external object (e.g. the siege jetpack) during play due to DynamicLoadObject() calls.
//       Since one is likely to spawn during the game anyway, have server and client pre-load the Powerups resources before the game starts.
//       But do we need to spawn one in order to get the client to load it?
// CONSIDER: But part of the lag might also be the ugly loop in GiveRandomPowerup().  For a tooled-up player, we might keep spawning and destroying weapons the player already has!
// DONE: I think you only get given one WarheadLauncher per life.  This is a feature, so ensure it stays that way!  (It's pretty powerful - let them have a different powerup instead.)
// DONE: Detect last 2 players, display it, and then stop giving powerups+health.
// DONE: Some errors from the bots - are they due to pathing on spawned items which they think are navigable to/through?  Seemed to be fixed with some more additions to GiveInventory().
// DONE: Rather than watch health go down 2 points each second, set the timer frequency calculated to remove 1hp each call to Timer().
// DONE: zeroping weapons not working, piglet wants "+50" txt, or happy with healthsound instead.
//       initial armour and health got set by LMS.
// DONE: (i think) Player is Out.
// FIXED: invis lasts too long
// DONE: Ammo is not working!
// In LMS fragged players are not dropping their weapons?!  Then we really must increase their ammo!
// FIXED: Still showing "Large Bullets"
// TODO: Make it an admin option, whether sounds are heard by all or only the relevant player.
// TODO CONSIDER: If it's a TeamGame, spawn the same Powerup for each team at semi-regular intervals, somewhere in front of their player with most health (who is in their base, or least under threat).
//                In Siege games, makes this dependent on certain conditions.
// DONE Remove logging, or #define it to be optional and efficient.
// DONE: Invis does not wear off!  UT_Invisibility seems to have solved this.
// DONE but needs TESTING: bSpawnPowerupsAsDroppedPickups

// #define DEBUG

class FairLMS expands Mutator config(FairLMS);

struct LMSBonus {
	var String Type;
	var Color Color;
	var String Name;  // If not set, defaults to item's ItemName.
	var String Sound; // If not set, defaults to item's PickupSound.
	var int Ammo; // If not set, defaults to weapon's default ammo x 4.
};

var config bool bLogging;
#ifdef DEBUG
var config bool bDebugLogging;
#endif
var config bool bGiveWeapons;  // Set this to get all the weapons in the InitialWeapon list on spawn.  But beware: If you set this in LMS games, you will get two of every weapon!  Only put the *extra* weapons you want in the list.  If we want to remove default weapons from LMS, that will need to be a new config e.g. bClearDefaultWeapons.
var config bool bRemovePickups;
var config int InitialArmour,InitialHealth;
var config float HealthGainedPerKill;
var config bool bGivePowerups;
var config int FragsForPowerup;
var config bool bBroadcastPowerups;
var config bool bPunishIdlers;
var config float HealthLossTimeout;
var config float HealthLostPerSec;
var config bool bInformHealth;
var config float CheckProximity;
var config bool bSpawnPowerupsAsDroppedPickups;
var config bool bPainSounds;
var config bool bMinifyDeemer;
var config Color MessageColor;
var config Sound PowerupSound;
var config Sound WarningSound;
var config bool bShowLeadingPlayer;
var config int MinLeadForShow;
var String LastLeaderName;

var config String InitialWeapon[20];
var config LMSBonus Powerup[25];

var int KillsSinceSpawn[64];
var bool bGameStarted,bTwoPlayersLeft;
var bool bDonePreloadPowerups;
var float LastCombatTime[64];

var int CheckTicks;

// These turned out pretty good: FairLMS.Timer() at 275.035034 gap 0.477356 average 0.500064 
// var float TimerLast;
// var float TimerAverage;
// var int TimerCount;

// DO NOT use Log!  Use MaybeLog, LogWarn, or in real emergencies, AlwaysLog.

#define AlwaysLog(Msg) Log("[FairLMS] " $ Msg);
#define MaybeLog(Msg) if (bLogging) { AlwaysLog(Msg) }
#define LogWarn(Msg) MaybeLog(" - WARNING - " $ Msg)

// In FairLMS LogWarns are optional, because they appear in an inner loop, so
// may be printed often, contributing to lag.  Until this is resolved, warning
// messages are togglable just like normal messages.

function PostBeginPlay() {
	local Mutator m;
	local Inventory i;

	Super.PostBeginPlay();
	foreach AllActors(class'Mutator',m) {
		if (m.class == Self.class && m!=Self) {
			Log(Self$".PostBeginPlay() Found another copy "$m$" so self-destructing.");
			Self.Destroy();
			return;
		}
	}

	// In case they don't have an ini file, create one :)
	SaveConfig();

	if (HealthLostPerSec > 0) {
		SetTimer(1.0/HealthLostPerSec,True);
	} else {
		SetTimer(1,True);
	}
	// if (HealthLostPerSec>0 || HealthGainedPerKill>0)
	if (HealthLostPerSec > 0)
		Level.Game.GameName = "Anti-Idle "$ Level.Game.GameName;
	if (bGivePowerups) {
		if (InStr(Level.Game.GameName," with ")>=0)
			Level.Game.GameName = Level.Game.GameName $" and Bonus Powerups";
		else
			Level.Game.GameName = Level.Game.GameName $" with Bonus Powerups";
	}
	if (HealthLostPerSec>0)
		DeathMatchPlus(Level.Game).StartMessage = "Your are losing health!  Kill to stay alive!";

	if (bMinifyDeemer) {
		//// It might have been neater to create a new weapon class.  Although it would need the same name, or player keybinds would break.
		// Turn redeemers into mini-redeemers.  I think this is working!
		// OK: Does slow down the deemer on primary fire.
		// BUGS: Does *not* slow it down on secondary fire!  Also I think it fails to change the deemer's damage.
		class'WarheadLauncher'.default.ItemName = "Mini Redeemer";
		class'WarShell'.default.DrawScale = class'WarShell'.default.DrawScale * 0.3;
		class'WarShell'.default.Speed = class'WarShell'.default.Speed * 0.6;
		class'WarShell'.default.Damage = class'WarShell'.default.Damage * 0.3;
		class'WarShell'.default.MomentumTransfer = class'WarShell'.default.MomentumTransfer * 0.3;
		class'GuidedWarShell'.default.DrawScale = class'GuidedWarShell'.default.DrawScale * 0.3;
		class'GuidedWarShell'.default.Speed = class'GuidedWarShell'.default.Speed * 0.6; // BUG: This doesn't seem to work!
		class'WarheadLauncher'.default.ProjectileSpeed = class'WarheadLauncher'.default.ProjectileSpeed * 0.6;   // TESTING: Maybe this will.
		class'GuidedWarShell'.default.Damage = class'GuidedWarShell'.default.Damage * 0.3;
		class'GuidedWarShell'.default.MomentumTransfer = class'GuidedWarShell'.default.MomentumTransfer * 0.3;
		//// TODO: Value sometimes set from PostBeginPlay().  We should intercept just after creation.  bIsRelevant/CheckReplacement?
		class'WarExplosion'.default.DrawScale = class'WarExplosion'.default.DrawScale * 0.3;
		class'WarExplosion2'.default.DrawScale = class'WarExplosion2'.default.DrawScale * 0.3;
		// I think these don't work during Siege games; probably WarheadLauncher gets replaced by sgWarheadLauncher.
	}

	if (bPainSounds) {
		m = Spawn(class'PainSounds',,,);
		Level.Game.BaseMutator.AddMutator(m);
	}

	if (bRemovePickups) {
		foreach AllActors(class'Inventory',i) {
			i.Destroy();
		}
	}

	Level.Game.RegisterDamageMutator(Self);

}

event Timer() {
	local Pawn p;
	local PlayerPawn pp;
	local int aliveCount;
	local String players;
	local Inventory inv;
	local String LeaderName;
	local int LeaderLives;
	local int LeadingBy;
	/*
	if (bLogging) {
		TimerAverage = ( TimerAverage*TimerCount + (Level.TimeSeconds-TimerLast)*1 ) / (TimerCount+1);
		TimerCount++;
		// MaybeLog("Timer() at "$Level.TimeSeconds$" gap "$ (Level.TimeSeconds-TimerLast) );
		MaybeLog("Timer() at "$Level.TimeSeconds$" gap "$ (Level.TimeSeconds-TimerLast) $" average "$TimerAverage);
		TimerLast = Level.TimeSeconds;
	}
	*/

	Super.Timer();

	CheckTicks++;

	LeaderName = "";
	LeaderLives = 0;
	LeadingBy = 0;

	foreach AllActors(class'Pawn',p) {

		if ((PlayerPawn(p)!=None || Bot(p)!=None) && Spectator(p)==None) {

			// We detect gamestart by looking for a weapon in a player/pawn's inventory.
			if (!bGameStarted) {
				for (Inv=p.Inventory; Inv!=None; Inv=Inv.Inventory) {
					if (Inv.IsA('Weapon')) {
						bGameStarted = True;
						break; // Don't drop any health on the first iteration.  (Will also break player count for first iteration!)
					}
				}
			}

			if (bPunishIdlers) {
				PunishPlayerIfIdle(p);
			}

			// Count the number of players still in the game.
			/* p.getHumanName()!="Player" && */
			if (    p.PlayerReplicationInfo != None
			     && !p.PlayerReplicationInfo.bIsSpectator
			     && !p.PlayerReplicationInfo.bWaitingPlayer
			     && p.PlayerReplicationInfo.Score > 0
			) {
				aliveCount++;
				if (LeaderName == "" || p.PlayerReplicationInfo.Score>LeaderLives) {
					LeadingBy = p.PlayerReplicationInfo.Score - LeaderLives;
					LeaderName = p.getHumanName();
					LeaderLives = p.PlayerReplicationInfo.Score;
				} else {
					// We are not the leader, but if we are close we may reduce how much he leads by.
					if (LeaderLives - p.PlayerReplicationInfo.Score < LeadingBy) {
						LeadingBy = LeaderLives - p.PlayerReplicationInfo.Score;
					}
				}
				// Update the players string.  (We won't use it anyway if aliveCount>=3)
				if (players == "") {
					players = p.getHumanName();
				} else {
					players = players $ " v " $ p.getHumanName();
				}
			}

		}

		#ifdef DEBUG
		if (bDebugLogging && p.getHumanName()=="Player" && FRand()<0.02) {
			BroadcastMessage("The player who is not a player is a "$p.class.name);
		}
		#endif

	}

	// Display leader?
	if (bShowLeadingPlayer && !Level.Game.bGameEnded && LeaderName!=LastLeaderName) {
		if (LeadingBy >= MinLeadForShow) {
			if (MinLeadForShow > 1) {
				// BroadcastMessage(LeaderName$" is now in the lead with "$LeaderLives$" lives.");
				BroadcastMessage(LeaderName$" is now in the lead by "$LeadingBy$" lives.");
				// BroadcastMessage(LeaderName$" is now in the lead.");
			} else {
				BroadcastMessage(LeaderName$" is now in the lead.");
			}
			LastLeaderName = LeaderName;
		}
	}

	#ifdef DEBUG
	if (bDebugLogging && FRand()<0.1) {
		BroadcastMessage("I see "$ aliveCount $" players: "$players);
	}
	#endif

	// First check fails on LMS++
	#define bIsLMSGame (LastManStanding(Level.Game)!=None || InStr(String(Level.Game.Class),"LastManStanding")>=0)

	// Check to see if there are only 2 players left.
	if (bGameStarted && bIsLMSGame && !bTwoPlayersLeft && aliveCount<=2 && FRand()<0.2) { // Dodgy FRand delay to avoid get overwritten by other messages ("X is OUT").
		if (aliveCount == 2) {
			BroadcastMessage("Two players left: "$players);
			foreach AllActors(class'PlayerPawn',pp) {
				FlashMessage(pp,"Two players left:",MessageColor,3,false);
				FlashMessage(pp,players,MessageColor,4,true);
				// TODO: switch everyone's music >.<  Hmm might be hard, since only the map's track is loaded. :P
				//       but actually ND manages it, altho maybe client-side.
				//       Maybe we can do it by spawning some sound Actor, and triggering it.
			}
		}
		bTwoPlayersLeft = True;
	}
	// This check will turn the multi-player features back on, if a 3rd player joins a few seconds after the game started.
	if (bGameStarted && aliveCount>2) {
		bTwoPlayersLeft = False;
	}

}

function PunishPlayerIfIdle(Pawn p) {
	local float timeSinceLastCombat;

	if (HealthLostPerSec>0 && !bTwoPlayersLeft && bGameStarted && (!Level.Game.bGameEnded || Level.Game.bOverTime)) {

		timeSinceLastCombat = Level.TimeSeconds - LastCombatTime[ p.PlayerReplicationInfo.PlayerID % 64 ];

		// We don't want to check proximity all the time, that's a bit of an overhead.
		// But we don't want to punish a player who was recently near someone.
		// Checking only after they have exceeded the timeout will miss that.
		// So as a compromise, we will check when they are _approaching_ the timeout.
		if (timeSinceLastCombat >= HealthLossTimeout/2) {
			if (CheckProximity>0 && CheckPlayerProximity(p)) {
				return;   // They are close to someone right now!
			}
		}

		if (timeSinceLastCombat >= HealthLossTimeout) {
			// This technique was nice - they always die after the same amount of time.
			// But it caused problems - a player with <=0 HP can't take pickups!
			/*
				p.Health -= 1;
				if (p.Health == 0) {
			// FlashMessage(p,"You are about to die!  Kill to survive!",MessageColor);
			FlashMessage(p,"You have low health ... Kill someone quickly!",MessageColor);
			p.PlaySound(WarningSound,SLOT_Interface,1.0); // Other players can hear this, if they are close.
			p.bUnlit=True;
			}
			if (p.Health <= -15) {
			p.Died(None, 'Suicided', p.Location);
			// TODO: make a puff of smoke appear here!!! xD
			}
			 */
			if (p.Health == 80) {
				// FlashMessage(p,"You are about to die!  Kill to survive!",MessageColor);
				// FlashMessage(p,"You have low health ... Kill someone quickly!",MessageColor);
				FlashMessage(p,"Your health is dropping ... Engage in combat!",MessageColor);
				p.PlaySound(WarningSound,SLOT_Interface,1.0); // This can be heard by nearby players too!
			}
			if (p.Health > 10) {
				// Go fast at first!
				p.Health -= 1;
			} else if (p.Health > 1) {
				// Keep him around a bit longer, at low health
				// if (FRand()<0.35) {
				if (CheckTicks%4 == 0) {
					p.Health -= 1;
				}
				p.bUnlit=True;
			} else {
				// if (FRand()<0.2) {
				if (CheckTicks%4 == 0) {
					// Don't set their health to 0.  That might not kill them!
					p.Died(None, 'Suicided', p.Location);
				}
			}
		}
	}

}

function bool CheckPlayerProximity(Pawn Trouble) {
	local Actor a;
	local Pawn p;
	// foreach RadiusActors(class 'PlayerPawn', p, CheckProximity, Trouble.Location) {
	foreach VisibleActors(class'Actor', a, CheckProximity, Trouble.Location) {
		if (a.IsA('PlayerPawn') || a.IsA('Bot')) {
			p = Pawn(a);
			if (p!=Trouble && !p.PlayerReplicationInfo.bIsSpectator && !p.PlayerReplicationInfo.bWaitingPlayer) {
				// Trouble is near to an active player!
				RegisterProbation(Trouble);
				return true;
			}
		}
	}
	return false;
}

function RegisterCombat(Pawn p) {
	if (p != None && p.IsA('Bot') || p.IsA('PlayerPawn')) {
		LastCombatTime[ p.PlayerReplicationInfo.PlayerID % 64 ] = Level.TimeSeconds;
	}
}

function RegisterProbation(Pawn p) {
	if (p != None && p.IsA('Bot') || p.IsA('PlayerPawn')) {
		// Only apply if better than current time.
		if (LastCombatTime[ p.PlayerReplicationInfo.PlayerID % 64 ] < Level.TimeSeconds - HealthLossTimeout/2) {
			LastCombatTime[ p.PlayerReplicationInfo.PlayerID % 64 ] = Level.TimeSeconds - HealthLossTimeout/2;
		}
	}
}

function MutatorTakeDamage( out int ActualDamage, Pawn Victim, Pawn InstigatedBy, out Vector HitLocation, out Vector Momentum, name DamageType) {
	// We only register valid pawn -> pawn damage not by self of to/from none.
	if (InstigatedBy != Victim && InstigatedBy != None) {
		RegisterCombat(Victim);
	}
	if (Victim != InstigatedBy && Victim != None) {
		RegisterCombat(InstigatedBy);
	}
	// Whilst it seems rather odd for another player hitting you to cancel your
	// health-drop, it does prev_nt the aggressor from losing his kill to
	// his victim's health-drop, if the victim hides behind pillar!
	// We could consider dropping this if we also implement
	// LastInstigatorGetsKillFromSuicides.
	Super.MutatorTakeDamage(ActualDamage,Victim,InstigatedBy,HitLocation,Momentum,DamageType);
}

function ModifyPlayer(Pawn p) {
	p.bUnlit=False;

	// We want to do this near game-start, so all players get to preload the
	// powerup.  (No points doing it before anyone has joined the server!)
	// This might look odd: big lag at start!  But it beats lag mid-game!
	if (!bDonePreloadPowerups) {
		PreloadPowerups();
		bDonePreloadPowerups = True;
	}

	Super.ModifyPlayer(p);

	// If the game is not running then do nothing
	// if (!bGameStarted) // This check does not work on first spawn since it is set by the timer!
	if (p.PlayerReplicationInfo!=None && p.PlayerReplicationInfo.bIsSpectator) // This might be true before the game starts
		return;
	if (Level.Game.bGameEnded && !Level.Game.bOverTime)
		return;

	// Setup the player
	if (InitialHealth > 0)
		p.Health = InitialHealth;
	GiveInitialInventory(p); // Includes armor
	if (p.PlayerReplicationInfo!=None) {
		KillsSinceSpawn[p.PlayerReplicationInfo.PlayerID%64] = 0;
	}

	if (p.PlayerReplicationInfo.Deaths == 0) {
		// On their first life, give them full time
		RegisterCombat(p);
	} else {
		// If they just died from damage, then they have full time
		// If they just died from idler suicide, then we only give them probation.
		RegisterProbation(p);
	}

	if (bSpawnPowerupsAsDroppedPickups) {
		p.DropWhenKilled = None;
	}

}

function ScoreKill(Pawn killer, Pawn victim) {
	Super.ScoreKill(killer,victim);

	if (bSpawnPowerupsAsDroppedPickups && Victim!=None) {
		// Reset any set before
		// I think dropping his weapon may be done separately
		Victim.DropWhenKilled = None;
		// Also done in ModifyPlayer - perhaps ScoreKill is not called if he suicides.
	}
	if (killer != None && killer!=victim) {

		// I was dropping my powerup weapon when dying from crater/suicide etc, during siege games.
		if (TeamGamePlus(Level.Game)!=None) {
			if (killer.PlayerReplicationInfo!=None && victim.PlayerReplicationInfo!=None) {
				if (killer.PlayerReplicationInfo.Team == victim.PlayerReplicationInfo.Team) {
					return;
				}
			}
		}

		if (!bTwoPlayersLeft) {

			// HealthGainedPerKill:
			if (HealthGainedPerKill > 0) {
				Killer.bUnlit=False;
				killer.Health += HealthGainedPerKill;
				if (killer.Health > 199) killer.Health = 199;
				// killer.PlaySound(class'Botpack.TournamentHealth'.default.PickupSound,SLOT_Interface,3.0);
				killer.PlaySound(Sound'Botpack.Pickups.UTHealth',SLOT_Interface,3.0); // TEST: I think this is ok, all hear it.
				if (bInformHealth) {
					killer.ClientMessage("You gained "$int(HealthGainedPerKill)$" health for your kill.");
				}
			}

			// bGivePowerups:
			if (killer.PlayerReplicationInfo!=None) {
				KillsSinceSpawn[killer.PlayerReplicationInfo.PlayerID%64] += 1;
				if (bGivePowerups && KillsSinceSpawn[killer.PlayerReplicationInfo.PlayerID%64]%FragsForPowerup == 0) {
					// Only if he is not dead / respawning.
					if (killer.Health > 0) {
						GiveRandomPowerup(killer,victim);
					}
				}
			}

		}
	}
}

function GiveInitialInventory(Pawn p) {
	local Inventory Inv;
	local int i;
	// local class<Weapon> wType;
	local class<Inventory> iType;

	// Give appropriate armour.
	// CONSIDER: Alternatively, give them normal armour, but adjust its Charge.
	/* Disabled due to bugs :P
	// I think the bug way having lots of armour but it not always being displayed!
	if (InitialArmour<50) {
	} else if (InitialArmour>=50 && InitialArmour<100) {
		GivePickupType(p,class'ThighPads');
	} else if (InitialArmour>=100 && InitialArmour<150) {
		// This one was tested and does not work!  They get 200A according to UTStats messages!
		GivePickupType(p,class'Armor2');
	} else if (InitialArmour>=150) {
		GivePickupType(p,class'Armor2');
		GivePickupType(p,class'ThighPads');
	}
	*/

	// This code doesn't work well in LMS gametype.  We get two of every weapon!
	// If the below code is correct, then perhaps LMS adds them *after* us.
	// But we let it run in LMS games, in case admins want to add custom weapons.
	// If you use this mutator in both LMS and non-LMS gametypes, you can use
	// BonusPowerups config for one gametype, and set bGiveWeapons=True there.
	if (bGiveWeapons /*&& bIsLMSGame*/) {
		for (i=0;i<20;i++) {
			if (InitialWeapon[i]!="") {
				// wType = class<Weapon>(DynamicLoadObject(InitialWeapon[i],class'class'));
				iType = class<Inventory>(DynamicLoadObject(InitialWeapon[i],class'class'));
				Inv = p.FindInventoryType(iType);
				if (Inv != None) {
					Inv.Destroy();
				}
				// GivePickupType(p,wType);
				// GivePickupType(p,iType);
				inv = Spawn(iType,p);
				// MaybeLog("Giving "$inv$" to "$p.getHumanName());
				if (inv == None) {
					LogWarn("GiveInitialInventory() Failed to spawn a "$iType$" for "$p.getHumanName());
				} else {
					GiveInventory(p,inv);
				}
			}
		}
	}

}

function Inventory GivePickupType(Pawn p, class<Inventory> t) {
	// TODO: Can we just grab the implementation in GiveRandomPowerup()?
	local Inventory Inv;
	Inv = p.FindInventoryType(t);
	if (Inv!=None) {
		MaybeLog("GivePickupType() "$p.getHumanName()$" already has a "$Inv$" - destroying it.");
		Inv.Destroy();
		Inv = None;
		// This might be a bummer if it destroys the weapon you are currently holding, but I've never seen that happen.
	}
	// In the case of amp at least, re-using is bad because you don't get the fresh charge!
	if (Inv==None) {
		// MaybeLog("GivePickupType() Spawning a new "$t$" for "$p.getHumanName());
		Inv = Spawn(t,p);
	}
	if (Inv==None) {
		LogWarn("GivePickupType() Failed to spawn a "$t);
	} else {
		GiveInventory(p,Inv);

		// Post-hacks:
		if (Weapon(Inv)!=None) {
			// Really for the redeemer.  CHECK: may not be needed
			if (Weapon(Inv).AmmoType.AmmoAmount<1)
				Weapon(Inv).AmmoType.AmmoAmount = 1;
		}
	}
	return Inv;
}

function GiveInventory(Pawn p, Inventory inv) {
	local Weapon w;

	inv.bHeldItem=True;
	inv.RespawnTime=0;

	w = Weapon(inv);
	if (w!=None) {

		// Handle Weapon:
		w.Instigator = P;
		w.BecomeItem();
		P.AddInventory(w);
		// w.GiveTo(p);
		w.GiveAmmo(P);
		// Not for the redeemer (or other 1 ammo weapons):
		if (Weapon(inv)!=None && Weapon(inv).AmmoType!=None && Weapon(inv).AmmoType.AmmoAmount>1) {
			// Increase ammo x 3
			// Weapon(inv).AmmoType.AmmoAmount = Weapon(inv).AmmoType.AmmoAmount * 4; // Now 4 sixpacks instead of 3
			Weapon(inv).AmmoType.AmmoAmount = Weapon(inv).AmmoType.MaxAmmo;
		}
		w.SetSwitchPriority(P);
		w.WeaponSet(P);
		w.AmbientGlow = 0;

		// DeathMatchPlus does this to weapons:
		if ( p.IsA('PlayerPawn') )
			w.SetHand(PlayerPawn(p).Handedness);
		else
			w.GotoState('Idle');

	} else {

		// Handle other Inventory item:
		inv.GiveTo(p);
		inv.Activate();

	}

	if (Pickup(inv) != None) {
		Pickup(inv).PickupFunction(p);
	}

	// DONE: Check out what DeathMatchPlus, and Translocator/GrappleGun do to initialise weapons correctly.
	//       We may be missing something we should do for weapons.  In a game with bots I got: WarheadLauncher DM-Liandri.WarheadLauncher3 (F_nction Botpack.WarheadLauncher.RateSelf:0027) Accessed None
}

function BoostAmmoFor(Pawn p) {
	local Inventory inv;
	for (inv=p.Inventory;inv!=None;inv=inv.Inventory) {
		if (Weapon(inv)!=None) {
			if (Weapon(inv).AmmoType==None) {
				LogWarn("GiveRandomPowerup() Can not boost ammo for "$inv);
			} else {
				if (Weapon(inv).AmmoType.default.AmmoAmount>1) { // Not for deemer
					Weapon(inv).AmmoType.AmmoAmount = Weapon(inv).AmmoType.MaxAmmo;
					// MaybeLog("GiveRandomPowerup() Boosted ammo "$Weapon(inv).AmmoType$" to "$Weapon(inv).AmmoType.AmmoAmount);
				} else {
					LogWarn("GiveRandomPowerup() Not boosting ammo for "$inv);
				}
			}
		}
	}
}

function PreloadPowerups() {
	local int i;
	local class<Class> leClass;
	local class<Inventory> type;
	local Inventory inv;

	for (i=0;i<25;i++) {
		if (Powerup[i].Type != "") {
			if (Powerup[i].Type == "FairLMS.AmmoBoost") {
				continue;
			}
			type = class<Inventory>( DynamicLoadObject(Powerup[i].Type,class'Class') );
			/*
			leClass = DynamicLoadObject(Powerup[i].Type,class'Class');
			if (leClass == None) {
				continue;
			}
			type = class<Inventory>(leClass);
			*/
			if (type == None) {
				continue;
			}
			inv = Spawn(type,None);
			// This makes each powerup spawn in the middle of the map (0,0,0), so
			// now we want to destroy it.  (Unless it needs a tick for replication
			// to occur.  Oh dear I fear it might!)
			inv.Destroy();
			// Instead of destroy, let's try to make it un-noticeable.
			/*
			// inv.DrawType = DT_None;   Re-enable this when below is effective!
			// This does not work!  E.g. on Stalwart, go to the centre of the map
			// for all powerups!
			if (Pickup(inv) != None) {
				Pickup(inv).bCanActivate = False;
			}
			*/
			// OK well we've done what we can.
			// BUG: Now I fear the problem is that the sounds have not been
			// loaded, so the client lags while loading this.  :F
		}
	}
}

function GiveRandomPowerup(Pawn p, Pawn victim) {
	local int i,j;
	local class<Inventory> type;
	local Inventory inv;
	local Color col;
	local Sound resource;
	for (j=0;j<100;j++) {
		i = 25*FRand();
		if (Powerup[i].Type == "")
			continue;

		if (Powerup[i].Type == "FairLMS.AmmoBoost") {
			if (p.Weapon!=None && p.Weapon.AmmoType!=None && p.Weapon.AmmoType.AmmoAmount>=p.Weapon.AmmoType.MaxAmmo/2) {
				// His current weapon has plenty of ammo - don't give him an AmmoBoost
				continue;
			}
			if (bSpawnPowerupsAsDroppedPickups) {
				// We can't drop this as a pickup item, and doing it the normal way looks out-of-place.
				// So we just remove this powerup from the list.
				continue;
			}
			/*
			if (p.Weapon!=None && p.Weapon.AmmoType!=None && p.Weapon.AmmoType.AmmoAmount<=8 && FRand()<0.9) {
				// His current weapon is a bit low - definitely give the AmmoBoost
			} else {
				// We don't know the state of his weapon, or his ammo is "average".
				if (FRand()<0.25)
					continue; // Since this item never enters the inventory, we might offer it too often, so 75% chance of re-roll.
			}
			*/
			BoostAmmoFor(p);
		} else {
			type = class<Inventory>( DynamicLoadObject(Powerup[i].Type,class'Class') );
			if (type == None) {
				LogWarn("Powerup #"$i$" type \""$Powerup[i].Type$"\" does not exist!");
				continue;
			}
			inv = p.FindInventoryType(type);
			if (inv != None) {
				// A bit log spammy:
				// MaybeLog("GiveRandomPowerup() "$p.getHumanName()$" already has a "$inv);
				// MaybeLog("GiveRandomPowerup() maybe they don't want another - maybe we could upgrade it?");
				// It seems to me that items *are* being removed from a player's inventory when he loses them.
				// I don't know if warhead 2nd time around is working now.
				continue;
			}
			inv = Spawn(type,p);
			if (inv == None) {
				LogWarn("GiveRandomPowerup() Failed to spawn "$type);
				continue;
			}

			if (Powerup[i].Ammo>0 && Weapon(inv)!=None && Weapon(inv).AmmoType!=None) {
				Weapon(inv).AmmoType.AmmoAmount = Powerup[i].Ammo;
			}

			if (bSpawnPowerupsAsDroppedPickups) {

				/*
				// This works, called from ScoreKill, the drop happens right after.
				// But he will continue to drop this item if killed again later!
				// So we reset it.
				*/
				Victim.DropWhenKilled = inv.class;

				/*
				// This does not work yet!
				// Perhaps we need to make it visible somehow... Perhaps more.  I can't seem to find it by walking!
				inv.BecomePickup();
				inv.SetLocation(Victim.Location+vect(0,0,1)*Victim.CollisionHeight/2);
				inv.Velocity = vect(0,0,200) + VRand()*5;
				inv.SetPhysics(PHYS_Falling);
				*/

				//// This isn't really bBroadcastPowerups, it's more like bInformKillerOfPowerup.
				if (bBroadcastPowerups) {
					// Repeated code:
					if (Powerup[i].Name == "")
						Powerup[i].Name = inv.ItemName;
					// TODO: not always grammatically correct.
					// p.ClientMessage(Victim.getHumanName()$" dropped a "$Powerup[i].Name$" for you.");
					p.ClientMessage(Victim.getHumanName()$" dropped the "$Powerup[i].Name$".");
					// if ends with "s" then "dropped some "
					//// This is grammatically correct, but not accurate.  The player may not have been weilding an amp, or armour.
					/*
					if (InStr(Caps(Victim.VoiceType),"FEMALE") > -1) {
						p.ClientMessage("She dropped her "$Powerup[i].Name$".");
					} else {
						p.ClientMessage("He dropped his "$Powerup[i].Name$".");
					}
					*/
				}
				// We have established that it will load into the level.  But in
				// fact the engine will spawn it fresh from DropWhenKilled, so we
				// must remove this copy.
				inv.Destroy();
				return;
			}

			// OK we have created the powerup, we can give it to the player:
			GiveInventory(p,inv);

			if (bLogging) {
				MaybeLog("Gave "$inv$" to "$p);
			}
		}

		// Flash the powerup's message:
		col = Powerup[i].Color;
		if (col.R==0 && col.G==0 && col.B==0) {
			col.R=128+128*FRand(); col.G=128+128*FRand(); col.B=128+128*FRand(); col.A=32;
		}
		if (Powerup[i].Name == "")
			Powerup[i].Name = inv.ItemName;
		FlashMessage(p,"-+- "$Caps(Powerup[i].Name)$" -+-",col);
		if (bBroadcastPowerups) {
			BroadcastMessage(p.getHumanName()$" got the "$Powerup[i].Name);
			// if (InStr("AEIOU",Caps(Left(Powerup[i].Name,1)))>=0)
				// BroadcastMessage(p.getHumanName()$" got an "$Powerup[i].Name);
			// else
				// BroadcastMessage(p.getHumanName()$" got a "$Powerup[i].Name);
		}

		// Play the powerup's sound:
		resource = None;
		if (Powerup[i].Sound != "") {
			resource = Sound(DynamicLoadObject(Powerup[i].Sound,class'Sound'));
		}
		// TEST: Are volumes correct?  One of the imported Invis sounds was a bit loud.  Maybe radius should be reduced in general.
		if (resource != None) {
			p.PlaySound(resource,SLOT_Interface,5.0);
		} else {
			if (Inv.PickupSound != None) {
				p.PlaySound(Inv.PickupSound,SLOT_Interface,5.0);
			} else {
				p.PlaySound(PowerupSound,SLOT_Interface,5.0);
			}
		}

		return;

	}
	if (j==100) {
		LogWarn("GiveRandomPowerup() Tried 100 times but could not find a suitable powerup!  Maybe "$p.getHumanName()$" has everything already.");
		// TODO: maybe remove something from his inventory and retry?  Then at least he could get a fresh one.
		if (bBroadcastPowerups)
			BroadcastMessage(p.getHumanName()$" is MAXXED OUT!");
	}

}

function FlashMessage(Pawn p, String msg, Color col, optional int line, optional bool bContinuation) {
	if (PlayerPawn(p)==None)
		return;
	if (line == 0) line=4;
	// msg = Caps(msg) $ "!";
	if (!bContinuation)
		PlayerPawn(p).ClearProgressMessages();
	PlayerPawn(p).SetProgressTime(3.0);
	PlayerPawn(p).SetProgressColor(col,line);
	PlayerPawn(p).SetProgressMessage(msg,line);
}

// Only really needed for development:
function Mutate(String msg, PlayerPawn Sender) {
	local String rep;
	local Inventory inv;
	local Sound snd;

	if (bLogging) { // I want to keep these out of production!

		if (msg ~= "LISTINV") {

			rep = "";
			for (Inv=Sender.Inventory; Inv!=None; Inv=Inv.Inventory) {
				// rep = rep $ Inv $"("$ Inv.getHumanName() $") ";
				// rep = rep $ Inv.ItemName $" ";
				rep = rep $ Inv.Name $" ";
				if (Len(rep)>1500) {
					rep = rep $ "...";
					break;
				}
			}
			Sender.ClientMessage("Your inventory: "$rep);

		} else if (Left(msg,10) ~= "TESTSOUND ") {

			snd = Sound(DynamicLoadObject(Mid(msg,10),class'Sound'));
			if (snd == None) {
				Sender.ClientMessage("Failed to load sound \""$ Mid(msg,10) $"\".");
			} else {
				Sender.PlaySound(snd,SLOT_Interface,3.0);
				Sender.PlaySound(snd,SLOT_Interact,3.0);
				Sender.PlaySound(snd,SLOT_Talk,3.0);
				Sender.PlaySound(snd,SLOT_Misc,3.0);
			}

		}
		
		#ifdef DEBUG
		if (msg ~= "DEBUG") {
			bDebugLogging = !bDebugLogging;
		}
		#endif

	}

	Super.Mutate(msg,Sender);
}

defaultproperties {
	bLogging=True
	bGiveWeapons=False    // For non-LMS game-modes
	bRemovePickups=False  // For non-LMS game-modes
	InitialArmour=100     // For non-LMS game-modes
	InitialHealth=100     // For non-LMS game-modes
	// InitialArmour=100
	HealthGainedPerKill=50.0
	bGivePowerups=True
	FragsForPowerup=3
	bPunishIdlers=True
	// HealthLostPerSec=1.9
	HealthLossTimeout=12
	HealthLostPerSec=6.0
	CheckProximity=512
	// bBroadcastPowerups=False
	// bSpawnPowerupsAsDroppedPickups=False
	bPainSounds=False     // Current implementation causes some players to crash
	bMinifyDeemer=True
	bShowLeadingPlayer=False
	MinLeadForShow=2
	// MessageColor=(R=255,G=255,B=31,A=0)
	MessageColor=(R=255,G=255,B=255,A=31)
	PowerupSound=Sound'Botpack.Pickups.BeltSnd'
	WarningSound=Sound'Botpack.FlagBase.FlagTaken'

	//// Alternative sounds I played with:
	// PowerupSound=Sound'Botpack.Pickups.Sbelthe2'
	// PowerupSound=Sound'Botpack.Pickups.AmpOut'

	InitialWeapon(0)="Botpack.ImpactHammer"
	InitialWeapon(1)="Botpack.Enforcer"
	InitialWeapon(2)="Botpack.UT_BioRifle"
	InitialWeapon(3)="Botpack.PulseGun"
	InitialWeapon(4)="Botpack.Minigun2"
	InitialWeapon(5)="Botpack.UT_FlakCannon"
	InitialWeapon(6)="Botpack.UT_EightBall"
	InitialWeapon(7)="Botpack.ShockRifle"
	InitialWeapon(8)="Botpack.SniperRifle"
	InitialWeapon(9)="Botpack.Ripper"

	//// On my zp server, I needed to add the following zp weapons:
	//
	// InitialWeapon[9]=ZeroPingPlus103.zp_ShockRifle
	// InitialWeapon[10]=ZeroPingPlus103.zp_SniperRifle
	// InitialWeapon[11]=ZeroPingPlus103.zp_Enforcer

	Powerup(1)=(Type="Botpack.Armor2",Color=(R=255,G=131,B=91,A=32))
	Powerup(2)=(Type="Botpack.UDamage",Color=(R=192,G=31,B=192,A=32))
	Powerup(3)=(Type="Botpack.UT_ShieldBelt",Color=(R=255,G=255,B=31,A=32))
	Powerup(4)=(Type="Botpack.UT_JumpBoots",Color=(R=91,G=255,B=255,A=32))
	Powerup(5)=(Type="Botpack.WarheadLauncher",Color=(R=180,G=21,B=21,A=32))

	//// AmmoBoost will boost all your ammo; useful in gametypes where ammo runs out!
	// Powerup(6)=(Type="FairLMS.AmmoBoost",Color=(R=102,G=102,B=102,A=32),Name="Ammo Boost")

	//// The Big Keg o' Health (+100 hp).
	// Powerup(0)=(Type="Botpack.HealthPack",Color=(R=131,G=255,B=131,A=32),Name="Health Boost")

	//// I feel invisibility is a bit too powerful to put as default:
	// Powerup(7)=(Type="Botpack.UT_Invisibility",Color=(R=3,G=3,B=150,A=48),Name="Invisibility")
	//// Recommend using this not the Stealth class - does that last forever?

	//// Here are some powerups you can import from Siege:
	// Powerup(8)=(Type="SiegeXXL2f.JetPack",Color=(R=91,G=192,B=255,A=32))
	// Powerup[8]=(Type="SiegeXtreme002.Jetpack",Color=(R=91,G=192,B=255,A=32))
	// Powerup[11]=(Type="SiegeXtreme002.HyperLeecher",Color=(R=91,G=192,B=255,A=32),Name="Hyper Leecher (Bio Gun)")
	// Powerup[12]=(Type="SiegeXtreme002.WildcardsMetalSuit",Color=(R=160,G=160,B=160,A=32),Name="Bulletproof Metal Suit")

	//// Relic of speed (too powerful?) - I haven't tested which of these is needed:
	// Powerup(13)=(Type="Relics.RelicSpeed",Color=(R=255,G=60,B=60,A=44))
	// Powerup(13)=(Type="Relics.RelicSpeedInventory",Color=(R=255,G=60,B=60,A=44))

	// Powerup(9)=(Type="kxGrapple.GrappleGun",Color=(R=255,G=60,B=60,A=44))
	// Powerup(10)=(Type="kxDoubleJump.DoubleJumpBoots",Color=(R=91,G=255,B=255,A=32))

	//// Not working - I get a second enforcer, rather than my single becoming double!  Oh that may have been zp related.
	// Powerup(19)=(Type="Botpack.DoubleEnforcer",Color=(R=180,G=180,B=180,A=32))

}

