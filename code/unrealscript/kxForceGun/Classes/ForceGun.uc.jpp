//================================================================================
// ForceGun.
//================================================================================

// DONE: Since adding OldPhysics, I can move sgBuildings and they sit where dropped.
// TODO: SiegeBuildings usually have at least 2 actors related to them.  The thing that tends to get picked up and moved is the central glow, which is the sgBuilding.  But we want to move the sgMeshFX newFX also.
// DONE/TEST: A short while after I move an sgBuilding, it disappears from the game!
// TODO: If Target is bStatic, try to hide it and create a new non-static clone.
// TODO: Pickups don't have a Team, we must guess which team they belong to.
// TODO: remove OldPhysics?
//       or test with projectiles first
//       OldPhysics was introduced for sgBuildings.
//       But we often need to change the Physics to PHYS_Falling when we drop an object, even if it was PHYS_None when we picked it up.
//       Exceptions are sgBuildings, Projectiles, ...
//       Now that the ForceGun is working, we should start to reduce the number of (permanent) changes we make to objects, and do a per-tick change instead.
// BEWARE: I think if I summon on of these, then rejoin the server, POwner is wrong.
// DONE: Despite rotation code, the ForceGun generally stops actors from rotating, and they don't start again when dropped!
// TODO BUG: By walking quickly, or through a teleporters, you can eventually pull your Target *through* a wall.

// TODO: Fix the nasty "RPC bunch overflowed" bug
//       This seems to happen when a Bot picks up a PlayerPawn (me).
//       It may be the simulated InitTarget() or something else we do on the client, or something we do on the server that we are not supposed to do to PlayerPawns!
//       It is possible to pickup earlier players though - piglet it and I managed it with an early (pre cvs?) version.
// TODO: RUs do not move

#define SIEGE_COMPATIBILITY
// DONE: sgSuperProtector has THREE meshes - don't break, find all with corresponding owner.

class ForceGun expands TournamentWeapon Config(kxForceGun);

// #define PHYS_ForceGun PHYS_Falling
// #define PHYS_ForceGun PHYS_None
#define PHYS_ForceGun PHYS_Rotating

var config float PullStrength;
var config bool bLogging;
var config bool bTesting;
var config bool bPickupPlayers;
var config bool bSameTeamOnly;

// var Actor Weilder;
// var Pawn Weilder;
var float Grip;
var Actor Target;
var Actor LastTarget;

var int UpdateCount;
var int LastUpdate;

var EPhysics OldPhysics;

var Vector LastLoc;

#ifdef SIEGE_COMPATIBILITY
var sgMeshFX sgTargetMesh;
#endif

replication {
	reliable if (Role==ROLE_Authority)
		PullStrength;
	reliable if (Role==ROLE_Authority)
		bLogging;
	reliable if (Role==ROLE_Authority)
		bTesting;
	reliable if (Role==ROLE_Authority)
		Target;
	reliable if (Role==ROLE_Authority)
		UpdateCount;
	reliable if (Role==ROLE_Authority)
		OldPhysics;
	// reliable if (Role==ROLE_Authority)
		// AcquireTarget,CheckForUpdateAndMoveMeshes,ReleaseTarget; // ,Tick
	// I tried making these two UNreliable, still got the crashes, but not the RPC errors!
	reliable if (Role==ROLE_Authority)
		CheckForUpdate; // Making this reliable means the meshes move!  I think it keeps thing in sync better.
	reliable if (Role==ROLE_Authority)
		MoveMeshes; // Making this reliable means the meshes move!  I think it keeps thing in sync better.
	// reliable if (Role==ROLE_Authority)
		// ReleaseTarget; // Causes us to never release the target (at least from the client point of view)
}

// TODO: At release time we should comment out all DebugLog() and ClientLog() calls, because we don't want them building those message strings!
#define DebugLog(message) if (bLogging) { Super.Log(message); }
#define ClientLog(message) if (bLogging) { BroadcastMessage(message); } DebugLog("[ClientLog] "$ message)

simulated function PreBeginPlay() {
	Super.PreBeginPlay();
	Enable('Tick');
}

function float RateSelf( out int bUseAltMode ) {
	return 2;
}

function GiveTo(Pawn o) {
	Instigator = o;
	Super.GiveTo(o);
}

function int GetTeam(Actor a) {
	local String s;
	if (Pawn(a)!=None && Pawn(a).PlayerReplicationInfo!=None)
		return Pawn(a).PlayerReplicationInfo.Team;
	s = a.GetPropertyText("Team");
	if (s != "")
		return Int(s);
	return -1;
}

/*simulated*/ function AcquireTarget() {
	local Vector HitLoction,HitNormal;
	// TODO: Many of the checks in here could be moved to FindTarget() so that an alternative Target can be sought.
	//       Although in that case the player will not see why that particular Target could not be acquired.
	// DebugLog(Self$".AcquireTarget() Owner = "$Owner$" Instigator="$Instigator);
	// Target = Trace(HitLoction,HitNormal,Instigator.Location+10000*Vector(Instigator.Rotation),Instigator.Location,true);
	Target = FindTarget(Instigator);
	if (Target==None) {
		Instigator.ClientMessage("The "$ItemName$" failed to acquire a target.");
		return;
	}
	if (!bPickupPlayers && Target.IsA('Pawn') && Pawn(Target).bIsPlayer) {
		Instigator.ClientMessage("You may not pick up "$Target.getHumanName()$"!");
		Target = None;
		return;
	}
	if (bSameTeamOnly && TeamGamePlus(Level.Game)!=None
			&& GetTeam(Target) != -1
			&& GetTeam(Target) != GetTeam(Instigator)
	) {
		if (bLogging) {
			Instigator.ClientMessage("You cannot move "$ StrAfterFirst(String(Target),".") $", it belongs to the enemy!  ("$GetTeam(Target)$"!="$GetTeam(Instigator)$")");
		} else {
			Instigator.ClientMessage("You cannot move "$ StrAfterFirst(String(Target),".") $", it belongs to the enemy!");
		}
		Target = None;
		return;
	}
	if (Target == Instigator || Target == Self || Target==Level) {
		DebugLog(Self$".BeginState() Bad Target = "$Target);
		Instigator.ClientMessage("You can not pick up "$Target);
		Target = None;
		return;
	}
	if (Target.bStatic) {
		Instigator.ClientMessage("Target is bStatic - it will probably not move!");
		// Target = None;
		// return;
		//// Actually we should check this in FindTarget() and seek another instead.
	}
	if (Target != None) {
		if (bLogging) {
			Instigator.ClientMessage("Acquired target "$Target.getHumanName()$" type "$Target.Class.Name$" mass "$Int(Target.Mass)$" distance "$Int(VSize(Target.Location-Instigator.Location))$" difficulty "$Difficulty());
		} else {
			Instigator.ClientMessage("Acquired target "$Target.getHumanName()$" mass "$Int(Target.Mass)$".");
		}
		InitTarget();
		ChangeTargetVelocity(0.05);
		// CheckForUpdate(0.05);
		// MoveMeshes(0.05);
		if (Pawn(Target)!=None)
			Pawn(Target).ClientMessage("You have been picked up by "$Instigator.getHumanName());
		if (PlayerPawn(Target)!=None) {
			DebugLog("[WARNING!] A PlayerPawn was just picked up - we may get RPC errors soon...");
		}
		UpdateCount++;
	} // else should never happen!
}

simulated function InitTarget() {

	DebugLog(Self$".InitTarget() called while UpdateCount="$UpdateCount$" Target="$Target);
	// Target.SetLocation( Target.Location + vect(0,0,8.0) ); // get things underway?
	// Target.SetPhysics(PHYS_Flying);
	// Target.SetPhysics(PHYS_Swimming);
	// Target.SetPhysics(PHYS_Walking);
	// Target.bSimFall = False;

	LastLoc = Target.Location;

	OldPhysics = Target.Physics;
	// Target.SetPhysics(PHYS_Flying); // Does not work!
	Target.SetPhysics(PHYS_ForceGun); // TODO: ? can we keep it moving but take out the gravity?
	// Target.Velocity = vect(0,0,0);

	Target.bUnlit = True;

	Target.LifeSpan = Target.LifeSpan*2;
	if (Target.LifeSpan>0 && Target.LifeSpan<20)
		Target.LifeSpan = 20;
	if (Projectile(Target)!=None)
		Target.Disable('Tick');
	// Target.default.bStatic = False;
	// DONE: Set some net-relevant properties
	// Target.NetPriority = 2.8;
	// Target.bNetTemporary = False;
	// With ROLE_SimulatedProxy, InventorySpots/Pickups *are* getting moved, but the client does not see it.
	//// ROLE_SimulatedProxy did not work when client-server!
	// Target.RemoteRole = ROLE_SimulatedProxy;
	// Self.RemoteRole = ROLE_SimulatedProxy;
	if (PlayerPawn(Target) == None) { // I believe this fixed the RPC errors and client crashes!
		Target.RemoteRole = ROLE_DumbProxy;
		Self.RemoteRole = ROLE_DumbProxy;
	}
	// if (Target.IsA('Inventory'))
		// Inventory(Target).bRotatingPickup = False;

	/*
	// This is currently handled in Tick().
	#ifdef SIEGE_COMPATIBILITY
	// sgBuilding will have a corresponding mesh actor
	if (Level.NetMode != NM_DedicatedServer && sgBuilding(Target)!=None) {
	// if (sgBuilding(Target)!=None) {
		ClientLog("Checking for sgBuilding's mesh...");
		meshCount=0;
		foreach AllActors(class'sgMeshFX',sgTargetMesh) {
			meshCount++;
			if (sgTargetMesh.Instigator == Target || sgTargetMesh.Owner == Target) {
			// if (VSize(sgTargetMesh.Location-Target.Location)<0.5) {
				ClientLog("Got sgMesh by Instigator "$(sgTargetMesh.Instigator == Target)$" or Owner "$(sgTargetMesh.Owner == Target));
				sgTargetMesh.SetPhysics(PHYS_ForceGun);
				sgTargetMesh.RemoteRole = ROLE_DumbProxy;
				break;
			}
		}
		if (sgTargetMesh==None || (sgTargetMesh.Instigator != Target && sgTargetMesh.Owner != Target)) {
			ClientLog("FAILED to get mesh for sgBuilding, seached "$meshCount$"!");
		}
	} else {
		// ClientLog("NOT checking for sgBuilding's mesh!");
	}
	#endif
	*/

}

/*simulated*/ function ReleaseTarget() {
	if (Target != None) {
		Target.bUnlit = False; // TODO: Should really be bTargetWasUnlit
		if (Target.IsA('Projectile')) {
			Target.Enable('Tick');
			Target.SetPhysics(PHYS_Projectile); // OldPhysics :P
		#ifdef SIEGE_COMPATIBILITY
		} else if (sgBuilding(Target)!=None) {
			// For sgBuildings (and hopefully decorations)
			// Target.SetPhysics(OldPhysics); // Probably PHYS_None
			// Target.SetPhysics(PHYS_None);
			Target.SetPhysics(PHYS_Rotating);
		#endif
		} else if (Target.bCollideWorld) {
			// Healthy, but maybe not ideal for projectiles?
			Target.SetPhysics(PHYS_Falling);
		} else {
			// Target.SetPhysics(OldPhysics); // Probably PHYS_None
			Target.SetPhysics(PHYS_None);
			// Target.SetPhysics(PHYS_Rotating);
		}
		// TODO: Instead of setting PHYS_None, set PHYS_Flying, and dampen velocity until building stops.
		// Target.bSimFall = True;
		// TODO: We didn't reset RemoteRole!  Maybe we should store PreviousRole (and re-enable Tick, but was it enabled before?!).
		if (PlayerPawn(Target)==None) {
			Target.RotationRate.Pitch = Target.RotationRate.Pitch/8;
			Target.RotationRate.Yaw = Target.RotationRate.Yaw/8;
			Target.RotationRate.Roll = Target.RotationRate.Roll/8;
		}
		DebugLog("ReleaseTarget() Target released with Physics="$Target.Physics);
		Target = None;
	}
}

simulated function Tick(float DeltaTime) {

	// Log("Tick() called on "$Level.NetMode$" Role "$Role$" (Remote="$RemoteRole$")");

	// if (PlayerPawn(Target)!=None)
		// return; // This did not pr_vent the crashes!

	if (Level.NetMode!=1 && Instigator==None) {
		// Although Instigator is set on the server, it does not get replicated to the client.
		if (Owner != None && Pawn(Owner)!=None) {
			DebugLog(Self$".Tick() Set Instigator from Owner "$Owner);
			Instigator = Pawn(Owner);
		}
	}

	CheckForUpdate(DeltaTime);

	if (Target != None) {
		ChangeTargetVelocity(DeltaTime);
	}

	MoveMeshes(DeltaTime);

}

simulated function CheckForUpdate(float DeltaTime) {

	// Only on the client
	if (Level.NetMode!=1) {

		// Check if replication has dropped the target:
		if (Target==None) {
			if (LastTarget!=None) {
				DebugLog(Self$".Tick() Dropped LastTarget="$LastTarget);
			}
			#ifdef SIEGE_COMPATIBILITY
			if (sgBuilding(LastTarget)!=None) {
				// Reset the building's meshes!
				foreach AllActors(class'sgMeshFX',sgTargetMesh) {
					if (sgTargetMesh.Owner == LastTarget && sgBaseCore(LastTarget)==None) {
						sgTargetMesh.RotationRate.Pitch = sgTargetMesh.RotationRate.Pitch/8;
						sgTargetMesh.RotationRate.Yaw = sgTargetMesh.RotationRate.Yaw/8;
						sgTargetMesh.RotationRate.Roll = sgTargetMesh.RotationRate.Roll/8;
						sgTargetMesh.SetPhysics(LastTarget.Physics);
						// sgTargetMesh.SetPhysics(PHYS_Rotating);
					}
				}
			}
			sgTargetMesh = None; // The call to clear it may not have got replicated to client.  Bah we don't use it any more.
			#endif
			LastTarget = None;
		}

		// Check if replication has given us a new target:
		if (Target!=None && Target!=LastTarget) {
			// DebugLog(Self$".Tick() - Calling InitTarget()");
			DebugLog(Self$".Tick() - Client got Target update!  ("$LastTarget$") -> Target="$Target);
			LastTarget = Target;
			//// Initialize the clientside actor separately from the serverside actor.
			InitTarget(); // TODO: This is dirty, and if done wrong could result in an infinite loop - abstract what is needed and neaten this up.
			// However commenting this out did not fix the "RPC bunch overflowed" errors and client half-freezes.
			// It did stop the sgBuildings moving as well.
			// If we don't do this InitTarget(), the mesh does not move!
			if (UpdateCount > LastUpdate+1) {
				DebugLog(Self$".Tick() We have missed "$ (UpdateCount-LastUpdate-1) $" updates!");
			}
			LastUpdate = UpdateCount;
		}

	}

}

simulated function MoveMeshes(float DeltaTime) {
	local int meshCount;

	if (Target != None) {

		// Log(Self$".Tick() called Target="$Target$" LastTarget="$LastTarget);

		// Undo gravity?
		// ...
		// CheckForUpdateAndMoveMeshes(DeltaTime);

		#ifdef SIEGE_COMPATIBILITY
		// sgBuilding will have a corresponding mesh actor
		if (Level.NetMode != NM_DedicatedServer && sgBuilding(Target)!=None) {
		// if (sgBuilding(Target)!=None) {
			// if (sgTargetMesh==None) {
				// TODO CONSIDER: we might make this more efficient with VisibleActors().
				foreach AllActors(class'sgMeshFX',sgTargetMesh) {
					meshCount++;
					// if (VSize(sgTargetMesh.Location-Target.Location)<5.0 || sgTargetMesh.Instigator == Target || sgTargetMesh.Owner == Target) {
					if (sgTargetMesh.Owner == Target) {
						if (FRand()<0.01) { DebugLog(Self$".MoveMeshes() Caught mesh "$sgTargetMesh$" for Target "$Target); }
						// First time
						sgTargetMesh.SetPhysics(PHYS_ForceGun);
						sgTargetMesh.RemoteRole = ROLE_DumbProxy;
						// Updates
						sgTargetMesh.SetLocation(Target.Location);
						sgTargetMesh.Velocity = Target.Velocity;
						if (sgBaseCore(Target)==None) {
							BrownianRotate(sgTargetMesh);
						}
						// break;
					}
				}
			// }
			if (sgTargetMesh==None && FRand()<0.01) {
				DebugLog(Self$".MoveMeshes() FAILED to find Mesh for "$Target$", searched "$meshCount);
			}
			// } else {
				// sgTargetMesh.SetLocation(Target.Location);
				// sgTargetMesh.Velocity = Target.Velocity;
				// if (FRand()<0.1) { DebugLog(Self$".CheckForUpdateAndMoveMeshes() Moved mesh "$sgTargetMesh); }
			// }
			// if (sgTargetMesh==None || VSize(sgTargetMesh.Location-Target.Location)>=0.5) {
			// }
		}
		#endif

	}

}

simulated function BrownianRotate(Actor A) {
	local rotator changeRot;
	local float MaxRotRate;
	if (PlayerPawn(A)!=None) {
		return;
	}
	/*if (Bot(A)!=None) {
		changeRot = A.Rotation;
		changeRot.Pitch += 5*(FRand()-0.5);
		changeRot.Roll += 5*(FRand()-0.5);
		changeRot.Yaw += 5*(FRand()-0.5);
		A.SetRotation(changeRot);
		return;
	}*/
	// This works nicely on meshes and other Actors.
	// TODO: But Bots tend to change pitch to one extreme, that stays fixed for quite a while.
	// A.RotationRate.Pitch += 15*(FRand()-0.5);
	// A.RotationRate.Roll += 15*(FRand()-0.5);
	// A.RotationRate.Yaw += 15*(FRand()-0.5);
	// MaxRotRate = 20000;
	// TODO: ideally we would rotate the sgBuilding relative to it's current rotation rate, and set it back again after.
	//       atm containers end up rotating about the right speed when dropped, but protectors end up rotating too slowly!
	MaxRotRate = 120000 * PullStrength / Difficulty(); // Ahhh this was inf until I made Difficulty() simulated.
	if (MaxRotRate>30000)
		MaxRotRate=30000;
	// #define ChangeRotRate(V) if (FRand()<0.5) { V-=5; } else { V+=5; } if (V<MaxRotRate) { V=-MaxRotRate; } else if (V>MaxRotRate) { V=MaxRotRate; }
	// sgBuildings only rotate around the axes they were rotating about before!
	#define ChangeRotRate(V) if (sgBuilding(A)==None || Abs(V)>0) { if (FRand()<0.5) { V-=5; } else { V+=5; } if (V<MaxRotRate) { V=-MaxRotRate; } else if (V>MaxRotRate) { V=MaxRotRate; } }
	ChangeRotRate(A.RotationRate.Pitch);
	ChangeRotRate(A.RotationRate.Roll);
	ChangeRotRate(A.RotationRate.Yaw);
	// A.DesiredRotation = changeRot;
	// Try harder!
	// if (A.IsA('Inventory')) {
		// Inventory(A).bRotatingPickup = False;
	// }
}

// Not simulated on purpose - we only want to move the Target on the server.
// If we moce the Target on the client, we get errors Target$" moved without proper hashing".
function ChangeTargetVelocity(float DeltaTime) {
	local Vector holdPos;

	if (Target==None || Instigator==None) {
		Log(Self$".ChangeTargetVelocity() aborting with with Target="$None$", Instigator="$None);
		return;
	}

	holdPos = Instigator.Location + 180.0 * GetLookDir(Instigator) + Vect(0,0,75);
	// if (FRand()<0.02) { ClientLog("195 = "$VSize(holdPos-Instigator.Location)); }

	// DebugLog("Doing ChangeTargetVelocity("$DeltaTime$" NetMode="$Level.NetMode$" Role="$Role$" with Target="$Target$" and Instigator="$Instigator$" distance="$VSize(holdPos-Target.Location)$" velocity="$Target.Velocity);
	// DebugLog("Doing ChangeTargetVelocity("$DeltaTime$" distance="$VSize(holdPos-Target.Location)$" Target="$Target$" Location="$Target.Location$" Velocity="$Target.Velocity$" Instigator="$Instigator$" Location="$Instigator.Location$" Velocity="$Instigator.Velocity);
	// DebugLog("Doing ChangeTargetVelocity("$DeltaTime$" distance="$VSize(holdPos-Target.Location)$" Target="$Target$" Location="$Target.Location$" Velocity="$Target.Velocity$" Instigator="$Instigator);
	// DebugLog("Doing ChangeTargetVelocity("$DeltaTime$" distance="$ Int(VSize(holdPos-Target.Location)) $" tgt.P="$Target.Physics$" ins.P="$Instigator.Physics$" tgt.loc="$Target.Location$" ins.loc="$Instigator.Location);
	// DebugLog("Doing ChangeTargetVelocity("$DeltaTime$" distance="$ Int(VSize(holdPos-Target.Location)) $" tgt.P="$Target.Physics$" ins.P="$Instigator.Physics$" tgt.V="$Int(VSize(Target.Velocity))$" ins.V="$Int(VSize(Instigator.Velocity)));

		if (Role==ROLE_Authority /*|| bTesting*/) { // this check probably isn't needed, we aren't in a simulated fn
		// if (True) { // Doing it on both causes client error: Target$" moved without proper hashing"

			/*

			// Should end at distance 130, since 50*50+120*120=130*130.
			// Target.SetLocation( Target.Location*0.99 + holdPos*0.01 );
			// if (VSize(holdPos-Target.Location)<5.0) {
				// Target.Velocity = VRand()*0.1;
			// } else {
				// If I do this on the client, distance and velocity go to inf!
				Target.Velocity = Normal(holdPos - Target.Location) * 480.0 * PullStrength / Difficulty();
			// }

			// Soften velocity in the centre of the field
			if (VSize(holdPos-Target.Location)<10.0) {
				Target.Velocity *= FClamp(VSize(holdPos-Target.Location)/10.0,0.0,1.0);
			}

			// ClientLog("Trying to undo gravity.");
			// Target.Velocity = Target.Velocity - Level.ZoneGravity*vect(0,0,0.5);
			// Actually no need since now we force position.
			//// TODO: This approach lets us pull objects through walls!  Maybe detect if the move failed?
			LastLoc = LastLoc + Target.Velocity*DeltaTime;
			// if (PlayerPawn(Target)!=None || bTesting) // Will this stop the RPC crashes? NO!
			// Target.SetLocation(LastLoc);
			if (!Target.Move(LastLoc-Target.Location) && FRand()>0.1) {
				ClientLog("Target "$Target.getHumanName()$" doing odd movement "$Int(VSize(LastLoc-Target.Location)));
				Target.SetLocation(LastLoc);
			}

			*/

			Target.Velocity = Target.Velocity * 0.95 + 3.0*480.0 * DeltaTime * Normal(holdPos-Target.Location) * PullStrength / Difficulty();
			if (VSize(holdPos-Target.Location)<10.0) {
				Target.Velocity = Target.Velocity * (0.95 + 0.05*VSize(holdPos-Target.Location)/10.0); // 0.95 - 1.0
			}
			LastLoc = Target.Location + Target.Velocity*DeltaTime;
			// LastLoc = LastLoc + Target.Velocity*DeltaTime; // This will catch up (push thru wall) after blocked for some time.
			if (!Target.Move(Target.Velocity*DeltaTime) && FRand()>0.1) {
				ClientLog("Target "$Target.getHumanName()$" doing odd movement "$Int(VSize(LastLoc-Target.Location)));
				// Target.SetLocation(LastLoc);
				Target.SetLocation(Target.Location + Velocity*DeltaTime);
			}

			BrownianRotate(Target);

		}

		//// If we do this on the client, we get hashing errors!
		// if (bTesting && Role!=ROLE_Authority) {
			// Target.SetLocation(Target.Location + DeltaTime*Velocity);
		// }

}

simulated function Vector GetLookDir(Actor A) {
	// PlayerPawn.Rotation does not look up/down properly, we must use ViewRotation!
	if (Pawn(A)!=None)
		return Vector(Pawn(A).ViewRotation);
	// if (PlayerPawn(A)!=None)
		// return Vector(PlayerPawn(A).ViewRotation);
	// if (Bot(A)!=None)
		// return Vector(Bot(A).ViewRotation);
	return Vector(A.Rotation);
}

simulated function ThrowTarget() {
	// TODO: For Actors which we can't throw (they don't like to fall), we could either
	//       - Move the focal point of the gravity field outward, so they object rests further away.
	//       - Push the target away from us, and Tick it until it comes to a stop.
	if (Target != None) {
		Target.Velocity = GetLookDir(Instigator) * 1200.0 + Vect(0,0,300);
		Target.Velocity *= 1.5 * PullStrength / Difficulty();
		// ClientLog("Throwing "$Target$" with velocity "$VSize(Target.Velocity)$" difficulty="$String(Difficulty()));
		Instigator.ClientMessage("Throwing "$Target.getHumanName()$" with velocity "$VSize(Target.Velocity)$" (vertical "$Target.Velocity.Z$") difficulty="$String(Difficulty()));
		ReleaseTarget();
		// Target.SetPhysics(PHYS_Falling); // TODO: But what if it doesn't bCollideWorld?  Ideally we would like it to float to a stop in the air.
	}
}

simulated function Destroyed () {
	ReleaseTarget();
	Super.Destroyed();
}

// Difficulty is basically mass, but it is tweaked, because many Actors are 100 when I want them to have other values.
simulated function float Difficulty() { // num from 1.0 to 100.0 - normal 100mass object has Difficulty 3.
	local float useMass;
	if (Target==None) {
		return 1.0;
	} else {
		useMass = Target.Mass;
		#ifdef SIEGE_COMPATIBILITY
		// Siege buildings should be heavier than normal 100 actors, but are not marked as such :P
		if (sgBuilding(Target)!=None)
			useMass *= (2.0+sgBuilding(Target).Grade/2);
		// Damage-giving buildings are heavier still: (I skipped the fast explosives)
		if (
			sgProtector(Target)!=None
			|| sgGuardian(Target)!=None
			|| Mine(Target)!=None
		)
			useMass *= 3;
		// The BaseCore is very heavy:
		if (sgBaseCore(Target)!=None)
			useMass *= 240;
		#endif
		return FClamp(1+useMass/50,1,800);
	}
}

function DropFrom (Vector StartLocation) {
	Super.DropFrom(StartLocation);
}

function BringUp () {
	Super.BringUp();
}

function RaiseUp (Weapon OldWeapon) {
	Super.BringUp();
}

simulated function Fire (optional float Value) {
	GotoState('NormalFire');
	if ( Owner.bHidden ) {
		CheckVisibility();
	}
}

function AltFire (float Value) {
	GotoState('AltFiring');
}

state NormalFire {

	simulated function BeginState() {
		if (Target == None)
			AcquireTarget();
	}

	function Fire (float F) {
	}

	function AltFire (float F) {
	}

	function EndState () {
	}

	Begin:
		FinishAnim();
		// AcquireTarget() was here but moved it to BeginState() to ensure it runs simulated.
		Sleep(0.1);
		Finish();

}

state AltFiring {

	function Fire (float F) {
	}

	function AltFire (float F) {
	}

	function EndState () {
	}

	Begin:
		FinishAnim();
		ThrowTarget();
		// Sleep(0.1);
		Sleep(4.0); // wondering if we can delay primary from acting for a while
		Finish();

}

state Idle {

	simulated function BeginState() {
		bPointing = False;
		ReleaseTarget();
		Disable('AnimEnd');
		PlayIdleAnim();
	}

	function AnimEnd () {
		PlayIdleAnim();
	}

	function bool PutDown () {
		GotoState('DownWeapon');
		return True;
	}

}

simulated function Finish () {
	local Pawn PawnOwner;

	if ( bChangeWeapon ) {
		GotoState('DownWeapon');
		return;
	}
	PawnOwner = Pawn(Owner);
	if ( PlayerPawn(Owner) == None ) {
		PawnOwner.StopFiring();
		GotoState('Idle');
		return;
	} else {
		if ( PlayerPawn(Owner).bExtra1 != 0 ) {
			Global.Fire(0.0);
		} else if ( PawnOwner.bFire != 0 ) {
			Global.Fire(0.0);
		} else if ( PawnOwner.bAltFire != 0 ) {
			Global.AltFire(0.0);
		} else {
			GotoState('Idle');
			// We get here when fire button has been released.
		}
	}
}

/*
function SetHand (float hand) {
	Mesh = LodMesh'Transloc'; // Upper hand
	// Mesh = LodMesh'TranslocR'; // Upper hand
	Mesh = Mesh(DynamicLoadObject("Botpack.TranslocR",Class'Mesh'));
	// // Mesh = Mesh(DynamicLoadObject("Botpack.Transloc",Class'Mesh'));
}
*/

function SetHand (float hand) {
	if ( hand != 2 ) {
		if ( hand == 0 ) {
			hand = 1.0;
		} else {
			hand *= -1;
		}
		if ( hand == -1 ) {
			Mesh = Mesh(DynamicLoadObject("Botpack.TranslocR",Class'Mesh'));
			// Mesh = Mesh(DynamicLoadObject("Botpack.Transloc",Class'Mesh'));
		} else {
			Mesh = PlayerViewMesh;
		}
	}
	Super.SetHand(hand);
}

simulated function PlaySelect() {
	// OnSelect();
	Super.PlaySelect(); // Avoids errors thrown by missing meshes.
}

state DownWeapon {
	function BeginState() {
		// OnDeselect(); // Was not being called simulated, so moved it to the GotoState() calls, but still not.  So made it work non-replicated.
		Super.BeginState();
	}
}

function Actor FindTarget(Actor from) {
	local Actor A;
	local float distance;
	local float deltaRotation;
	local Actor bestActor;
	local float bestDistance;
	bestActor = None;
	foreach VisibleActors(class'Actor', A, 1024, from.Location) {
	// foreach AllActors(class'Actor', A) { // not using VisibleActors gets us more invisible actors like InventorySpot/Light/...

		// DONE: I want to be able to pick up anything, but there should be a priority!
		if (
			bestActor!=None
			&&
			(
				A.IsA('UTChunk') || A.IsA('Effects') || A.IsA('Light') || A.IsA('Decal') || A.IsA('Carcass')
				||
				A.IsA('UT_ShellCase')
			)
		)
			continue;

		if (A == from) { // don't find self!
			continue;
		}

		// distance = VSize(A.Location - from.Location);
		// deltaRotation = Abs( Rotator(A.Location - from.Location).Yaw - from.Rotation.Yaw ) % 65536;
		// // if (deltaRotation < 8192 || deltaRotation > 8192*7) {
		// if (deltaRotation > 8192*4) {
			// deltaRotation = 8192*8 - deltaRotation;
		// }
		// if (deltaRotation < 8192 && deltaRotation > -8192) {
		// "distance" is now actually correspondence with line-of-sight
		distance = 1000 - Normal(GetLookDir(from)) Dot Normal(A.Location-from.Location);
		// So we get the thing closest to the centre of our view, even if it hides behind another object!
		if (bestActor == None || distance < bestDistance) {
			bestActor = A;
			bestDistance = distance;
			// PlayerPawn(from).ClientMessage("  " $ A $" (" $ deltaRotation $ ") -> " $ distance $ "");
		}
		// }

	}
	return bestActor;
}

function String StrAfterFirst(String s, String x) {
	return Mid(s,Instr(s,x)+Len(x));
}



defaultproperties {
		bCanThrow=True // To make it sharable in Siege?
		FireOffset=(X=115.00,Y=15.00,Z=2.00),
		// ProjectileClass=class'kxGrapple.GrapplingHook'
		// AltProjectileClass=class'kxGrapple.GrapplingHook'
		DeathMessage="%k hurled %o across the room!"
		PickupMessage="You got the kx Force Gun."
		// bRotatingPickup=True
		ItemName="kx Force Gun"
		PlayerViewOffset=(X=5.00,Y=-4.00,Z=-7.00),
		StatusIcon=Texture'Botpack.Icons.UseTrans'
		Mass=200.00
		SelectSound=Sound'UnrealI.flak.load1'
		// NetPriority=2.95 // I was hoping here to make replication of NextCommand as fast as possible.

		AutoSwitchPriority=1
		InventoryGroup=1
		FiringSpeed=1.0
		PickupAmmoCount=1
		// PlayerViewMesh=Mesh'Botpack.TranslocR'
		// PickupViewMesh=Mesh'Botpack.Trans3loc'
		// ThirdPersonMesh=Mesh'Botpack.Trans3loc'
		// StatusIcon=Texture'Botpack.Icons.UseTrans'
		// Icon=Texture'Botpack.Icons.UseTrans'
		// Mesh=Mesh'Botpack.Trans3loc'

		PullStrength=1.0
		bLogging=True // TODO
		bPickupPlayers=True
		bSameTeamOnly=True
		bTesting=False

	// From ImpactHammer:
		InstFlash=0.0
		InstFog=(X=475.00000,Y=325.00000,Z=145.00000)
		MyDamageType=Impact
		InventoryGroup=1
		AltFireSound=Sound'Botpack.ImpactFire'
		// TensionSound=Sound'Botpack.ImpactLoop'
		bMeleeWeapon=True
		bRapidFire=true
		RefireRate=1.000000
		AltRefireRate=1.000000
		FireSound=Sound'Botpack.ImpactAltFireRelease'
		Misc1Sound=Sound'Botpack.ImpactAltFireStart'
		PlayerViewOffset=(X=3.800000,Y=-1.600000,Z=-1.800000)
		PlayerViewMesh=Mesh'Botpack.ImpactHammer'
		PickupViewMesh=Mesh'Botpack.ImpPick'
		Mesh=Mesh'Botpack.ImpPick'
		ThirdPersonMesh=Mesh'Botpack.ImpactHandm'
		StatusIcon=Texture'Botpack.Icons.UseHammer'
		PickupSound=Sound'UnrealShare.Pickups.WeaponPickup'
		SelectSound=Sound'Botpack.ImpactPickup'
		Icon=Texture'Botpack.Icons.UseHammer'
		bMeshCurvy=False
		bNoSmooth=False
		SoundRadius=50
		SoundVolume=200
		WeaponDescription="Classification: Gravitational Field Piston\\n\\nPrimary Fire: Pulls objects toward you and holds them in the air\\n\\nSecondary Fire: Throws held objects away from you."
		NameColor=(R=255,G=192,B=0)

}

