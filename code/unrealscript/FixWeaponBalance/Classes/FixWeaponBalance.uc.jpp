class FixWeaponBalance expands Mutator config(FixWeaponBalance);

// vim: ft=uc
// TODO: We should also reduce zp shock primary and enforcer the same way.
// TODO: To make them like PureStats (CTF), we should reduce minigun and pulse
//       (a bit) for ZeroPingPlus103, or not reduce them for ZPPure7G.
// DONE: bFixCrouchingBug for ZeroPingPlus103
// TODO: We may be able to process damage done before armour, by giving each
//       player a high-priority custom armour class.
// TODO: DO NOT adjust damage against general pawns (e.g. siege buildings),
//       only against players and bots.
// TODO: Alternative setup: keep ZP sniper strong, increase strength of all
//       other weapons to match.

#define ADJUST_SNIPER_DAMAGE

// Debugging:

// #define DebugLog(X); if (bLogging) { Log("[FixWeaponDamage] "$(X)); } if (bLiveReports) { BroadcastMessage("[FWD] "$(X)); }
#define DebugLog(X); if (bLogging) { Log("[FixWeaponDamage] "$(X)); }
// #define DebugLog(X); 

var config bool bEnabled;
var config bool bLogging;
var config bool bLiveReports;

#ifdef ADJUST_SNIPER_DAMAGE
var config bool bKeepHeadshotsInAllModes;
var config float SniperDamageScale,SniperBoostScale;
var config int SniperMaxDamage;
var config bool bFixCrouchingBug;   // For ZeroPingPlus103
#endif

function PostBeginPlay() {
	// if (bEnabled) {
	Level.Game.RegisterDamageMutator(Self);
	Level.Game.RegisterMessageMutator(Self);
	// }
}

function ModifyPlayer(Pawn Other) {
	Super.ModifyPlayer(Other);
	if (bEnabled) {
		if (PlayerPawn(Other)!=None && PlayerPawn(Other).PlayerReplicationInfo.Deaths==0) {
			Other.ClientMessage("FixWeaponBalance has reduced sniper damage for this game.");
		}
	}
}

function MutatorTakeDamage( out int ActualDamage, Pawn Victim, Pawn InstigatedBy, out Vector HitLocation, out Vector Momentum, name DamageType) {

	local bool bSniperShot,bHeadshot; // bSniperShot also counts of Enforcer.
	local int NewDamage;

	if (bEnabled && PlayerPawn(InstigatedBy)!=None) {

		bHeadshot = (DamageType=='decapitated') || (DamageType=='shot' && ActualDamage>34);

		// Is this a sniper or enforcer hit?
		if (DamageType == 'shot' || DamageType == 'decapitated') {

			if ( SniperRifle(InstigatedBy.Weapon)!=None || Enforcer(InstigatedBy.Weapon)!=None ) {
				bSniperShot = True;
			} else if (Minigun2(InstigatedBy.Weapon)!=None) {
				// I hate minigun, so I'm counting it as a sniper for now :P
				bSniperShot = True;
			} else {
				DebugLog("Ignoring 'shot' from unexpected weapon: "$ InstigatedBy.Weapon);
				bSniperShot = False;
			}

		}

		if (bSniperShot) {

			#ifdef ADJUST_SNIPER_DAMAGE

				if (bFixCrouchingBug && Victim.IsA('PlayerPawn') && PlayerPawn(Victim).bIsCrouching) {
					// Headshots are not possible on crouched players, so we reduce the damage to a body hit.
					if (DeathMatchPlus(Level.Game).bHardcoreMode) {
						if (ActualDamage > 67) {
							ActualDamage = 67;
						}
					} else {
						if (ActualDamage > 58) {
							ActualDamage = 58;
						}
					}
				}

				// Always scale damage for sniper rifle?
				NewDamage = ActualDamage * SniperDamageScale;
				// In non-hardcore mode, we cannot scale headshots down, because they are only 100 to start with!
				if (bKeepHeadshotsInAllModes && ActualDamage>=100 && NewDamage<100) {
					NewDamage = 100; /*
					NewDamage = ActualDamage; */
				}
				if (NewDamage < ActualDamage) {
					DebugLog("Reducing shot "$ActualDamage$" -> "$NewDamage$" ( "$GHN(InstigatedBy)$" -> "$GHN(Victim)$" )");
					if (bLiveReports) {
						InstigatedBy.ClientMessage("Reducing shot "$ActualDamage$" -> "$NewDamage$" ( "$GHN(InstigatedBy)$" -> "$GHN(Victim)$" )");
					}
				}
				ActualDamage = NewDamage;

				Momentum = Momentum * SniperBoostScale;
				if (ActualDamage > SniperMaxDamage) {
					ActualDamage = SniperMaxDamage;
				}

			#endif

		}

		if (ActualDamage == 0) {
			Momentum = vect(0,0,0);
			// DamageType = ''; //// Does not pr_vent blood spurts from appearing
		}

	}

	Super.MutatorTakeDamage(ActualDamage,Victim,InstigatedBy,HitLocation,Momentum,DamageType);
}

function String GHN(Actor a) {
	if (Pawn(a) != None) {
		return Pawn(a).getHumanName();
	} else {
		return String(a);
	}
}

// Catch messages from players:
function bool MutatorTeamMessage(Actor Sender, Pawn Receiver, PlayerReplicationInfo PRI, coerce string Msg, name Type, optional bool bBeep) {
	if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
		if (StrStartsWith(Msg,"!")) {
			CheckMessage(Mid(Msg,1), PlayerPawn(Sender));
		}
	}
	return Super.MutatorTeamMessage(Sender,Receiver,PRI,Msg,Type,bBeep);
}

// Catch messages from spectators:
function bool MutatorBroadcastMessage(Actor Sender, Pawn Receiver, coerce string Msg, optional bool bBeep, optional name Type) {
	if (Sender == Receiver && Sender.IsA('PlayerPawn')) { // Only process each message once.
		if (StrContains(Msg,":!")) {
			// Spectator messages start with the extra "<nick>:".  We remove this.
			CheckMessage(Mid(Msg,InStr(Msg,":!")+1), PlayerPawn(Sender));
		}
	}
	return Super.MutatorBroadcastMessage(Sender,Receiver,Msg,bBeep,Type);
}

function Mutate(String str, PlayerPawn Sender) {
	CheckMessage(str, Sender);
	Super.Mutate(str, Sender);
}

// Returns True if the command was recognised (and therefore the player's message could optionally be swallowed).
function bool CheckMessage(String line, PlayerPawn Sender) {
	local int argCount;
	local String args[256];
	local String command;
	local String tmpstr;

	// DebugLog("FixWeaponBalance.CheckMessage() ("$Sender$"): "$Msg$"");
	argCount = SplitString(line," ",args);

	command = args[0];

	if (command ~= "STATUS") {
		SendStatusTo(Sender);
		return True;
	}

	if (!Sender.bAdmin) {
		return False;
	}
	// The following commands are for ADMINS ONLY

	if (command ~= "HELP") {
		Sender.ClientMessage("FixWeaponBalance.bEnabled = "$bEnabled);
		Sender.ClientMessage("FixWeaponBalance commands: !fwb !report | !status");
		return True;
	}

	// Admin can easily turn this on for testing, but it won't be saved for next map
	if (command ~= "REPORT" || command ~= "FWBREPORT") {
		bLiveReports = !bLiveReports;
		if (bLiveReports)
			BroadcastMessage(Sender.getHumanName()$" has ENABLED FixWeaponBalance reporting with \"mutate report\".");
		if (!bLiveReports)
			BroadcastMessage(Sender.getHumanName()$" has DISABLED FixWeaponBalance reporting with \"mutate report\".");
	}

	if (command ~= "FWB") {
		bEnabled = !bEnabled;
		if (bEnabled)
			tmpstr = "ENABLED";
		else
			tmpstr = "DISABLED";
		if (bLiveReports)
			BroadcastMessage(Sender.getHumanName()$" has "$tmpstr$" FixWeaponBalance.");
		else
			Sender.ClientMessage("You have "$tmpstr$" FixWeaponBalance.");
		return True;
	}

	return False;

}

//// Normally we send the info to the caller:
// #define Send Sender.ClientMessage
//// But sometimes I want the output logged to the logfile, so I can post-process it:
// #define Send DebugLog
// #define Send(X); Sender.ClientMessage(X); Log(X);
#define Send(X); if (Sender==None) { Log(X); } else { Sender.ClientMessage(X); }
function SendStatusTo(Pawn Sender) {
	Send("FixWeaponBalance settings:");
	Send("  Enabled = "$bEnabled);
	Send("  Logging = "$bLogging);
	Send("  Reporting = "$bLiveReports);
	#ifdef ADJUST_SNIPER_DAMAGE
	Send("  SniperDamageScale = "$PercentageChangeStr(SniperDamageScale));
	Send("  SniperBoostScale = "$PercentageChangeStr(SniperBoostScale));
	Send("  SniperMaxDamage = "$SniperMaxDamage);
	Send("So headshot 150 now gives "$ Int(150*SniperDamageScale) $" and bodyhit 67 gives "$ Int(67*SniperDamageScale) $".");
	#endif
}

function String PercentageChangeStr(float proportion) {
	if (proportion == 1.0) {
		return "normal";
	}
	if (proportion < 1.0) {
		return Int(100*(1.0-proportion)+0.5)$"% smaller";
	}
	if (proportion > 1.0) {
		return Int(100*(proportion-1.0)+0.5)$"% larger";
	}
}

#include "../../JLib/jlib.uc.jpp"

defaultproperties {
	bEnabled=True
	bLogging=False
	bLiveReports=False
	#ifdef ADJUST_SNIPER_DAMAGE
	bKeepHeadshotsInAllModes=True
	SniperDamageScale=0.78
	SniperBoostScale=1.0
	SniperMaxDamage=102
	bFixCrouchingBug=True
	#endif
}

// Note that this does not affect damage to armour, only damage to health.
// Usually a headshot does 150 damage, and a body shot does 67.

// We might want a headshot to do 102, and a bodyshot 52.  (scale 0.78)
// This is the minimum that will look normal on a guy with 100 hp and 0 armour.

// (Alternatively, for bodyshot 55, use scale 0.825.)

// In non-hardcore mode (which Siege requires for jetpack), headshots usually
// cost 100(?) and bodyshots 58.

