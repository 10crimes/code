/** This file was auto-generated by jpp.  You probably want to be editing ./PubliciseScore.uc.jpp instead. **/



class PubliciseScore extends Mutator;

var bool Initialized;

var string titleDefault;

defaultproperties {
}

function PostBeginPlay() {
 if (Initialized) {
  Log("PubliciseScore.PostBeginPlay(): Already initialised!");
  return;
 }
 Initialized = True;

 titleDefault = "";
 if (Level.Game.IsA('TeamGamePlus')) {
  SetTimer(19,True);
 } else {
  SetTitle("");
 }
}

event Timer() {
 local int redScore, blueScore;
 redScore = TournamentGameReplicationInfo(Level.Game.GameReplicationInfo).Teams[0].Score;
 blueScore = TournamentGameReplicationInfo(Level.Game.GameReplicationInfo).Teams[1].Score;
 // SetTitle(" ["$redScore$":"$blueScore$"]");
 SetTitle(" [Red:"$redScore$" Blue:"$blueScore$"]");
}

function SetTitle(String newText) {
 // local String serverName;
 // serverName = Level.Game.GameReplicationInfo.ServerName;
 // // serverName = TournamentGameReplicationInfo(Level.Game.GameReplicationInfo).ServerName;
 // Log("PubliciseScore.SetTitle(): current title is \"" $ serverName $ "\".");
 // if (StrEndsWith(serverName,"] ")) {
  // serverName = StrBeforeLast(serverName," [");
 // }
 // if (newText != "") {
  // serverName = serverName $ " [" $ newText $ "] ";
 // }
 // Log("PubliciseScore.SetTitle(): new title is \"" $ serverName $ "\".");
 // Level.Game.GameReplicationInfo.ServerName = serverName;
 if (titleDefault == "") {
  titleDefault = Level.Game.GameReplicationInfo.ServerName;
 }
 // Log("PubliciseScore.SetTitle(): setting server title to \"" $ titleDefault $ newText $ "\".");
 Level.Game.GameReplicationInfo.ServerName = titleDefault $ newText;
}
/*

//// CONSIDER: we could add support for squeezing multiple delimiters into 1

// function array<String> SplitString(String str, String divider) {

// function int SplitString(String str, String divider, out array<String> parts) {

*/
function int SplitString(String str, String divider, out String parts[256]) {
 // local String parts[256];
 // local array<String> parts;
 local int i,nextSplit;
 i=0;
 while (true) {
  nextSplit = InStr(str,divider);
  if (nextSplit >= 0) {
   // parts.insert(i,1);
   parts[i] = Left(str,nextSplit);
   str = Mid(str,nextSplit+Len(divider));
   i++;
  } else {
   // parts.insert(i,1);
   parts[i] = str;
   i++;
   break;
  }
 }
 // return parts;
 return i;
}
/*

function int SplitString(String str, String divider, out String parts[256]) {

   // local String parts[256];

   // local array<String> parts;

   local int i,nextSplit;

   i=0;

   while (true) {

      nextSplit = InStr(str,divider);

      if (nextSplit >= 0) {

         // parts.insert(i,1);

         parts[i] = Left(str,nextSplit);

         str = Mid(str,nextSplit+Len(divider));

         i++;

      } else {

         // parts.insert(i,1);

         parts[i] = str;

         i++;

         break;

      }

   }

   // return parts;

   return i;

}

*/
function string GetDate() {
    local string Date, Time;
    Date = Level.Year$"-"$PrePad(Level.Month,"0",2)$"-"$PrePad(Level.Day,"0",2);
    Time = PrePad(Level.Hour,"0",2)$":"$PrePad(Level.Minute,"0",2)$"."$PrePad(Level.Second,"0",2);
    return Date$"-"$Time;
}
function string PrePad(coerce string s, string p, int i) {
    while (Len(s) < i)
        s = p$s;
    return s;
}
function bool StrStartsWith(string s, string x) {
 return (InStr(s,x) == 0);
 // return (Left(s,Len(x)) ~= x);
}
// function bool StrEndsWith(string s, string x) {
 // return (Right(s,Len(x)) ~= x);
// }
function string StrAfterLast(string s, string x) {
 local int i;
 i = InStr(s,x);
 if (i == -1) {
  return s;
 }
 while (i != -1) {
  s = Mid(s,i+Len(x));
  i = InStr(s,x);
 }
 return s;
}
/*

function int InStrLast(string haystack, string needle) {

	local int pos;

	pos = 0;

	pos = InStr(haystack,needle,pos);

	if (pos == -1) {

		return -1;

	} else {

		

}

*/
function int InStrOff(string haystack, string needle, int offset) {
 local int instrRest;
 instrRest = InStr(Mid(haystack,offset),needle);
 if (instrRest == -1) {
  return instrRest;
 } else {
  return offset + instrRest;
 }
}
/*



*/
function String StrAfter(String s, String x) {
 local int i;
 i = Instr(s,x);
 return Mid(s,i+Len(x));
}
