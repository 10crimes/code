<HTML>
<HEAD>

<TITLE>Powerbar</TITLE>

<script type="text/javascript"> <!--

// Useful: :! onchange "powerbar.html.jpp" do jpp -- powerbar.html.jpp

// BUGS:
// Not yet ported to IE.  (Written against Mozilla, ported to Konqueror.)
// Konqueror's log text freezes up and doesn't display until nudged.

//// Yummy I found reflection:
// for (var x in top.powerBarFrame) { log(""+x); }     

var exploder = (navigator.appName == "Microsoft Internet Explorer");
var nutscrape = (navigator.appName == "Netscape"); // also what Mozilla reports
var konqueror = (navigator.appName == "Konqueror"); // also what Mozilla reports
var browserCanWriteWithDocumentDotOpen = nutscrape;

///////////////////////// Compile-time options /////////////////////////

// ------------------------ Logging -----------------------

// The simplest demonstration of the usefulness of #define's pre-compile stripping.

#define LOGGING

// You must add LOG_ELEMENT_HTML at some point to the powerBarFrame
// You can then log to that element using LOG(report);

#ifdef LOGGING

	#define LOG(str) log(str)
	// #define LOG(str) try { log(str); } catch (e) { }
	#define LOG_ELEMENT_ID "logElementId"
	// #define LOG_ELEMENT_HTML '<font size="-1"><div id="' + LOG_ELEMENT_ID + '"></div></font>'
	#define LOG_ELEMENT_HTML '<font size="-1"><div id="' + LOG_ELEMENT_ID + '"></div></font>'
	#define LOG_MAX_LINES 7
	var logText = "";
	function log(str) {
		str = niceDate() + ": " + str;
		str = "[" + countCharIn(logText,'\n') + "] " + str;
		logText += str + '\n';
		while (countCharIn(logText,'\n') > LOG_MAX_LINES) {
			// alert("Reducing from: "+logText);
			logText = logText.substring(logText.indexOf('\n')+1);
			// alert("To: "+logText);
		}
		var element = top.powerBarFrame.document.getElementById(LOG_ELEMENT_ID);
		if (element) {
			element.innerHTML = toHtml( element.style.visibility + ":" + logText);
			// Force it to refresh:
			// if (element.style.visibility == "visible") {
				try { // konq:
					element.style = "visibility: hidden";
					element.style.width = 50;
				} catch (e) { // moz:
					element.style.visibility = "visibility: hidden";
				}
			// } else {
				try { // konq:
					element.style = "visibility: visible";
					element.style.width = 20;
				} catch (e) { // moz:
					element.style.visibility = "visibility: visible";
				}
			// }
		}
	}

#else

	#define LOG(str) 
	#define LOG_ELEMENT_HTML ""

#endif

/////////////////////////////// Constants ///////////////////////////////

/////////// Options: (will be load/saveable using cookies...) ///////////

var listOfOptions = [ "opt_powerBarPosition", "opt_ClockEnabled", "opt_JSTesterEnabled", "opt_ButtonsOnPowerBarForms", "opt_ViewInnerHtmlButton" ];

var opt_powerBarPosition = "top";
var opt_ClockEnabled = true;
var opt_JSTesterEnabled = true;
var opt_ButtonsOnPowerBarForms = true;
var opt_ViewInnerHtmlButton = true;
var opt_ReflectorEnabled = true;

/////////////////////////// Runtime constants ///////////////////////////

var defaultSubmitButton = ( opt_ButtonsOnPowerBarForms ? '<INPUT type="button" value="Go" onclick="submit()">' : "" );
var powerBarFrame; // == powerBarFrame
var mainFrame;
var powerBarLocationFormElement;
var lastKnownLocation = "";

var todoList = "";

/////////////////////////// Runtime variables ///////////////////////////

//////////////////////// PowerBar initialisation ////////////////////////

function createFrameset() {
	var distrib = ( opt_powerBarPosition == "top" ? "50%,*" : "*,20%" );
	var startFrameSet     = '<frameset rows="'+distrib+'">';
	var powerBarFrameHtml = '<frame src="about:blank">';
	// var mainFrameHtml     = '<frame src="http://www.google.com/">';
	var mainFrameHtml     = '<frame src="about:blank">';
	var endFrameSet       = '</frameset>';
	var framesetHtml = "";
	framesetHtml += startFrameSet;
	framesetHtml += ( opt_powerBarPosition == "top" ?  powerBarFrameHtml : mainFrameHtml );
	framesetHtml += ( opt_powerBarPosition == "bottom" ?  powerBarFrameHtml : mainFrameHtml );
	framesetHtml += endFrameSet;
	document.writeln(framesetHtml);
	powerBarFrame  = window.frames[ ( opt_powerBarPosition == "top" ? 0 : 1 ) ];
	mainFrame = window.frames[ ( opt_powerBarPosition == "top" ? 1 : 0 ) ];
}

function generatePowerBar() {
	// Note: Since this HTML will sit in a different frame, calls to powerBar's functions and vars must be made with a preceding "top."
	var powerBarHtml = "";
	powerBarHtml += '<table width="100%"><tr><td align="center">';

	powerBarHtml += '<INPUT type="button" value="Wake up!" onclick="top.refreshTimer()">';

	powerBarHtml += '</td><td align="center">';

	//// Location URL textfield:
	// powerBarHtml += '<FORM name="locationTextBox" action="javascript:top.changeLocation(top.mainFrame,this.location.value)">';
	powerBarHtml += '<FORM name="locationForm" onsubmit="top.changeLocation(top.mainFrame,location.value)" action="javascript:">';
	powerBarHtml += 'Location:\n';
	powerBarHtml += '<INPUT name="location" type="text" size="30" value="http://www.google.com/">';
	// powerBarHtml += defaultSubmitButton;
	if (opt_ButtonsOnPowerBarForms) {
		powerBarHtml += '<INPUT type="button" value="Go" onclick="top.changeLocation(top.mainFrame,location.value)">';
	}
	powerBarHtml += '</FORM>';

	// Javascript tester textfield:
	if (opt_JSTesterEnabled) {
		powerBarHtml += '</td><td align="center">';
		// powerBarHtml += '<FORM action="javascript:top.processJs(code.value)">'; // worked fine for konq
		powerBarHtml += '<FORM onsubmit="top.processJs(code.value)" action="javascript:">'; // but this needed for mozilla
		powerBarHtml += 'JavaScript tester:\n';
		powerBarHtml += '<INPUT id="codeToExecute" name="code" type="text" size="30" value="type some javascript here">';
		// powerBarHtml += '<INPUT type="button" value="Go" onclick="submit()">'; // worked fine for konq
		if (opt_ButtonsOnPowerBarForms) {
			powerBarHtml += '<INPUT type="button" value="Go" onclick="top.processJs(code.value)">'; // but mozilla needs this too!
		}
		// powerBarHtml += defaultSubmitButton;
		powerBarHtml += '</FORM>';
	}

	if (opt_ReflectorEnabled) {
		powerBarHtml += '</td><td align="center">';
		powerBarHtml += '<FORM onsubmit="top.jsReflectorInit()" action="javascript:">'; // but this needed for mozilla
		// powerBarHtml += 'JS reflector:\n';
		powerBarHtml += '<INPUT type="button" value="JSReflect" onclick="top.jsReflectorInit()">'; // but mozilla needs this too!
		powerBarHtml += '</FORM>';
	}

	// Options button:
	powerBarHtml += '</td><td align="center">';
	powerBarHtml += '<INPUT type="button" value="Options..." onclick="top.editOptions()">';

	// Clock:
	if (opt_ClockEnabled) {
		powerBarHtml += '</td><td align="center">';
		powerBarHtml += '<div id="clockHook">clock loading...</div>';
	}

	if (opt_ViewInnerHtmlButton) {
		// TODO
		// powerBarHtml += '</td><td align="center">'
		// powerBarHtml += '<INPUT type="button" value="Check" onclick="alert(document.getElementById(\''+LOG_ELEMENT_ID+'\'))">';
	}

	#ifdef LOGGING
		powerBarHtml += '</td><td align="center">'
		powerBarHtml += '<INPUT type="button" value="Show log" onclick="alert(document.getElementById(\''+LOG_ELEMENT_ID+'\').innerHTML)">';
	#endif

	powerBarHtml += '</td></tr></table>';

	#ifdef LOGGING
		powerBarHtml += "<br>" + LOG_ELEMENT_HTML;
	#endif

	writeToFrame(powerBarFrame,powerBarHtml);
	powerBarLocationFormElement = powerBarFrame.document.forms[0];

	// alert("Getting: "+document.getElementById(LOG_ELEMENT_ID));

	// LOG("generatePowerBar() finished.");

}

var timerId;
function refreshTimer() {
	clearTimeout(timerId);
	timerId = setTimeout('updatePowerBar()',1000);
}

function init() {
	createFrameset();
	generatePowerBar();
	// TODO: Make this use referer, or last in browser's history, or url provided via CGI.
	writeToFrame(mainFrame,"Welcome to PowerBar.  This addition to your browser will act like an extra toolbar, but will provide the latest radical Javascript technology from the Neuralyte laboratories, for your enhanced browsing pleazure.");
	updatePowerBar();
}

init();

///////////////////////////// PowerBar calls /////////////////////////////

function updatePowerBar() {
	LOG("updatePowerBar() called.");
	//// Watch for change of address in mainFrame from user following link, and update location textbox.
	//// Disabled because too sensitive (on init, and even if user is typing!)
	var urlOfMainFrame = mainFrame.location;
	// var urlInTextBox = powerBarFrame.document.forms[0].location;
	if (powerBarFrame.document.forms["locationForm"]) {
		var urlInTextBox = powerBarFrame.document.forms["locationForm"].location;
		// if (urlOfMainFrame != urlInTextBox.value) {
		if (urlOfMainFrame != lastKnownLocation) {
			LOG("URL changed from " + lastKnownLocation + " to " + urlOfMainFrame);
			urlInTextBox.value = urlOfMainFrame;
			LOG("B");
			lastKnownLocation = urlOfMainFrame;
			LOG("C");
		}
	}
	if (opt_ClockEnabled) {
		var clockElem = powerBarFrame.document.getElementById('clockHook');
		clockElem.innerHTML = "" + niceDate();
	}
	processTodoList();
	refreshTimer();
}

function processTodoList() {
	while (todoList != "") {
		// powerBarFrame.document.body.innerHTML += "Trying to pop from list:\n" + todoList+"\n\n";
		// alert("Trying to pop from list:\n" + todoList);
		var i = todoList.indexOf("\n");
		var line;
		if (i>=0) {
			line = todoList.substring(0,i);
			todoList = todoList.substring(i+1);
		} else {
			line = todoList;
			todoList = "";
		}
		var result;
		try {
			result = eval(line);
		} catch (e) {
			result = e;
		}
		// alert("processTodoList(): Tried:\n<EVAL>" + line + "</EVAL>\nGot:\n<RESULT>"+result+"</RESULT>");
	}
}

function changeLocation(frame,url) {
	// writeToFrame(frame,'<script type="text/javascript">window.location = "' + url + '";</script>');
	lastKnownLocation = url;
	frame.location = url;
	refreshTimer();
}

function processJs(codeToExecute) {
	var result;
	try {
		result = eval(codeToExecute);
	} catch (e) {
		result = e;
	}
	var report = "I executed\n<CODE>" + codeToExecute + "</CODE>\nand got\n<RESULT>" + result + "</RESULT>";
	var htmlReport = toHtml(report);
	#ifdef LOGGING
		LOG(report);
	#else
		writeToFrame(mainFrame,htmlReport);
		//// Failed attempts to get Konqueror to write later since it dosn't always work first time:
		// todoList += "mainFrame.document.body.innerHTML = \""+report+"\";";
		todoList += "mainFrame.document.body.innerHTML = \"" + escapeString(htmlReport) + "\";";
		// alert(report);
	#endif
	refreshTimer();
}

function writeToFrame(frame,html) {
	if (browserCanWriteWithDocumentDotOpen) {
		frame.document.open();
		frame.document.write("<html><body>"); // you need /some/ kind of surrounding tag if you are just writing text
		frame.document.write(html);
		frame.document.write("</body></html>"); // these tags seemed sensible to me
		frame.document.close();
	} else {
		try {
			frame.location = "about:blank";
		} catch (e) {
			alert("Setting "+frame+".location to blank threw: "+e);
		}
		frame.document.body.innerHTML = html;
	}
}

function componentTypeForJSType(jsType) {
	return (
		jsType == "boolean" ? "checkbox" :
		jsType == "string" ? "text" :
		jsType == "number" ? "text" :
		"button"
	);
}

function editOptions() {
	var html = "";
	for (var i=0;i<listOfOptions.length;i++) {
		var option = listOfOptions[i];
		var value = eval(option);
		var type = typeof(value);
		var componentType = componentTypeForJSType(type);
		var componentValue = ( type == "boolean" ? value ? "checked" : "n" : value );
		html += "Option \""+option+"\": ";
		html += '<INPUT type="'+componentType+'" value="'+componentValue+'" action="alert(value)">';
		html += "<BR>";
		// html += "option "+option+" has value = "+value+" and type "+type+"<BR>";
	}
	writeToFrame(mainFrame,html);
}

function jsReflectorInit() {
	jsReflectorShow("top.powerBarFrame");
}

function strip(str) {
	if (str.length > 50) {
		return str.substring(0,50 - 3) + "...";
	}
	return str;
}

function trytypeof(obj) {
	try {
		var type = typeof(obj);
		return type;
	} catch (e) {
		return "TYPE_ERROR:"+e;
	}
}

function tryeval(code) {
	try {
		var res = eval(code);
		return res;
	} catch (e) {
		return "EVAL_ERROR:"+e;
	}
}

function jsReflectorShow(objName) {
	LOG("jsReflectorShow(\""+objName+"\");");
	try {
		var html = "";
		var obj = tryeval(objName);
		// LOG("D");
		html += "<h3>Inspecting: " + trytypeof(obj) + " " + objName + " = " + obj + "</h3>";
		html += "<blockquote>";
		html += "<table>";
		// LOG("E");
		// var i = 0;
		for (var name in obj) {
			// i++;
			// if (i > 20) {
				// break;
			// }
			// html += "Var " + x + " = " + eval("obj."+x) + "<BR>";
			var globName = objName + "." + name;
			// LOG(globName);
			var type = "unknown";
			var value = "unknown";
			var exc = "";
			try {
				value = eval("obj."+name);
				type = trytypeof(value);
				// test to prove exc can get set: throw new Exception("poo");
			} catch (e) {
				exc = "" + e;
				value = "<unattainable> (" + exc + ")";
				// type = "<unattainable> (" + exc + ")";
			}
			html += "<tr>";
			html += "<td>"+type+"</td>";
			html += "<td>&nbsp;</td>";
			// html += "<td>"+name+"</td>";
			var link = 'javascript:top.jsReflectorShow("' + globName + '")';
			html += "<td><a href='" + link + "'>" + name + "</a></td>";
			html += "<td>=</td>";
			// LOG("F");
			// Konqueror needs to check if value can be evaluated, or whether it breaks with "TypeError: no default value"
			var valueOut;
			try {
				// LOG(value); // too slow?
				valueOut = "" + value;
			} catch (e) {
				value = "<unattainable> (" + e + ")";
			}
			// LOG("G");
			html += "<td>" + toHtml(strip("" + value)) + "</td>";
			html += "<td>" + toHtml(strip("" + exc)) + "</td>";
			html += "</tr>";
		}
		html += "</table>";
		html += "</blockquote>";
		writeToFrame(mainFrame,html);
	} catch (e) {
		LOG(e);
	}
}

/////////////////////////// Library functions ///////////////////////////

function escapeString(text) {
	var map = new Array(); // TODO: more!
	map['\n'] = "\\n";
	map['\t'] = "\\t";
	map['\"'] = "\\\"";
	map['\\'] = "\\\\";
	var str = "";
	for (var i=0;i<text.length;i++) {
		var c = text.charAt(i);
		str += ( map[c] ? map[c] : c );
	}
	return str;
}

function toHtml(text) {
	var map = new Array(); // TODO: more!
	map['\n'] = "<BR>";
	map[' '] = "&nbsp;";
	map['\"'] = "&quot;";
	map['<'] = "&lt;";
	map['>'] = "&gt;";
	var html = "";
	for (var i=0;i<text.length;i++) {
		var c = text.charAt(i);
		html += ( map[c] ? map[c] : c );
	}
	return html;
}

function countCharIn(str,srch) {
	var cnt = 0;
	for (var i=0;i<str.length;i++) {
		if (str.charAt(i) == srch)
			cnt++;
	}
	return cnt;
}

function splitAt(str,srch) {
	var list = new Array();
	var i = 0;
	while (true) {
		var j = str.indexOf(srch);
		if (j < 0)
			break;
		list[i] = str.substring(0,j);
		str = str.substring(j + 1);
		i++;
	}
	list[i] = str;
	return list;
}

function niceDate() {
	var now = "" + new Date();
	var bits = splitAt(now," ");
	return bits[1] + " " + bits[2] + " " + bits[4];
}

// --> </script>

</HEAD>
<BODY>If you don't have Javascript, you're not getting in.</BODY>
</HTML>
