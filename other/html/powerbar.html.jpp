#ifdef PURE_SCRIPT
	#define BOOKMARKLET
#else
	#define WRAP_IN_HTML_PAGE
#endif

#ifdef WRAP_IN_HTML_PAGE
<HTML>
<HEAD>

<TITLE>Powerbar</TITLE>

<script type="text/javascript"> <!--
#endif

// Useful: :! onchange "powerbar.html.jpp" do 'jpp -- powerbar.html.jpp > ./powerbar.html'
//   also: :! onchange "powerbar.html.jpp" do "env JPP_GCC_OPTS='-D BOOKMARKLET' jpp -- powerbar.html.jpp > ./powerbarframe.html"

// TODO: make it easy to add javascripttester or whatever to new opened windows.

// BUGS:
// Not yet ported to IE.  (Written against Mozilla, ported to Konqueror.)
// Konqueror's log text sometimes freezes up and doesn't display until nudged (eg. by resizing frame).

// HELP!
// I have yet to find a nice way to make a textfield which does something when user hits enter.
//   1) onblur works if they move out of the component.  onsubmit tends to do zilch.
//   2) I can put the textfield in a form, but then we need to make the form's action sterile, and any JS must now refer to the textfield's value with an absolute references, because local references don't appear to work in Mozilla.  :-(
// Compare the <INPUT> in jsReflectorShow() (method 1) to those in generatePowerBar() (method 2).
// TODO: once above solved, refactor all the <INPUT> string creation code to use nice generic functions.

// TOGO BUG: How can we prevent all the parents from capturing the XPath click event in Mozilla?  Actually Konqueror has the same issue but still refers to the same srcElement.

// TODO: It would be nice to have some text fields clear their values when entered.  See jumpgate.

var exploder = (navigator.appName == "Microsoft Internet Explorer");
var nutscrape = (navigator.appName == "Netscape"); // also what Mozilla reports
var konqueror = (navigator.appName == "Konqueror"); // also what Mozilla reports
// var browserCanRewriteFramesUsingDocumentDotWrite = nutscrape;





///////////////////////// Compile-time options /////////////////////////

// #define STUFF_IM_JUST_TESTING

#define POPUP_JSREFLECTOR
// otherwise jsReflection appears in mainFrame

// ------------------------ Logging -----------------------

// The simplest demonstration of the usefulness of #define's pre-compile stripping.

// To turn it on or off:
#define LOGGING

// You must add LOG_ELEMENT_HTML at some point to the powerBarFrame
// You can then log to that element using LOG(report);

#ifdef LOGGING

	// #define LOG(str) log(str)
	//// Works from within DHTML on<action> thingies.  Actually it doesn't cos they are always in quotes and hence not interpreted, so to do it I have to put "top.log" in the string.  Damn!
	#define LOG(str) top.log(str)
	#define WARN(str) top.log("[WARN] "+str)
	#define LOG_ELEMENT_ID "logElementId"
	// #define LOG_ELEMENT_HTML '<font size="-1"><div id="' + LOG_ELEMENT_ID + '"></div></font>'
	#define LOG_ELEMENT_HTML '<font size="-1">PowerBar log:<BR><div id="' + LOG_ELEMENT_ID + '"></div></font>'
	#define LOG_MAX_LINES 7
	var logText = "";
	function log(str) {
		str = niceDate() + ": " + str;
		logText += str + '\n';
		while (countCharIn(logText,'\n') > LOG_MAX_LINES) {
			// alert("Reducing from: "+logText);
			logText = logText.substring(logText.indexOf('\n')+1);
			// alert("To: "+logText);
		}
		var element;
		try {
			element = top.powerBarFrame.document.getElementById(LOG_ELEMENT_ID);
		} catch (e) {
			alert("Error logging: " + e + "  Log was: \"" + logText + "\"");
		}
		if (element) {
			element.innerHTML = toHtml(logText);
			// element.innerHTML = ( skipEscaping ? logText : toHtml(logText) );
			// element.innerHTML = logText;
			// Attempt at forced refresh:
			/*
			// if (element.style.visibility == "visible") {
				try { // konq:
					element.style = "visibility: hidden";
					element.style.width = 50;
				} catch (e) { // moz:
					element.style.visibility = "visibility: hidden";
				}
			// } else {
				try { // konq:
					element.style = "visibility: visible";
					element.style.width = 20;
				} catch (e) { // moz:
					element.style.visibility = "visibility: visible";
				}
			// }
			*/
		}
	}

#else

	#define LOG(str) 
	#define LOG_ELEMENT_HTML ""
	#define WARN(str) 

#endif





/////////////////////////////// Constants ///////////////////////////////

/////////// Options: (will be load/saveable using cookies...) ///////////

var listOfOptions = [ "opt_powerBarPosition", "opt_ButtonsOnPowerBarForms", "opt_ClockEnabled", "opt_JSTesterEnabled", "opt_ViewInnerHtmlButton", "opt_JSReflectorEnabled", "opt_XPathGrabberEnabled" ];

var opt_powerBarPosition = "top";
var opt_ButtonsOnPowerBarForms = true;
var opt_ClockEnabled = true;
var opt_JSTesterEnabled = true;
var opt_ViewInnerHtmlButton = true;
var opt_JSReflectorEnabled = true;
var opt_XPathGrabberEnabled = true;





/////////////////////////// Runtime constants ///////////////////////////

var defaultSubmitButton = ( opt_ButtonsOnPowerBarForms ? '<INPUT type="button" value="Go" onclick="submit()">' : "" );
var powerBarFrame; // == powerBarFrame
var mainFrame;
var powerBarLocationFormElement;
var lastKnownLocation = "";

var todoList = "";





/////////////////////////// Runtime variables ///////////////////////////





//////////////////////// PowerBar initialisation ////////////////////////

#ifdef BOOKMARKLET
	init();
	// powerBarFrame = window.frames[0];
	// mainFrame = window.frames[1];
	// generatePowerBar();
#else
	init();
#endif

function createFrameset() {
	var distrib = ( opt_powerBarPosition == "top" ? "20%,*" : "*,20%" );
	#ifdef BOOKMARKLET
		var framesetHtml = '<IFRAME width="900" height="260" id="powerBarFrame" src="about:blank"></IFRAME>\n';
		framesetHtml += '<BR>\n';
		framesetHtml += '<IFRAME width="900" height="600" id="mainFrame" src="about:blank"></IFRAME>\n';
	#else
		var startFrameSet     = '<frameset rows="' + distrib + '">';
		var powerBarFrameHtml = '<frame src="about:blank">';
		// var mainFrameHtml     = '<frame src="http://www.google.com/">';
		var mainFrameHtml     = '<frame src="about:blank">';
		var endFrameSet       = '</frameset>';
		var framesetHtml = "";
		framesetHtml += startFrameSet;
		framesetHtml += ( opt_powerBarPosition == "top" ?  powerBarFrameHtml : mainFrameHtml );
		framesetHtml += ( opt_powerBarPosition == "bottom" ?  powerBarFrameHtml : mainFrameHtml );
		framesetHtml += endFrameSet;
	#endif
	document.writeln(framesetHtml);
	// #ifdef BOOKMARKLET
		// powerBarFrame = document.getElementById("powerBarFrame");
		// mainFrame = document.getElementById("mainFrame");
	// #else
		powerBarFrame  = window.frames[ ( opt_powerBarPosition == "top" ? 0 : 1 ) ];
		mainFrame = window.frames[ ( opt_powerBarPosition == "top" ? 1 : 0 ) ];
	// #endif
}

// TODO: Move init code for each module to that module and out of here.
//       Have it called automatically, either with reflection, or with "#define"s!

function generatePowerBar() {
	// Note: Since this HTML will sit in a different frame, calls to powerBar's functions and vars must be made with a preceding "top."
	var powerBarHtml = "";

	powerBarHtml += '<table><tr><td valign="top" align="center">';

	//// Location URL textfield:
	powerBarHtml += '<FORM name="locationForm" onsubmit="top.changeLocation(top.mainFrame,top.powerBarFrame.locationForm.locationBox.value)" action="javascript:">';
	powerBarHtml += 'Location:\n';
	powerBarHtml += '<INPUT name="locationBox" type="text" size="30" value="http://www.google.com/">';
	// powerBarHtml += defaultSubmitButton;
	if (opt_ButtonsOnPowerBarForms) {
		powerBarHtml += '<INPUT type="button" value="Go" onclick="top.changeLocation(top.mainFrame,top.powerBarFrame.locationForm.locationBox.value)">';
	}
	powerBarHtml += '</FORM>';

	// powerBarHtml += '</td><td valign="top" align="center">';

	if (opt_ViewInnerHtmlButton) {
		// BUG: in Konqueror works on initially-loaded page, but not on Google's page.
		// powerBarHtml += '<INPUT type="button" value="View innerHTML" onclick="try { top.writeToWindow(\'Inner HTML of some page at some point\',top.toHtml(top.mainFrame.document.documentElement.innerHTML)) } catch (e) { top.log(e); }">';
		powerBarHtml += '<INPUT type="button" value="View innerHTML" onclick="top.viewInnerHtml()">';
		powerBarHtml += '<BR>';
	}

	if (opt_XPathGrabberEnabled) {
		powerBarHtml += '<INPUT id="XPathGrabberButton" type="button" value="XPathGrabber" onclick="top.xPathGrabber()">'; // but mozilla needs this too!
		powerBarHtml += '<BR>';
	}

	// powerBarHtml += '</td><td valign="top" align="center">';

	// TODO factorise these forms with their actions duplicated in the buttons etc.

	if (opt_JSReflectorEnabled) {
		// powerBarHtml += '<FORM onsubmit="top.jsReflectorInit()" action="javascript:">'; // but this needed for mozilla
		// powerBarHtml += 'JS reflector:\n';
		powerBarHtml += '<FORM name="jsReflectorForm" onsubmit="top.jsReflectorShow(path.value)" action="javascript:">';
		powerBarHtml += '<INPUT name="path" type="text" size="10" value="top.mainFrame">';
		powerBarHtml += '<INPUT type="button" value="JSReflect" onclick="top.jsReflectorShow(path.value)">';
		// powerBarHtml += '<INPUT type="button" value="JSReflect" onclick="top.jsReflectorInit()">'; // but mozilla needs this too!
		// powerBarHtml += '</FORM>';
		powerBarHtml += '<BR>';
	}

	// Javascript tester textfield:
	if (opt_JSTesterEnabled) {
		// powerBarHtml += '<FORM action="javascript:top.processJs(code.value)">'; // worked fine for konq
		powerBarHtml += '<FORM onsubmit="top.processJs(code.value)" action="javascript:">'; // but this needed for mozilla
		powerBarHtml += 'JavaScript tester:\n';
		// powerBarHtml += '<INPUT id="codeToExecute" name="code" type="text" size="30" value="type some javascript here">';
		// powerBarHtml += '<TEXTAREA id="codeToExecute" name="code" type="text" columns="20" rows="3">type some javascript here</TEXTAREA>';
		powerBarHtml += '<TEXTAREA id="codeToExecute" name="code" type="text" columns="20" rows="3">Type some javascript here, e.g.: thisbox = top.powerBarFrame.document.getElementsByTagName("textarea")[0]; thisbox.cols=60; thisbox.rows=20; </TEXTAREA>';
		// powerBarHtml += '<INPUT type="button" value="Go" onclick="submit()">'; // worked fine for konq
		if (opt_ButtonsOnPowerBarForms) {
			powerBarHtml += '<INPUT type="button" value="Go" onclick="top.processJs(code.value)">'; // but mozilla needs this too!
		}
		// powerBarHtml += defaultSubmitButton;
		powerBarHtml += '</FORM>';
		powerBarHtml += '<BR>';
	}

	powerBarHtml += '</td><td valign="top" align="center">';

	// Clock:
	if (opt_ClockEnabled) {
		powerBarHtml += '<div id="clockHook">clock loading...</div>';
	}

	// Options button:
	powerBarHtml += '<INPUT type="button" value="Options..." onclick="top.editOptions()">';

	// powerBarHtml += '</td><td valign="top" align="center">'
	// powerBarHtml += '<INPUT type="button" value="Wake up PowerBar!" onclick="top.refreshTimer()">';

	#ifdef LOGGING
		powerBarHtml += '<INPUT type="button" value="Show log" onclick="alert(document.getElementById(\''+LOG_ELEMENT_ID+'\').innerHTML)">';
	#endif

	#ifdef LOGGING
		powerBarHtml += "<P>" + LOG_ELEMENT_HTML;
	#endif

	powerBarHtml += '</td></tr></table>';

	powerBarHtml += '<A href="http://www.zvon.org/xxl/JSDOMFactory/index.html">See also</A>';

	writeToFrame(powerBarFrame,powerBarHtml);
	powerBarLocationFormElement = powerBarFrame.document.forms[0];

	// alert("Getting: "+document.getElementById(LOG_ELEMENT_ID));

	LOG("generatePowerBar() finished.");

}

var timerId;
function refreshTimer() {
	clearTimeout(timerId);
	timerId = setTimeout('updatePowerBar()',1000);
}

function init() {
	createFrameset();
	generatePowerBar();
	// TODO: Make this use referer, or last in browser's history, or url provided via CGI, or attach to last used window, or something useful.
	writeToFrame(mainFrame,"Welcome to PowerBar."
		+ "<P>PowerBar is an addition to your browser to provide much-needed features for web-surfers and web-developers."
		+ "  It will allow you to make interactive changes to the pages you read, and create useful filters to aid your surfing."
		+ "  It will provide debugging tools for Javascript and the DOM."
		+ "<P>New features:"
		+ "<BLOCKQUOTE><TL>"
		+ "<LI>JavaScript reflector lets you examine JS objects."
		+ "<LI>XPath grabber for Mozilla and Konqueror."
		+ "</TL></BLOCKQUOTE>"
		+ "<P>Planned features:"
		+ "<BLOCKQUOTE><TL>"
		+ "<LI>Allow user to hide unwanted elements on page with a killer-click (useful to remove bits before printing)."
		+ "<LI>Attach to and debug windows which are already running without a PowerBar."
		+ "<LI>Make all table cells, blockquotes, and lists foldable."
		+ "<LI>Other useful stuff ... eg. sort table by value in row N, hide all images matching REGEXP, highlight words matching REGEXP"
		+ "</TL></BLOCKQUOTE>"
		+ "<P>Urgent issues:"
		+ "<BLOCKQUOTE><TL>"
		+ "<LI>Need to port to IE."
		+ "<LI>How to I get javascript to talk between windows?"
		+ "<LI>Can we stop log freezes in Konqueror?!"
		+ "<LI>How do we (ahem) get round security preventing access to pages from other sites?"
		+ "</TL></BLOCKQUOTE>"
	);
	updatePowerBar();
}





///////////////////////////// PowerBar calls /////////////////////////////

function updatePowerBar() {
	LOG("updatePowerBar() called.");
	//// Watch for change of address in mainFrame from user following link, and update location textbox.
	//// Disabled because too sensitive (on init, and even if user is typing!)
	var urlOfMainFrame = mainFrame.location;
	// var urlInTextBox = powerBarFrame.document.forms[0].location;
	try {
		if (powerBarFrame.document.forms["locationForm"]) {
			var urlInTextBox = powerBarFrame.document.forms["locationForm"].locationBox.value;
			// if (urlOfMainFrame != urlInTextBox.value) {
			if (urlOfMainFrame != lastKnownLocation) {
				LOG("URL changed from " + lastKnownLocation + " to " + urlOfMainFrame);
				urlInTextBox.value = urlOfMainFrame; // BUG: doesn't work for Mozilla
				lastKnownLocation = urlOfMainFrame;
			}
		}
		if (opt_ClockEnabled) {
			var clockElem = powerBarFrame.document.getElementById('clockHook');
			clockElem.innerHTML = "" + niceDate();
		}
		processTodoList();
		refreshTimer();
	} catch (e) {
		LOG(e);
	}
}

function processTodoList() {
	while (todoList != "") {
		// powerBarFrame.document.body.innerHTML += "Trying to pop from list:\n" + todoList+"\n\n";
		// alert("Trying to pop from list:\n" + todoList);
		var i = todoList.indexOf("\n");
		var line;
		if (i>=0) {
			line = todoList.substring(0,i);
			todoList = todoList.substring(i+1);
		} else {
			line = todoList;
			todoList = "";
		}
		var result;
		try {
			result = eval(line);
		} catch (e) {
			result = e;
		}
		// alert("processTodoList(): Tried:\n<EVAL>" + line + "</EVAL>\nGot:\n<RESULT>"+result+"</RESULT>");
	}
}

function changeLocation(frame,url) {
	// writeToFrame(frame,'<script type="text/javascript">window.location = "' + url + '";</script>');
	lastKnownLocation = url;
	// frame.location = url;
	var tidyUrl = '/cgi-bin/joey/tidy?url=';
	if (new XMLHttpRequest()) {
		var httpRequest = new XMLHttpRequest();
		httpRequest.open('GET', tidyUrl+url, false);
		httpRequest.send(null);
		var xmlDocument = httpRequest.responseXML;
		alert(xmlDocument.documentElement.nodeName)
	} else if (new ActiveXObject('Microsoft.XMLHTTP')) {
		// Konqueror attempts this.
		var httpRequest = new ActiveXObject('Microsoft.XMLHTTP');
		httpRequest.open('GET', tidyUrl+url, false);
		httpRequest.send();
		var xmlDocument = httpRequest.responseXML;
		if (xmlDocument == null)
			WARN("Tried to request "+tidyUrl+url+" but got xmlDocument="+xmlDocument);
		else
			alert("Got xmlDocument = "+xmlDocument.documentElement.nodeName);
	}
	refreshTimer();
}





//////////////////////////// PowerBar modules ////////////////////////////



//////////////////////////// Module: Options

function componentTypeForJSType(jsType) {
	return (
		jsType == "boolean" ? "checkbox" :
		jsType == "string" ? "text" :
		jsType == "number" ? "text" :
		"button"
	);
}

function editOptions() {
	var html = "";
	html += "<FORM action='javascript:top.generatePowerBar()'>";
	for (var i=0;i<listOfOptions.length;i++) {
		var option = listOfOptions[i];
		var value = eval(option);
		var type = typeof(value);
		var componentType = componentTypeForJSType(type);
		var componentValueBit = ( type == "boolean" ? (value ? "checked" : "")
		                                            : "value='" + value + "'" );
		var componentAction = ( type == "boolean" ? "onclick='top."+option+"=status; top.log(\"\"+top."+option+");'"
		                                          : "onblur='top."+option+"=value; top.log(\"\"+top."+option+");'" ); // top.submitOptions(this);
		html += "Option \""+option+"\": ";
		html += '<INPUT id="' + option + '" name="' + option + '" type="' + componentType + '" ' + componentValueBit + ' ' + componentAction + '>';
		html += "<BR>";
		// html += "option "+option+" has value = "+value+" and type "+type+"<BR>";
	}
	html += "<INPUT type='submit' value='OK'>";
	html += "</FORM>";
	writeToFrame(mainFrame,html);
}

// var thingy;
// function submitOptions(thing) {
	// thingy = thing;
	// alert("Got a thing: " + tryeval(thing) + " of type=" + trytypeof(thing));
	// jsReflectorShow("top.thingy");
	generatePowerBar();
// }



//////////////////////////// Module: JavaScript tester

function processJs(codeToExecute) {
	var result;
	try {
		result = eval(codeToExecute);
	} catch (e) {
		result = e;
	}
	var report = "I executed\n<CODE>" + codeToExecute + "</CODE>\nand got\n<RESULT>" + result + "</RESULT>";
	var htmlReport = toHtml(report);
	#ifdef LOGGING
		LOG(report);
	#else
		writeToFrame(mainFrame,htmlReport);
		//// Failed attempts to get Konqueror to write later since it dosn't always work first time:
		// todoList += "mainFrame.document.body.innerHTML = \""+report+"\";";
		todoList += "mainFrame.document.body.innerHTML = \"" + escapeString(htmlReport) + "\";";
		// alert(report);
	#endif
	refreshTimer();
}



//////////////////////////// Module: JavaScript reflector

var jsReflectorHistory = new Array();

function jsReflectorInit() {
	jsReflectorShow("top.powerBarFrame");
}

// TODO: popup reflector in a separate window

function jsReflectorShow(objName) {
	if (!arrayContains(jsReflectorHistory,objName)) {
		jsReflectorHistory.push(objName);
	}
	LOG("jsReflectorShow(\"" + objName + "\");");
	try {
		var obj = tryeval(objName);
		var html = "";
		html += "Go back to: ";
		for (var i=0;i<jsReflectorHistory.length;i++) {
			var prevObjName = jsReflectorHistory[i];
			html += "<a href='javascript:top.jsReflectorShow(\"" + prevObjName + "\")'>" + prevObjName + "</a>";
			if (i < jsReflectorHistory.length - 1) {
				html += ", ";
			}
		}
		var editableObjName = "<INPUT type='text' size='30' value='" + objName + "' onblur='javascript:if (value!=defaultValue) { top.jsReflectorShow(value) }'>";
		html += "<h3>Inspecting: " + trytypeof(obj) + " " + editableObjName + " = " + obj + "</h3>";

		// Ripped off the web, testing here:
		#ifdef STUFF_IM_JUST_TESTING
			html += "<script language='JavaScript'><!--\n";
			html += "  function load(file,target) {\n";
			html += "    if (target != '')\n";
			html += "      target.window.location.href = file;\n";
			html += "    else\n";
			html += "    window.location.href = file;\n";
			html += "  }\n";
			html += "//-"; // must break up!
			html += "-></script>\n";

			html += "<a href='javascript:load(\"b.html\",top.opener)'>Test opener</a><BR>\n";
		#endif

		html += "<blockquote>";
		html += "<table cellpadding='0' cellspacing='0'>";
		var i = 0;
		var list = "";
		for (var name in obj) { // BUG: Mozilla doesn't find the "document" in window objects!
			var globName = objName + "." + name;
			var value = "<neverset>";
			var type = "<neverset>";
			try {
				value = eval("obj." + name);
				type = trytypeof(value);
				// We need to ensure it can be evaluated as a string or it might fail when added to HTML later:
				value = "" + value;
			} catch (e) {
				value = "<unattainable> (" + e + ")";
			}
			var link = 'javascript:top.jsReflectorShow("' + globName + '")';
			list += "<tr>";
			list += "<td align='right'>" + type + "&nbsp;</td>";
			list += "<td align='center'><a href='" + link + "'>" + name + "</a></td>";
			list += "<td align='left'>&nbsp;=&nbsp;" + toHtml(strip(value)) + "</td>";
			list += "</tr>";
			list += "\n"; // for sortLines
		}
		list = sortLines(list);
		html += list;
		html += "</table>";
		html += "</blockquote>";
		#ifdef POPUP_JSREFLECTOR
			// BUG re. popup window: It's what we want really, but currently in Mozilla at least, subsequent calls to top.jsReflectorShow() from the new window can not find the function!
			writeToWindow('jsReflector',html);
		#else
			writeToFrame(mainFrame,html);
		#endif
		// writeToFrame(powerBarFrame,html);
	} catch (e) {
		LOG(e);
	}
}



//////////////////////////// Module: XPath grabber

var cnt;
function xPathGrabber() {
	cnt = 0;
	try {
		onAllNodesDo(top.mainFrame.document,"",attachClickListener,doNothing); // not working! hence showShapeOld
	} catch (e) {
		LOG("Problem during onAllNodesDo(): " + e);
	}
	LOG("Added XPath click capture to " + cnt + " nodes.");
}

function attachClickListener(context,node) {
	// if (node.childNodes.length == 0) {
	if (node.captureEvents) {
		node.captureEvents(Event.CLICK); // only Moz needs this
	}
	node.onmouseup = processClick;
	cnt++;
	// node.onmouseup = 'alert("Node " + this + " has XPath = " + getXPath(this));';
	// }
}

// var eventObj;

// This gets called for every node below the mouse, not just the first one!
function processClick(event) {
	var node = event.srcElement;
	if (!node) {
		node = event.currentTarget;
	}
	// alert("Node " + node + " has " + node.childNodes.length + " kids and XPath:\n" + getXPath(node));
	// LOG(getXPath(node) + ": \"" + toHtml(node.)));
	var col = randomColour();
	// log("XPath: <font color='"+col+"'>" + getXPath(node) + "</font>");
	log("XPath: " + getXPath(node));
	if (node.style) {
		try {
			node.style.backgroundColor = col;
		} catch (e) {
			LOG(e);
		}
	}
	// event.currentTarget.onmouseup = "";
	// eventObj = node;
	// jsReflectorShow("top.eventObj");
}

function getXPath(node) {
	var parent = node.parentNode;
	if (!parent) {
		return "";
	}
	var siblings = parent.childNodes;
	var totalCount = 0;
	var thisCount = -1;
	for (var i=0;i<siblings.length;i++) {
		var sibling = siblings[i];
		if (sibling.nodeType == node.nodeType) {
			totalCount++;
		}
		if (sibling == node) {
			thisCount = totalCount;
		}
	}
	//// Extended info xpath: could also show name, id, other attribs if present:
	// return getXPath(parent) + "/" + node.nodeName + "[" + thisCount + "/" + totalCount + "]";
	//// Pure xpath:
	// return getXPath(parent) + "/" + node.nodeName + "[" + thisCount + "]";
	//// Neat when it can be:
	return getXPath(parent) + "/" + node.nodeName.toLowerCase() + (totalCount>1 ? "[" + thisCount + "]" : "" );
}



//////////////////////////// Module: View inner HTML

function viewInnerHtml() {
	var targetPath = "top.mainFrame.document.documentElement.innerHTML";
	try {
		LOG("viewInnerHtml() called");
		var innerHTML = eval(targetPath);
		LOG("Got innerHTML length " + innerHTML.length);
		var toHtml = top.toHtml(innerHTML);
		LOG("Got toHtml length " + toHtml.length);
		top.writeToWindow('Inner HTML of some page at some point',toHtml);
		LOG("Wrote to window");
	} catch (e) {
		LOG(e);
		whereDoesPathBreak(targetPath);
	}
}



/////////////////////////// Library functions ///////////////////////////

function writeToFrame(frame,html) {
	LOG("Writing "+html.length+" bytes to "+frame+" "+frame.id);
	// if (frame.document.open()) {
		frame.document.open();
		frame.document.write("<html><body>"); // you need /some/ kind of surrounding tag if you are just writing text
		frame.document.write(html);
		frame.document.write("</body></html>"); // these tags seemed sensible to me
		frame.document.close();
	// } else {
		// try {
			// frame.location = "about:blank";
		// } catch (e) {
			// alert("Setting "+frame+".location to blank threw: "+e);
		// }
		// frame.document.body.innerHTML = html;
	// }
}

function writeToWindow(title,contents,options) {
	// var w = window.open('about:blank','jsReflector','menubar,resizable,scrollbars,width=800,height=600');
	//// 'about:blank' causes Konqueror to empty window after writing the yummy stuff, so...
	if (!options) {
		options = 'menubar,resizable,scrollbars,width=800,height=600';
	}
	var w = window.open('',title,options);
	// Dammit something goes wrong here with Konqueror if it is put in mode (open new windows in new tab)
	writeToFrame(w,contents);
	// w.document.writeln('<b>Generated XPath of selected HTML Element:</b><br>');
	// w.document.open();
	// w.document.write("<HTML><BODY>");
	// w.document.write(contents);
	// w.document.write("</BODY></HTML>");
	// w.document.close();
	w.focus();
	w.jsReflectorShow = new Function(top.jsReflectorShow);
	if (w.opener == null) // for older browsers, tell the child window we are the parent:
		w.opener = self;
}

function escapeString(text) {
	var map = new Array(); // TODO: more!
	map['\n'] = "\\n";
	map['\t'] = "\\t";
	map['\"'] = "\\\"";
	map['\\'] = "\\\\";
	var str = "";
	for (var i=0;i<text.length;i++) {
		var c = text.charAt(i);
		str += ( map[c] ? map[c] : c );
	}
	return str;
}

function toHtml(text) {
	var map = new Array(); // TODO: more!
	map['\n'] = "<BR>";
	map[' '] = "&nbsp;";
	map['\"'] = "&quot;";
	map['<'] = "&lt;";
	map['>'] = "&gt;";
	var html = "";
	for (var i=0;i<text.length;i++) {
		var c = text.charAt(i);
		html += ( map[c] ? map[c] : c );
	}
	return html;
}

function countCharIn(str,srch) {
	var cnt = 0;
	for (var i=0;i<str.length;i++) {
		if (str.charAt(i) == srch)
			cnt++;
	}
	return cnt;
}

function niceDate() {
	var now = "" + new Date();
	var bits = splitAt(now," ");
	return bits[1] + " " + bits[2] + " " + bits[4];
}

function strip(str) {
	if (str.length > 100) {
		return str.substring(0,100 - 3) + "...";
	}
	return str;
}

function trytypeof(obj) {
	try {
		var type = typeof(obj);
		return type;
	} catch (e) {
		return "TYPE_ERROR: "+e;
	}
}

function tryeval(code) {
	try {
		var res = eval(code);
		return res;
	} catch (e) {
		return "EVAL_ERROR: "+e;
	}
}

function splitAt(str,srch) {
	var list = new Array();
	var i = 0;
	while (true) {
		var j = str.indexOf(srch);
		if (j < 0)
			break;
		list[i] = str.substring(0,j);
		str = str.substring(j + 1);
		i++;
	}
	list[i] = str;
	return list;
}

function sortLines(linesStr) {
	var lines = splitAt(linesStr,'\n');
	lines = lines.sort();
	return lines.join("\n");
	/*
	var lines = splitAt(linesStr,'\n');
	linesStr = ""; // can wait till later but why not save memory?!
	// bubblesort
	for (var start = 0; start<lines.length; start++) {
		for (var i = 0; i<lines.length - 1; i++) {
			// if (lines[i] > lines[i + 1]) {
			// if (lines[i].compareTo(lines[i + 1]) > 0) {
			// if (false) {
			if (!areOrderedStrings(lines[i],lines[i + 1])) {
				// alert("Swapping " + i + " and " + (i + 1) + "." );
				var tmp = lines[i];
				lines[i] = lines[i + 1];
				lines[i + 1] = tmp;
			}
		}
	}
	for (var i = 0; i<lines.length; i++) {
		linesStr += lines[i] + '\n';
	}
	return linesStr;
	*/
}

function areOrderedStrings(a,b) { // is a <= b ?
	return (a.localeCompare(b) >= 0);
	/*
	for (var i=0;i<a.length;i++) {
		// all chars so far have been identical
		if (i >= b.length) return false;
		if (a.charAt(i) < b.charAt(i)) return true;
		if (a.charAt(i) > b.charAt(i)) return false;
	}
	return true; // b is either identical or longer
	*/
}

// From starfield3dj10.html:
function doNothing(context,node) {
	return context;
}
// Note: possible difference in implementation: if context is always going to be a reference to an object (as opposed to a primitive), then it needn't be passed back by the action functions.
function onAllNodesDo(node,context,actionBefore,actionAfter) {
	// TODO: if context is observably null, then needn't pass to actionBefore/After (which in turn shouldn't/needn't accept it).  Note change to doNothing required too!
	context = actionBefore(context,node);
	var kids = node.childNodes;
	for (var i=0;i<kids.length;i++) {
		var k = kids[i];
		context = onAllNodesDo(k,context,actionBefore,actionAfter);
	}
	context = actionAfter(context,node);
	return context;
}

function randomColour() {
	var hex = "0123456789abcdef";
	var col = "#";
	for (var i=0;i<6;i++) {
		col += hex.charAt(Math.random()*16);
	}
	return col;
}

function arrayContains(array,item) {
	for (var i=0;i<array.length;i++) {
		if (array[i] == item) {
			return true;
		}
	}
	return false;
}

function whereDoesPathBreak(path) {
	var i = -1;
	while (true) {
		var oldi = i;
		i = path.indexOf(".",i+1);
		if (i == oldi || i == -1)
			break;
		var testPath = path.substring(0,i);
		try {
			var result = eval(testPath);
			var works = "works: " + result;
			LOG(testPath + " returned: " + result);
		} catch (e) {
			LOG(testPath + " failed with \"" + e + "\"!");
			alert(testPath + " failed with \"" + e + "\"!");
			break;
			// ...
		}
	}
}





#ifdef WRAP_IN_HTML_PAGE
// --> </script>

// vim: ft=javascript foldmethod=indent foldenable
</HEAD>
<BODY>If you don't have Javascript, you're not getting in.</BODY>
</HTML>
#endif
