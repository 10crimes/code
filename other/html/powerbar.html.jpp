<HTML>
<HEAD>

<TITLE>Powerbar</TITLE>

<script type="text/javascript"> <!--

// Useful: :! onchange "powerbar.html.jpp" do jpp -- powerbar.html.jpp

var exploder = (navigator.appName == "Microsoft Internet Explorer");
var nutscrape = (navigator.appName == "Netscape"); // also what Mozilla reports
var konqueror = (navigator.appName == "Konqueror"); // also what Mozilla reports
var browserCanWriteWithDocumentDotOpen = nutscrape;

///////////////////////// Compile-time options /////////////////////////

// ------------------------ Logging -----------------------

// The simplest demonstration of the usefulness of #define's pre-compile stripping.

#define LOGGING

// You must add LOG_ELEMENT_HTML at some point to the powerBarFrame
// You can then log to that element using LOG(report);

#ifdef LOGGING

	#define LOG(str) log(str)
	#define LOG_ELEMENT_ID "logElementId"
	#define LOG_ELEMENT_HTML '<div id="' + LOG_ELEMENT_ID + '"></div>'
	#define LOG_MAX_LINES 10
	var logText = "";
	function log(str) {
		logText += toHtml(str + '\n');
		while (countCharIn(logText,'\n')>LOG_MAX_LINES) {
			logText = logText.substring(logText.indexOf('\n')+1);
		}
		var element = top.powerBarFrame.document.getElementById(LOG_ELEMENT_ID);
		if (element) {
			element.innerHTML = logText;
		}
	}

#else

	#define LOG(str) 
	#define LOG_ELEMENT_HTML ""

#endif

/////////////////////////////// Constants ///////////////////////////////

/////////// Options: (will be load/saveable using cookies...) ///////////

var listOfOptions = [ "opt_powerBarPosition", "opt_ClockEnabled", "opt_JavaScriptTester", "opt_ButtonsOnPowerBarForms", "opt_ViewInnerHtmlButton" ];

var opt_powerBarPosition = "top";
var opt_ClockEnabled = true;
var opt_JavaScriptTester = true;
var opt_ButtonsOnPowerBarForms = true;
var opt_ViewInnerHtmlButton = true;

/////////////////////////// Runtime constants ///////////////////////////

var defaultSubmitButton = ( opt_ButtonsOnPowerBarForms ? '<INPUT type="button" value="Go" onclick="submit()">' : "" );
var powerBarFrame; // == powerBarFrame
var mainFrame;
var powerBarLocationFormElement;
var lastKnownLocation = "";

var todoList = "";

/////////////////////////// Runtime variables ///////////////////////////

//////////////////////// PowerBar initialisation ////////////////////////

function createFrameset() {
	var distrib = ( opt_powerBarPosition == "top" ? "20%,*" : "*,20%" );
	var startFrameSet     = '<frameset rows="'+distrib+'">';
	var powerBarFrameHtml = '<frame src="about:blank">';
	// var mainFrameHtml     = '<frame src="http://www.google.com/">';
	var mainFrameHtml     = '<frame src="about:blank">';
	var endFrameSet       = '</frameset>';
	var framesetHtml = "";
	framesetHtml += startFrameSet;
	framesetHtml += ( opt_powerBarPosition == "top" ?  powerBarFrameHtml : mainFrameHtml );
	framesetHtml += ( opt_powerBarPosition == "bottom" ?  powerBarFrameHtml : mainFrameHtml );
	framesetHtml += endFrameSet;
	document.writeln(framesetHtml);
	powerBarFrame  = window.frames[ ( opt_powerBarPosition == "top" ? 0 : 1 ) ];
	mainFrame = window.frames[ ( opt_powerBarPosition == "top" ? 1 : 0 ) ];
}

function generatePowerBar() {
	// Note: Since this HTML will sit in a different frame, calls to powerBar's functions and vars must be made with a preceding "top."
	var powerBarHtml = "";
	powerBarHtml += '<table width="100%"><tr><td align="center">';

	powerBarHtml += '<INPUT type="button" value="wakeUp!" onclick="refreshTimer()">';

	powerBarHtml += '</td><td align="center">';

	//// Location URL textfield:
	// powerBarHtml += '<FORM name="locationTextBox" action="javascript:top.changeLocation(top.mainFrame,this.location.value)">';
	powerBarHtml += '<FORM onsubmit="top.changeLocation(top.mainFrame,location.value)" action="javascript:">';
	powerBarHtml += 'Location:\n';
	powerBarHtml += '<INPUT name="location" type="text" size="30" value="http://www.google.com/">';
	// powerBarHtml += defaultSubmitButton;
	if (opt_ButtonsOnPowerBarForms) {
		powerBarHtml += '<INPUT type="button" value="Go" onclick="top.changeLocation(top.mainFrame,location.value)">';
	}
	powerBarHtml += '</FORM>';

	// Javascript tester textfield:
	if (opt_JavaScriptTester) {
		powerBarHtml += '</td><td align="center">';
		// powerBarHtml += '<FORM action="javascript:top.processJs(code.value)">'; // worked fine for konq
		powerBarHtml += '<FORM onsubmit="top.processJs(code.value)" action="javascript:">'; // but this needed for mozilla
		powerBarHtml += 'JavaScript tester:\n';
		powerBarHtml += '<INPUT id="codeToExecute" name="code" type="text" size="30" value="type some javascript here">';
		// powerBarHtml += '<INPUT type="button" value="Go" onclick="submit()">'; // worked fine for konq
		if (opt_ButtonsOnPowerBarForms) {
			powerBarHtml += '<INPUT type="button" value="Go" onclick="top.processJs(code.value)">'; // but mozilla needs this too!
		}
		// powerBarHtml += defaultSubmitButton;
		powerBarHtml += '</FORM>';
	}

	// Options button:
	powerBarHtml += '</td><td align="center">';
	powerBarHtml += '<INPUT type="button" value="Options..." onclick="top.editOptions()">';

	// Clock:
	if (opt_ClockEnabled) {
		powerBarHtml += '</td><td align="center">';
		powerBarHtml += '<div id="clockHook">clock loading...</div>';
	}

	if (opt_ViewInnerHtmlButton) {
		// TODO
		// powerBarHtml += '</td><td align="center">'
		// powerBarHtml += '<INPUT type="button" value="Check" onclick="alert(document.getElementById(\''+LOG_ELEMENT_ID+'\'))">';
	}

	#ifdef LOGGING
		powerBarHtml += '</td><td align="center">'
		powerBarHtml += '<INPUT type="button" value="Show log" onclick="alert(document.getElementById(\''+LOG_ELEMENT_ID+'\'))">';
	#endif

	powerBarHtml += '</td></tr></table>';

	#ifdef LOGGING
		powerBarHtml += "<br>" + LOG_ELEMENT_HTML;
	#endif

	writeToFrame(powerBarFrame,powerBarHtml);
	powerBarLocationFormElement = powerBarFrame.document.forms[0];

	// alert("Getting: "+document.getElementById(LOG_ELEMENT_ID));

	// LOG("generatePowerBar() finished.");

}

var timerId;
function refreshTimer() {
	clearTimeout(timerId);
	timerId = setTimeout('updatePowerBar()',1000);
}

function init() {
	createFrameset();
	generatePowerBar();
	// TODO: Make this use referer, or last in browser's history, or url provided via CGI.
	writeToFrame(mainFrame,"Welcome to PowerBar.  This addition to your browser will act like an extra toolbar, but will provide the latest radical Javascript technology from the Neuralyte laboratories, for your enhanced browsing pleazure.");
	updatePowerBar();
}

init();

///////////////////////////// PowerBar calls /////////////////////////////

function updatePowerBar() {
	LOG("updatePowerBar() called.");
	//// Watch for change of address in mainFrame from user following link, and update location textbox.
	//// Disabled because too sensitive (on init, and even if user is typing!)
	var urlOfMainFrame = mainFrame.location;
	// var urlInTextBox = powerBarFrame.document.forms[0].location;
	// if (urlOfMainFrame != urlInTextBox.value) {
	// if (urlOfMainFrame != lastKnownLocation) {
		// urlInTextBox.value = urlOfMainFrame;
		// lastKnownLocation = urlOfMainFrame;
	// }
	if (opt_ClockEnabled) {
		var clockElem = powerBarFrame.document.getElementById('clockHook');
		clockElem.innerHTML = "" + new Date();
	}
	processTodoList();
	refreshTimer();
}

function processTodoList() {
	while (todoList != "") {
		// powerBarFrame.document.body.innerHTML += "Trying to pop from list:\n" + todoList+"\n\n";
		// alert("Trying to pop from list:\n" + todoList);
		var i = todoList.indexOf("\n");
		var line;
		if (i>=0) {
			line = todoList.substring(0,i);
			todoList = todoList.substring(i+1);
		} else {
			line = todoList;
			todoList = "";
		}
		var result;
		try {
			result = eval(line);
		} catch (e) {
			result = e;
		}
		alert("processTodoList(): Tried:\n<EVAL>" + line + "</EVAL>\nGot:\n<RESULT>"+result+"</RESULT>");
	}
}

function changeLocation(frame,url) {
	// writeToFrame(frame,'<script type="text/javascript">window.location = "' + url + '";</script>');
	lastKnownLocation = url;
	frame.location = url;
	refreshTimer();
}

function processJs(codeToExecute) {
	var result;
	try {
		result = eval(codeToExecute);
	} catch (e) {
		result = e;
	}
	var report = "I executed\n<CODE>" + codeToExecute + "</CODE>\nand got\n<RESULT>" + result + "</RESULT>";
	var htmlReport = toHtml(report);
	writeToFrame(mainFrame,htmlReport);
	// todoList += "mainFrame.document.body.innerHTML = \""+report+"\";";
	todoList += "mainFrame.document.body.innerHTML = \"" + escapeString(htmlReport) + "\";";
	// alert(report);
	// refreshTimer();
}

function writeToFrame(frame,html) {
	if (browserCanWriteWithDocumentDotOpen) {
		frame.document.open();
		frame.document.write("<html><body>"); // you need /some/ kind of surrounding tag if you are just writing text
		frame.document.write(html);
		frame.document.write("</body></html>"); // these tags seemed sensible to me
		frame.document.close();
	} else {
		try {
			frame.location = "about:blank";
		} catch (e) {
			alert("Setting "+frame+".location to blank threw: "+e);
		}
		frame.document.body.innerHTML = html;
	}
}

function componentTypeForJSType(jsType) {
	return (
		jsType == "boolean" ? "checkbox" :
		jsType == "string" ? "text" :
		jsType == "number" ? "text" :
		"button"
	);
}

function editOptions() {
	var html = "";
	for (var i=0;i<listOfOptions.length;i++) {
		var option = listOfOptions[i];
		var value = eval(option);
		var type = typeof(value);
		var componentType = componentTypeForJSType(type);
		var componentValue = ( type == "boolean" ? value ? "checked" : "n" : value );
		html += "Option \""+option+"\": ";
		html += '<INPUT type="'+componentType+'" value="'+componentValue+'" action="alert(value)">';
		html += "<BR>";
		// html += "option "+option+" has value = "+value+" and type "+type+"<BR>";
	}
	writeToFrame(mainFrame,html);
}

/////////////////////////// Library functions ///////////////////////////

function escapeString(text) {
	var map = new Array(); // TODO: more!
	map['\n'] = "\\n";
	map['\t'] = "\\t";
	map['\"'] = "\\\"";
	map['\\'] = "\\\\";
	var str = "";
	for (var i=0;i<text.length;i++) {
		var c = text.charAt(i);
		str += ( map[c] ? map[c] : c );
	}
	return str;
}

function toHtml(text) {
	var map = new Array(); // TODO: more!
	map['\n'] = "<BR>";
	map[' '] = "&nbsp;";
	map['\"'] = "&quot;";
	map['<'] = "&lt;";
	map['>'] = "&gt;";
	var html = "";
	for (var i=0;i<text.length;i++) {
		var c = text.charAt(i);
		html += ( map[c] ? map[c] : c );
	}
	return html;
}

function countCharIn(str,srch) {
	var cnt = 0;
	for (var i=0;i<str.len;i++) {
		if (str.charAt(i) == srch)
			cnt++;
	}
	return cnt;
}

// --> </script>

</HEAD>
<BODY>If you don't have Javascript, you're not getting in.</BODY>
</HTML>
