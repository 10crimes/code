// Generated by CoffeeScript 1.8.0
(function() {
  var A, B, C, count, inspect, o,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  A = (function() {
    function A() {}

    A.prototype.foo = 1;

    return A;

  })();

  B = (function(_super) {
    __extends(B, _super);

    function B() {
      return B.__super__.constructor.apply(this, arguments);
    }

    return B;

  })(A);

  C = (function(_super) {
    __extends(C, _super);

    function C() {
      return C.__super__.constructor.apply(this, arguments);
    }

    return C;

  })(B);

  o = new C();

  console.log("o.constructor:", o.constructor);

  console.log("o.constructor.name:", o.constructor.name);

  console.log("o.constructor == C:", o.constructor === C);


  /*
  console.log("o.foo:", o.foo)
  console.log("o.constructor:", o.constructor)
  console.log("o.constructor.prototype:", o.constructor.prototype)
  console.log("o.constructor.prototype.constructor:", o.constructor.prototype.constructor)
  console.log("o.constructor.prototype.constructor.prototype:", o.constructor.prototype.constructor.prototype)
  console.log("o.constructor.prototype.constructor.prototype.constructor:", o.constructor.prototype.constructor.prototype.constructor)
  console.log("o.constructor.prototype.constructor.prototype.constructor.prototype:", o.constructor.prototype.constructor.prototype.constructor.prototype)
   */

  inspect = o;

  count = 5;

  while (true) {
    console.log("inspecting %s with constructor %s", inspect, inspect.constructor);
    if (inspect.hasOwnProperty('foo')) {
      console.log("Found foo on %s with constructor %s", inspect, inspect.constructor);
      break;
    }
    console.log("Moving through constructor %s to prototype %s", inspect.constructor, inspect.constructor.prototype);
    inspect = inspect.constructor.prototype;
    if (count-- === 0) {
      break;
    }
  }

}).call(this);
